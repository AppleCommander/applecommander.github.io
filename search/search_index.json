{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AppleCommander is a cross-platform set of tools used to manipulate Apple ][ disk images. There is a GUI packaged for Windows, Linux, or Mac OS X, and there are a number of command-line tools (see below) that are useful for build chains. Please visit AppleCommander on GitHub ! You can find current releases, submit tickets, and lend a helping hand. Capabilities AppleCommander is currently able to read and display information about disk images, export files of various types, create disk images, import files into disk images, and has a rudimentary compiler. AppleCommander incorporates support for cc65 , an improved command-line tool, and even an Ant interface. Disk image organizations Compressed images ( *.gz ); 140K DOS-ordered images ( *.do , *.dsk ); 140K ProDOS-ordered images ( *.po ); 140K Nibble (DOS ordered) images ( *.nib ); 800K ProDOS-ordered images ( *.2mg , *.2img ); 32MB ApplePC Hard Disk images ( *.hdv ). Disk formats DOS 3.3 (140K formats only); UniDOS, OzDOS (800K formats only); ProDOS; Apple Pascal (140K and 800K formats); SSI's RDOS (140K formats only); CP/M (probably only 140K formats); Gutenberg Word Processor; NakedOS (see the Super-Mon page ). Archive formats ShrinkIt (the archive will be automatically extracted into a ProDOS disk); AppleSingle ( ac only). File export filters Raw disk data (dumps blocks or sectors without regard to file length or operating system storage); Binary file (dumps file without any conversion); Hex dump; ASCII file filter; Formatted assembly output; Pascal \".text\" files; Applesoft BASIC file filter (file is de-tokenized and written out as a text file); Integer BASIC file filter (ditto); Business BASIC file (ditto); Graphic image file filter (supports black and white or color Hires images as well as black and white or color Double Hires images as well as standard Super Hires, and 3200 color Super Hires); Gutenberg Word processor; AppleWorks word processor (AWP) file filter (converts to text, poor HTML, or Rich-Text Format (RTF)); AppleWorks database (ADB) file filter (converts to CSV); AppleWorks spread sheet (ASP) file filter (converts to CSV). Compile capabilities (experimental) Applesoft BASIC Viewer capabilities BASIC programs (Applesoft and Integer BASIC); Applesoft BASIC is colored Graphics images (same as supported by the graphics export function) AppleWorks (database, spreadsheet, word processor) Text files (plain text, assembly source files, Pascal text files) Hex dump of all the above \"Raw\" format of all of the above; this includes all data as read from disk including length and starting address as well as full sectors/blocks Other CLI tooling AppleCommander includes a number of command-line tools: ac (based on AppleCommander) - see the ac page acx (experimental utility for AppleCommander) - see the acx page asu (AppleSingle utility) - see the asu README , bt (Applesoft BASIC tokenizer tool) - see the bt README , and st (Applesoft shape utility) - see the st README . Since the CLI tooling may be lacking, these additional resources should be useful: Directives section in the API overview Source formats for the Shapes defined in the API bastools sample code","title":"Overview"},{"location":"#capabilities","text":"AppleCommander is currently able to read and display information about disk images, export files of various types, create disk images, import files into disk images, and has a rudimentary compiler. AppleCommander incorporates support for cc65 , an improved command-line tool, and even an Ant interface.","title":"Capabilities"},{"location":"#disk-image-organizations","text":"Compressed images ( *.gz ); 140K DOS-ordered images ( *.do , *.dsk ); 140K ProDOS-ordered images ( *.po ); 140K Nibble (DOS ordered) images ( *.nib ); 800K ProDOS-ordered images ( *.2mg , *.2img ); 32MB ApplePC Hard Disk images ( *.hdv ).","title":"Disk image organizations"},{"location":"#disk-formats","text":"DOS 3.3 (140K formats only); UniDOS, OzDOS (800K formats only); ProDOS; Apple Pascal (140K and 800K formats); SSI's RDOS (140K formats only); CP/M (probably only 140K formats); Gutenberg Word Processor; NakedOS (see the Super-Mon page ).","title":"Disk formats"},{"location":"#archive-formats","text":"ShrinkIt (the archive will be automatically extracted into a ProDOS disk); AppleSingle ( ac only).","title":"Archive formats"},{"location":"#file-export-filters","text":"Raw disk data (dumps blocks or sectors without regard to file length or operating system storage); Binary file (dumps file without any conversion); Hex dump; ASCII file filter; Formatted assembly output; Pascal \".text\" files; Applesoft BASIC file filter (file is de-tokenized and written out as a text file); Integer BASIC file filter (ditto); Business BASIC file (ditto); Graphic image file filter (supports black and white or color Hires images as well as black and white or color Double Hires images as well as standard Super Hires, and 3200 color Super Hires); Gutenberg Word processor; AppleWorks word processor (AWP) file filter (converts to text, poor HTML, or Rich-Text Format (RTF)); AppleWorks database (ADB) file filter (converts to CSV); AppleWorks spread sheet (ASP) file filter (converts to CSV).","title":"File export filters"},{"location":"#compile-capabilities-experimental","text":"Applesoft BASIC","title":"Compile capabilities (experimental)"},{"location":"#viewer-capabilities","text":"BASIC programs (Applesoft and Integer BASIC); Applesoft BASIC is colored Graphics images (same as supported by the graphics export function) AppleWorks (database, spreadsheet, word processor) Text files (plain text, assembly source files, Pascal text files) Hex dump of all the above \"Raw\" format of all of the above; this includes all data as read from disk including length and starting address as well as full sectors/blocks","title":"Viewer capabilities"},{"location":"#other-cli-tooling","text":"AppleCommander includes a number of command-line tools: ac (based on AppleCommander) - see the ac page acx (experimental utility for AppleCommander) - see the acx page asu (AppleSingle utility) - see the asu README , bt (Applesoft BASIC tokenizer tool) - see the bt README , and st (Applesoft shape utility) - see the st README . Since the CLI tooling may be lacking, these additional resources should be useful: Directives section in the API overview Source formats for the Shapes defined in the API bastools sample code","title":"Other CLI tooling"},{"location":"ac/","text":"ac is the command-line tool that provides access to the core of AppleCommander's capabilities. A quick note All of these samples were done in a Unix-type environment (Mac OS X or Linux), hence the $ is the prompt character. Every sample assumes you have an ac.jar in the current directory and are therefore written out \"long-hand\". If you followed the install instructions , you have setup a command-line script to help you out, meaning that every java -jar ac.jar can be replaced with ac.sh or ac.bat . Additionally if you setup an alias , you can replace that to just ac . Setup whatever works for you and your environment, and be cognizant that the sample commands probably aren't quite exactly right for your setup! Options For a quick list of ac options, enter the -h command: $ java -jar ac.jar -h AppleCommander command line options [1.7.0]: -i <imagename> [<imagename>] display information about image(s). -ls <imagename> [<imagename>] list brief directory of image(s). -l <imagename> [<imagename>] list directory of image(s). -ll <imagename> [<imagename>] list detailed directory of image(s). -lsv <imagename> [<imagename>] list in CSV format brief directory of image(s). -lv <imagename> [<imagename>] list in CSV format directory of image(s). -llv <imagename> [<imagename>] list in CSV format detailed directory of image(s). -lsj <imagename> [<imagename>] list in JSON format brief directory of image(s). -lj <imagename> [<imagename>] list in JSON format directory of image(s). -llj <imagename> [<imagename>] list in JSON format detailed directory of image(s). -e <imagename> <filename> [<output>] export file from image to stdout or to an output file. -x <imagename> [<directory>] extract all files from image to directory. -g <imagename> <filename> [<output>] get raw file from image to stdout or to an output file. -p <imagename> <filename> <type> [[$|0x]<addr>] put stdin in filename on image, using file type and address [0x2000]. -pt <imagename> <filename> put stdin in filename on image defaulting to TXT file type, setting high bit on and replacing newline characters with $8D. -ptx <imagename> <filename> put stdin in filename on image defaulting to TXT file type, clearing high bit and replacing newline characters with $0D. -d <imagename> <filename> delete file from image. -k <imagename> <filename> lock file on image. -u <imagename> <filename> unlock file on image. -n <imagename> <volname> change volume name (ProDOS or Pascal). -dos <imagename> <filename> <type> put stdin with DOS header in filename on image, using file type and address from header. -as <imagename> [<filename>] put stdin with AppleSingle format in filename on image, using file type, address, and (optionally) name from the AppleSingle file. -geos <imagename> interpret stdin as a GEOS conversion file and place it on image (ProDOS only). -dos140 <imagename> create a 140K DOS 3.3 image. -pro140 <imagename> <volname> create a 140K ProDOS image. -pro800 <imagename> <volname> create an 800K ProDOS image. -pas140 <imagename> <volname> create a 140K Pascal image. -pas800 <imagename> <volname> create an 800K Pascal image. -convert <filename> <imagename> [<sizeblocks>] uncompress a ShrinkIt or Binary II file; or convert a DiskCopy 4.2 image into a ProDOS disk image. -bas <imagename> <filename> import an AppleSoft basic file from text back to its tokenized format. Note that the -cc65 has been deprecated as CC65 itself is moving to using the AppleSingle format ( -as flag). Use -dos instead. -cc65 will still be recognized, but it maps to -dos and a warning will be printed. Creating an image Type Description DOS 3.3 The -dos140 command creates an empty 140K DOS 3.3 disk image in DOS sector order; DOS volumes do not have names, and volume number is the default (254). ProDOS The -pro140 command creates an empty 140K ProDOS disk image, and -pro800 creates an empty 800K image, both in ProDOS sector order. Pascal The -pas140 command creates an empty 140K Pascal disk image, and -pas800 creates an empty 800K image, both in Pascal sector order. To be read correctly, DOS order disk image names should end in .dsk or .do , while ProDOS and Pascal order image names should end in .po . The resulting images will not boot, but they can be edited with the traditional utilities. To create a DOS 3.3, Pascal and ProDOS image, enter the commands: $ java -jar ac.jar -dos140 dos.dsk $ java -jar ac.jar -pas140 pas.po volume1 $ java -jar ac.jar -pro140 pro.po volume2 There is no textual output from this command (unless an error occurs) beyond having a new blank disk image. Displaying information about an image The -i command displays information about a disk image. Multiple image names are permitted. To get information about one or more disks, enter any of the following commands: $ java -jar ac.jar -i ricky.2mg $ java -jar ac.jar -i fred.dsk ethel.po $ java -jar ac.jar -i mertz/* $ java -jar ac.jar -i *.po *.dsk A sample from the ProDOS 2.4.2 master disk: $ java -jar ac.jar -i ProDOS_2_4_2.dsk File Name: ProDOS_2_4_2.dsk Disk Name: /PRODOS.2.4.2/ Physical Size (bytes): 143360 Free Space (bytes): 0 Used Space (bytes): 143360 Physical Size (KB): 140 Free Space (KB): 0 Used Space (KB): 140 Archive Order: DOS Disk Format: ProDOS Total Blocks: 280 Free Blocks: 0 Used Blocks: 280 Volume Access: Destroy Read Rename Write Block Number of Bitmap: 6 Creation Date: 09/19/2016 File Entries Per Block: 13 File Entry Length (bytes): 39 Active Files in Root Directory: 19 Minimum ProDOS Version Required: 0 Volume Created By ProDOS Version: 0 Volume Name: PRODOS.2.4.2 Directory listings The -ls , -l and -ll commands list the directory of a disk image in short, regular and long format respectively. Multiple image names are permitted, as suggested above. To see the directory of one or more disk, enter any of the following commands: $ java -jar ac.jar -ls misc.dsk $ java -jar ac.jar -l misc.dsk $ java -jar ac.jar -ll misc.dsk $ java -jar ac.jar -ls *.po *.dsk $ java -jar ac.jar -l Nibble*/* Sample runs (with some text omitted for brevity): $ java -jar ac.jar -ls ProDOS_2_4_2.dsk /home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/ VIEW.README BAS 512 <snip> PRODOS SYS 17,128 Locked ProDOS format; 0 bytes free; 143,360 bytes used. $ java -jar ac.jar -l ProDOS_2_4_2.dsk /home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/ VIEW.README BAS 001 09/15/2016 01/13/2018 512 A=$0801 <snip> * PRODOS SYS 034 01/18/2018 01/13/2018 17,128 ProDOS format; 0 bytes free; 143,360 bytes used. $ java -jar ac.jar -ll ProDOS_2_4_2.dsk /home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/ VIEW.README Destroy Read Rename Write BAS 001 09/15/2016 01/13/2018 512 A=$0801 0002 0116 Seedling Changed 0 36 <snip> * PRODOS Read SYS 034 01/18/2018 01/13/2018 17,128 $0000 0002 0005 Sapling Changed 0 36 ProDOS format; 0 bytes free; 143,360 bytes used. Examining a file The -e command lets you examine a file by printing a readable version to standard output. To examine a file named fred on a disk named misc.dsk , enter the command: $ java -jar ac.jar -e misc.dsk fred The export command tries to choose an appropriate filter for the chosen file. Filters exist for formats, with a default hexadecimal format for binary files. If the file is probably a picture, the export format is PNG. To save the output to a file: $ java -jar ac.jar -e misc.dsk lucy.pic > lucy.png A sample run against an AppleSoft BASIC program on the ProDOS 2.4.2 disk: $ java -jar ac.jar -e ProDOS_2_4_2.dsk VIEW.README 10 REM VIEW.README BY J.BROOKS. 9/15/2016 20 ADR = 768 30 READ BYTE: IF BYTE <0 THEN 100 40 POKE ADR,BYTE:ADR = ADR +1: GOTO 30 100 CALL 806 150 PRINT CHR$(4)\"BLOAD README,A$2000,TTXT\" 200 HOME : FOR I = 1 TO 22: CALL 768: NEXT 300 CALL 768: GET KEY$ 350 IF ASC(KEY$) = 27 GOTO 500 400 IF PEEK(251) >0 GOTO 300 500 PRINT CHR$(4)\"bye\" 1000 DATA 162,40,160,0,177,250,240,29,9,128,201,225,144,2,41,255,32,237,253,200,201,141,240,3,202,208,233,152,24,101,250,133,250,144,2,230,251,96,162,96,169,32,133,251,141,54,3,169 1010 DATA 0,133,250,168,153,0,32,200,208,250,238,54,3,202,208,244,26,208,2,160,224,136,140,15,3,96,-1 Get a raw data file The -g command gets a file in its raw form. To copy a file named fred from misc.dsk to a file named ethel on your file system, enter the command: $ java -jar ac.jar -g misc.dsk fred > ethel Because binary files are difficult to read, you may want to send the output to a program that can show the data in a hexadecimal format other than the one used with the -e option, above: $ java -jar ac.jar -g misc.dsk fred | hexdump Again, a sample run with the AppleSoft BASIC program from the ProDOS 2.4.2 image. This time, however, you will see the tokenized program: $ java -jar ac.jar -g ProDOS_2_4_2.dsk VIEW.README | hexdump -C 00000000 29 08 0a 00 b2 56 49 45 57 2e 52 45 41 44 4d 45 |)....VIEW.README| 00000010 20 42 59 20 4a 2e 42 52 4f 4f 4b 53 2e 20 39 2f | BY J.BROOKS. 9/| 00000020 31 35 2f 32 30 31 36 00 35 08 14 00 41 44 52 d0 |15/2016.5...ADR.| 00000030 37 36 38 00 4b 08 1e 00 87 42 59 54 45 3a ad 42 |768.K....BYTE:.B| 00000040 59 54 45 d1 30 c4 31 30 30 00 67 08 28 00 b9 41 |YTE.0.100.g.(..A| 00000050 44 52 2c 42 59 54 45 3a 41 44 52 d0 41 44 52 c8 |DR,BYTE:ADR.ADR.| 00000060 31 3a ab 33 30 00 70 08 64 00 8c 38 30 36 00 94 |1:.30.p.d..806..| 00000070 08 96 00 ba e7 28 34 29 22 42 4c 4f 41 44 20 52 |.....(4)\"BLOAD R| 00000080 45 41 44 4d 45 2c 41 24 32 30 30 30 2c 54 54 58 |EADME,A$2000,TTX| <snip> 000001f0 30 2c 31 35 2c 33 2c 39 36 2c 2d 31 00 00 00 e8 |0,15,3,96,-1....| 00000200 Put standard input onto disk image The -p command puts data from the standard input stream onto a disk image. Four parameters are used: imagename, filename, type, and address. If the address is omitted and one is required, $2000 is assumed. Suppose ethel is a binary file meant to start at address 2048 ($800 or 0x800). To put the binary file named ethel back into a file named fred with that starting address on the DOS image named misc.dsk : $ java -jar ac.jar -p misc.dsk fred B 0x800 < ethel Alternatively, suppose ethel is a binary starting at 2048 destined for fred on a ProDOS image named p1.po : $ java -jar ac.jar -p p1.po fred bin 2048 < ethel Put standard input onto disk image as a text file The -pt and -ptx commands work the same as -p except that they assume the input is a text file. This defaults the file type to TXT . They also translate the MS-DOS CR+LF format into a single line ending. A sample using the CONTRIB.txt file in this archive, which happes to be in MS-DOS format: $ cat CONTRIB.txt | hexdump -C 00000000 41 70 70 6c 65 43 6f 6d 6d 61 6e 64 65 72 20 2d |AppleCommander -| 00000010 20 41 6e 20 41 70 70 6c 65 20 5d 5b 20 69 6d 61 | An Apple ][ ima| 00000020 67 65 20 75 74 69 6c 69 74 79 2e 0d 0a 43 6f 70 |ge utility...Cop| <snip> $ # Note the CR + LF is here .............. ^^ ^^ For -pt , it translates line endings to the Apple 0x8d as well as setting the high bit: $ cat CONTRIB.txt | ac -pt test.dsk contrib $ ac -g test.dsk contrib | hexdump -C 00000000 c1 f0 f0 ec e5 c3 ef ed ed e1 ee e4 e5 f2 a0 ad |................| 00000010 a0 c1 ee a0 c1 f0 f0 ec e5 a0 dd db a0 e9 ed e1 |................| 00000020 e7 e5 a0 f5 f4 e9 ec e9 f4 f9 ae 8d c3 ef f0 f9 |................| <snip> $ # Note that the CR + LF is fixed ........ ^^ For -ptx , it translates line endings to the Apple 0x0d as well as clearing the high bit: $ cat CONTRIB.txt | ac -ptx test.dsk contrib2 $ ac -g test.dsk contrib2 | hexdump -C 00000000 41 70 70 6c 65 43 6f 6d 6d 61 6e 64 65 72 20 2d |AppleCommander -| 00000010 20 41 6e 20 41 70 70 6c 65 20 5d 5b 20 69 6d 61 | An Apple ][ ima| 00000020 67 65 20 75 74 69 6c 69 74 79 2e 0d 43 6f 70 79 |ge utility..Copy| <snip> $ # Note that the CR + LF is fixed ........ ^^ Put standard input BASIC source code onto disk image as a BASIC file With the addition of the bastools library, ac now has the ability to tokenize a BASIC program and place it onto the disk. Please see the bt and st for more advanced capabilities! Note: Due to the bastools API, ac will create a temp file in the system temp folder and then delete it once completed. $ cat sample.bas 10 TEXT:HOME:GR:POKE -16302,23 20 COLOR=0:FOR I=41 TO 47 STEP 2:HLIN 0,39 AT I:NEXT 30 COLOR=INT(RND(1)*16) 40 PLOT INT(RND(1)*40),INT(RND(1)*48) 50 IF PEEK(49152)<128 THEN 30 60 GET A$:TEXT:HOME $ cat sample.bas | ac -bas test.dsk sample $ ac -g test.dsk sample | hexdump -C 00000000 16 08 0a 00 89 3a 97 3a 88 3a b9 c9 31 36 33 30 |.....:.:.:..1630| 00000010 32 2c 32 33 00 32 08 14 00 a0 30 3a 81 49 d0 34 |2,23.2....0:.I.4| 00000020 31 c1 34 37 c7 32 3a 8e 30 2c 33 39 c5 49 3a 82 |1.47.2:.0,39.I:.| 00000030 00 42 08 1e 00 a0 d3 28 db 28 31 29 ca 31 36 29 |.B.....(.(1).16)| 00000040 00 5d 08 28 00 8d d3 28 db 28 31 29 ca 34 30 29 |.].(...(.(1).40)| 00000050 2c d3 28 db 28 31 29 ca 34 38 29 00 72 08 32 00 |,.(.(1).48).r.2.| 00000060 ad e2 28 34 39 31 35 32 29 d1 31 32 38 c4 33 30 |..(49152).128.30| 00000070 00 7e 08 3c 00 be 41 24 3a 89 3a 97 00 00 00 |.~.<..A$:.:....| 0000007f Put standard input with DOS 3.3 header onto disk image The -dos command is like -p , but it assumes the input stream includes a four-byte header, as generated by older versions of cc65 . Three parameters are required: imagename, filename, and type. The start address is taken from bytes 0-1 of the header. To put the DOS binary named ethel into a file named fred on the DOS image named misc.dsk : $ java -jar ac.jar -dos misc.dsk fred B < ethel Put standard input in AppleSingle format onto disk image The -as command is like -p , but it assumes the input stream is in the AppleSingle format, as generated by newer versions of cc65 ( see ticket #20 ). The parameters are imagename (required) and, optionally, filename. The AppleSingle format supports a filename entry, but it is not always populated. To put the AppleSingle binary named ethel into a file named fred on the ProDOS image named misc.dsk : $ java -jar ac.jar -as misc.dsk fred < ethel Putting files and file types As another example, consider the text file named foo.text and the Pascal image named src.po : $ java -jar ac.jar -p p2.po foo.text text < foo.text Valid file types are specific to each operating system: Operating System File Types DOS 3.x A , B , I , T , S , R , a , b . Pascal bad , code , text , info , data , graf , foto . ProDOS bas , bin , sys , txt , rel , etc.; see ProdosFileTypes.properties for more. Delete a file The -d command deletes a file from an image: $ java -jar ac.jar -d misc.dsk fred Copying a file between disks To copy a file from one image to another, do something like this: $ java -jar ac.jar -g one.dsk fred | java -jar ac.jar -p another.dsk fred bin 2048 Locking and unlocking a file The -k and -u commands lock and unlock a file on the given image: $ java -jar ac.jar -k misc.dsk fred $ java -jar ac.jar -u misc.dsk fred Change a volume name The -n command changes the volume name on an image. Only ProDOS and Pascal images are affected: $ java -jar ac.jar -n misc.po name Further details Here's a more comprehensive example of using AppleCommander for cross-platform development . It's also possible to invoke the command line functions from within the ant build environment by using AppleCommander's ant interface . The -geos transfer file format is specified in Apple GEOS CONVERT Format . Known problems & limitations To replace an existing file on an image, you must delete it first; ac will create as many duplicate entries as you specify, only one of which will be accessible to the operating system. Given a ProDOS image, a full pathname may be specified for the -e , -g , -p , -d , -k , -u , -dos , and -as options. Files can only be put into an existing directory.","title":"Using 'ac'"},{"location":"ac/#a-quick-note","text":"All of these samples were done in a Unix-type environment (Mac OS X or Linux), hence the $ is the prompt character. Every sample assumes you have an ac.jar in the current directory and are therefore written out \"long-hand\". If you followed the install instructions , you have setup a command-line script to help you out, meaning that every java -jar ac.jar can be replaced with ac.sh or ac.bat . Additionally if you setup an alias , you can replace that to just ac . Setup whatever works for you and your environment, and be cognizant that the sample commands probably aren't quite exactly right for your setup!","title":"A quick note"},{"location":"ac/#options","text":"For a quick list of ac options, enter the -h command: $ java -jar ac.jar -h AppleCommander command line options [1.7.0]: -i <imagename> [<imagename>] display information about image(s). -ls <imagename> [<imagename>] list brief directory of image(s). -l <imagename> [<imagename>] list directory of image(s). -ll <imagename> [<imagename>] list detailed directory of image(s). -lsv <imagename> [<imagename>] list in CSV format brief directory of image(s). -lv <imagename> [<imagename>] list in CSV format directory of image(s). -llv <imagename> [<imagename>] list in CSV format detailed directory of image(s). -lsj <imagename> [<imagename>] list in JSON format brief directory of image(s). -lj <imagename> [<imagename>] list in JSON format directory of image(s). -llj <imagename> [<imagename>] list in JSON format detailed directory of image(s). -e <imagename> <filename> [<output>] export file from image to stdout or to an output file. -x <imagename> [<directory>] extract all files from image to directory. -g <imagename> <filename> [<output>] get raw file from image to stdout or to an output file. -p <imagename> <filename> <type> [[$|0x]<addr>] put stdin in filename on image, using file type and address [0x2000]. -pt <imagename> <filename> put stdin in filename on image defaulting to TXT file type, setting high bit on and replacing newline characters with $8D. -ptx <imagename> <filename> put stdin in filename on image defaulting to TXT file type, clearing high bit and replacing newline characters with $0D. -d <imagename> <filename> delete file from image. -k <imagename> <filename> lock file on image. -u <imagename> <filename> unlock file on image. -n <imagename> <volname> change volume name (ProDOS or Pascal). -dos <imagename> <filename> <type> put stdin with DOS header in filename on image, using file type and address from header. -as <imagename> [<filename>] put stdin with AppleSingle format in filename on image, using file type, address, and (optionally) name from the AppleSingle file. -geos <imagename> interpret stdin as a GEOS conversion file and place it on image (ProDOS only). -dos140 <imagename> create a 140K DOS 3.3 image. -pro140 <imagename> <volname> create a 140K ProDOS image. -pro800 <imagename> <volname> create an 800K ProDOS image. -pas140 <imagename> <volname> create a 140K Pascal image. -pas800 <imagename> <volname> create an 800K Pascal image. -convert <filename> <imagename> [<sizeblocks>] uncompress a ShrinkIt or Binary II file; or convert a DiskCopy 4.2 image into a ProDOS disk image. -bas <imagename> <filename> import an AppleSoft basic file from text back to its tokenized format. Note that the -cc65 has been deprecated as CC65 itself is moving to using the AppleSingle format ( -as flag). Use -dos instead. -cc65 will still be recognized, but it maps to -dos and a warning will be printed.","title":"Options"},{"location":"ac/#creating-an-image","text":"Type Description DOS 3.3 The -dos140 command creates an empty 140K DOS 3.3 disk image in DOS sector order; DOS volumes do not have names, and volume number is the default (254). ProDOS The -pro140 command creates an empty 140K ProDOS disk image, and -pro800 creates an empty 800K image, both in ProDOS sector order. Pascal The -pas140 command creates an empty 140K Pascal disk image, and -pas800 creates an empty 800K image, both in Pascal sector order. To be read correctly, DOS order disk image names should end in .dsk or .do , while ProDOS and Pascal order image names should end in .po . The resulting images will not boot, but they can be edited with the traditional utilities. To create a DOS 3.3, Pascal and ProDOS image, enter the commands: $ java -jar ac.jar -dos140 dos.dsk $ java -jar ac.jar -pas140 pas.po volume1 $ java -jar ac.jar -pro140 pro.po volume2 There is no textual output from this command (unless an error occurs) beyond having a new blank disk image.","title":"Creating an image"},{"location":"ac/#displaying-information-about-an-image","text":"The -i command displays information about a disk image. Multiple image names are permitted. To get information about one or more disks, enter any of the following commands: $ java -jar ac.jar -i ricky.2mg $ java -jar ac.jar -i fred.dsk ethel.po $ java -jar ac.jar -i mertz/* $ java -jar ac.jar -i *.po *.dsk A sample from the ProDOS 2.4.2 master disk: $ java -jar ac.jar -i ProDOS_2_4_2.dsk File Name: ProDOS_2_4_2.dsk Disk Name: /PRODOS.2.4.2/ Physical Size (bytes): 143360 Free Space (bytes): 0 Used Space (bytes): 143360 Physical Size (KB): 140 Free Space (KB): 0 Used Space (KB): 140 Archive Order: DOS Disk Format: ProDOS Total Blocks: 280 Free Blocks: 0 Used Blocks: 280 Volume Access: Destroy Read Rename Write Block Number of Bitmap: 6 Creation Date: 09/19/2016 File Entries Per Block: 13 File Entry Length (bytes): 39 Active Files in Root Directory: 19 Minimum ProDOS Version Required: 0 Volume Created By ProDOS Version: 0 Volume Name: PRODOS.2.4.2","title":"Displaying information about an image"},{"location":"ac/#directory-listings","text":"The -ls , -l and -ll commands list the directory of a disk image in short, regular and long format respectively. Multiple image names are permitted, as suggested above. To see the directory of one or more disk, enter any of the following commands: $ java -jar ac.jar -ls misc.dsk $ java -jar ac.jar -l misc.dsk $ java -jar ac.jar -ll misc.dsk $ java -jar ac.jar -ls *.po *.dsk $ java -jar ac.jar -l Nibble*/* Sample runs (with some text omitted for brevity): $ java -jar ac.jar -ls ProDOS_2_4_2.dsk /home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/ VIEW.README BAS 512 <snip> PRODOS SYS 17,128 Locked ProDOS format; 0 bytes free; 143,360 bytes used. $ java -jar ac.jar -l ProDOS_2_4_2.dsk /home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/ VIEW.README BAS 001 09/15/2016 01/13/2018 512 A=$0801 <snip> * PRODOS SYS 034 01/18/2018 01/13/2018 17,128 ProDOS format; 0 bytes free; 143,360 bytes used. $ java -jar ac.jar -ll ProDOS_2_4_2.dsk /home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/ VIEW.README Destroy Read Rename Write BAS 001 09/15/2016 01/13/2018 512 A=$0801 0002 0116 Seedling Changed 0 36 <snip> * PRODOS Read SYS 034 01/18/2018 01/13/2018 17,128 $0000 0002 0005 Sapling Changed 0 36 ProDOS format; 0 bytes free; 143,360 bytes used.","title":"Directory listings"},{"location":"ac/#examining-a-file","text":"The -e command lets you examine a file by printing a readable version to standard output. To examine a file named fred on a disk named misc.dsk , enter the command: $ java -jar ac.jar -e misc.dsk fred The export command tries to choose an appropriate filter for the chosen file. Filters exist for formats, with a default hexadecimal format for binary files. If the file is probably a picture, the export format is PNG. To save the output to a file: $ java -jar ac.jar -e misc.dsk lucy.pic > lucy.png A sample run against an AppleSoft BASIC program on the ProDOS 2.4.2 disk: $ java -jar ac.jar -e ProDOS_2_4_2.dsk VIEW.README 10 REM VIEW.README BY J.BROOKS. 9/15/2016 20 ADR = 768 30 READ BYTE: IF BYTE <0 THEN 100 40 POKE ADR,BYTE:ADR = ADR +1: GOTO 30 100 CALL 806 150 PRINT CHR$(4)\"BLOAD README,A$2000,TTXT\" 200 HOME : FOR I = 1 TO 22: CALL 768: NEXT 300 CALL 768: GET KEY$ 350 IF ASC(KEY$) = 27 GOTO 500 400 IF PEEK(251) >0 GOTO 300 500 PRINT CHR$(4)\"bye\" 1000 DATA 162,40,160,0,177,250,240,29,9,128,201,225,144,2,41,255,32,237,253,200,201,141,240,3,202,208,233,152,24,101,250,133,250,144,2,230,251,96,162,96,169,32,133,251,141,54,3,169 1010 DATA 0,133,250,168,153,0,32,200,208,250,238,54,3,202,208,244,26,208,2,160,224,136,140,15,3,96,-1","title":"Examining a file"},{"location":"ac/#get-a-raw-data-file","text":"The -g command gets a file in its raw form. To copy a file named fred from misc.dsk to a file named ethel on your file system, enter the command: $ java -jar ac.jar -g misc.dsk fred > ethel Because binary files are difficult to read, you may want to send the output to a program that can show the data in a hexadecimal format other than the one used with the -e option, above: $ java -jar ac.jar -g misc.dsk fred | hexdump Again, a sample run with the AppleSoft BASIC program from the ProDOS 2.4.2 image. This time, however, you will see the tokenized program: $ java -jar ac.jar -g ProDOS_2_4_2.dsk VIEW.README | hexdump -C 00000000 29 08 0a 00 b2 56 49 45 57 2e 52 45 41 44 4d 45 |)....VIEW.README| 00000010 20 42 59 20 4a 2e 42 52 4f 4f 4b 53 2e 20 39 2f | BY J.BROOKS. 9/| 00000020 31 35 2f 32 30 31 36 00 35 08 14 00 41 44 52 d0 |15/2016.5...ADR.| 00000030 37 36 38 00 4b 08 1e 00 87 42 59 54 45 3a ad 42 |768.K....BYTE:.B| 00000040 59 54 45 d1 30 c4 31 30 30 00 67 08 28 00 b9 41 |YTE.0.100.g.(..A| 00000050 44 52 2c 42 59 54 45 3a 41 44 52 d0 41 44 52 c8 |DR,BYTE:ADR.ADR.| 00000060 31 3a ab 33 30 00 70 08 64 00 8c 38 30 36 00 94 |1:.30.p.d..806..| 00000070 08 96 00 ba e7 28 34 29 22 42 4c 4f 41 44 20 52 |.....(4)\"BLOAD R| 00000080 45 41 44 4d 45 2c 41 24 32 30 30 30 2c 54 54 58 |EADME,A$2000,TTX| <snip> 000001f0 30 2c 31 35 2c 33 2c 39 36 2c 2d 31 00 00 00 e8 |0,15,3,96,-1....| 00000200","title":"Get a raw data file"},{"location":"ac/#put-standard-input-onto-disk-image","text":"The -p command puts data from the standard input stream onto a disk image. Four parameters are used: imagename, filename, type, and address. If the address is omitted and one is required, $2000 is assumed. Suppose ethel is a binary file meant to start at address 2048 ($800 or 0x800). To put the binary file named ethel back into a file named fred with that starting address on the DOS image named misc.dsk : $ java -jar ac.jar -p misc.dsk fred B 0x800 < ethel Alternatively, suppose ethel is a binary starting at 2048 destined for fred on a ProDOS image named p1.po : $ java -jar ac.jar -p p1.po fred bin 2048 < ethel","title":"Put standard input onto disk image"},{"location":"ac/#put-standard-input-onto-disk-image-as-a-text-file","text":"The -pt and -ptx commands work the same as -p except that they assume the input is a text file. This defaults the file type to TXT . They also translate the MS-DOS CR+LF format into a single line ending. A sample using the CONTRIB.txt file in this archive, which happes to be in MS-DOS format: $ cat CONTRIB.txt | hexdump -C 00000000 41 70 70 6c 65 43 6f 6d 6d 61 6e 64 65 72 20 2d |AppleCommander -| 00000010 20 41 6e 20 41 70 70 6c 65 20 5d 5b 20 69 6d 61 | An Apple ][ ima| 00000020 67 65 20 75 74 69 6c 69 74 79 2e 0d 0a 43 6f 70 |ge utility...Cop| <snip> $ # Note the CR + LF is here .............. ^^ ^^ For -pt , it translates line endings to the Apple 0x8d as well as setting the high bit: $ cat CONTRIB.txt | ac -pt test.dsk contrib $ ac -g test.dsk contrib | hexdump -C 00000000 c1 f0 f0 ec e5 c3 ef ed ed e1 ee e4 e5 f2 a0 ad |................| 00000010 a0 c1 ee a0 c1 f0 f0 ec e5 a0 dd db a0 e9 ed e1 |................| 00000020 e7 e5 a0 f5 f4 e9 ec e9 f4 f9 ae 8d c3 ef f0 f9 |................| <snip> $ # Note that the CR + LF is fixed ........ ^^ For -ptx , it translates line endings to the Apple 0x0d as well as clearing the high bit: $ cat CONTRIB.txt | ac -ptx test.dsk contrib2 $ ac -g test.dsk contrib2 | hexdump -C 00000000 41 70 70 6c 65 43 6f 6d 6d 61 6e 64 65 72 20 2d |AppleCommander -| 00000010 20 41 6e 20 41 70 70 6c 65 20 5d 5b 20 69 6d 61 | An Apple ][ ima| 00000020 67 65 20 75 74 69 6c 69 74 79 2e 0d 43 6f 70 79 |ge utility..Copy| <snip> $ # Note that the CR + LF is fixed ........ ^^","title":"Put standard input onto disk image as a text file"},{"location":"ac/#put-standard-input-basic-source-code-onto-disk-image-as-a-basic-file","text":"With the addition of the bastools library, ac now has the ability to tokenize a BASIC program and place it onto the disk. Please see the bt and st for more advanced capabilities! Note: Due to the bastools API, ac will create a temp file in the system temp folder and then delete it once completed. $ cat sample.bas 10 TEXT:HOME:GR:POKE -16302,23 20 COLOR=0:FOR I=41 TO 47 STEP 2:HLIN 0,39 AT I:NEXT 30 COLOR=INT(RND(1)*16) 40 PLOT INT(RND(1)*40),INT(RND(1)*48) 50 IF PEEK(49152)<128 THEN 30 60 GET A$:TEXT:HOME $ cat sample.bas | ac -bas test.dsk sample $ ac -g test.dsk sample | hexdump -C 00000000 16 08 0a 00 89 3a 97 3a 88 3a b9 c9 31 36 33 30 |.....:.:.:..1630| 00000010 32 2c 32 33 00 32 08 14 00 a0 30 3a 81 49 d0 34 |2,23.2....0:.I.4| 00000020 31 c1 34 37 c7 32 3a 8e 30 2c 33 39 c5 49 3a 82 |1.47.2:.0,39.I:.| 00000030 00 42 08 1e 00 a0 d3 28 db 28 31 29 ca 31 36 29 |.B.....(.(1).16)| 00000040 00 5d 08 28 00 8d d3 28 db 28 31 29 ca 34 30 29 |.].(...(.(1).40)| 00000050 2c d3 28 db 28 31 29 ca 34 38 29 00 72 08 32 00 |,.(.(1).48).r.2.| 00000060 ad e2 28 34 39 31 35 32 29 d1 31 32 38 c4 33 30 |..(49152).128.30| 00000070 00 7e 08 3c 00 be 41 24 3a 89 3a 97 00 00 00 |.~.<..A$:.:....| 0000007f","title":"Put standard input BASIC source code onto disk image as a BASIC file"},{"location":"ac/#put-standard-input-with-dos-33-header-onto-disk-image","text":"The -dos command is like -p , but it assumes the input stream includes a four-byte header, as generated by older versions of cc65 . Three parameters are required: imagename, filename, and type. The start address is taken from bytes 0-1 of the header. To put the DOS binary named ethel into a file named fred on the DOS image named misc.dsk : $ java -jar ac.jar -dos misc.dsk fred B < ethel","title":"Put standard input with DOS 3.3 header onto disk image"},{"location":"ac/#put-standard-input-in-applesingle-format-onto-disk-image","text":"The -as command is like -p , but it assumes the input stream is in the AppleSingle format, as generated by newer versions of cc65 ( see ticket #20 ). The parameters are imagename (required) and, optionally, filename. The AppleSingle format supports a filename entry, but it is not always populated. To put the AppleSingle binary named ethel into a file named fred on the ProDOS image named misc.dsk : $ java -jar ac.jar -as misc.dsk fred < ethel","title":"Put standard input in AppleSingle format onto disk image"},{"location":"ac/#putting-files-and-file-types","text":"As another example, consider the text file named foo.text and the Pascal image named src.po : $ java -jar ac.jar -p p2.po foo.text text < foo.text Valid file types are specific to each operating system: Operating System File Types DOS 3.x A , B , I , T , S , R , a , b . Pascal bad , code , text , info , data , graf , foto . ProDOS bas , bin , sys , txt , rel , etc.; see ProdosFileTypes.properties for more.","title":"Putting files and file types"},{"location":"ac/#delete-a-file","text":"The -d command deletes a file from an image: $ java -jar ac.jar -d misc.dsk fred","title":"Delete a file"},{"location":"ac/#copying-a-file-between-disks","text":"To copy a file from one image to another, do something like this: $ java -jar ac.jar -g one.dsk fred | java -jar ac.jar -p another.dsk fred bin 2048","title":"Copying a file between disks"},{"location":"ac/#locking-and-unlocking-a-file","text":"The -k and -u commands lock and unlock a file on the given image: $ java -jar ac.jar -k misc.dsk fred $ java -jar ac.jar -u misc.dsk fred","title":"Locking and unlocking a file"},{"location":"ac/#change-a-volume-name","text":"The -n command changes the volume name on an image. Only ProDOS and Pascal images are affected: $ java -jar ac.jar -n misc.po name","title":"Change a volume name"},{"location":"ac/#further-details","text":"Here's a more comprehensive example of using AppleCommander for cross-platform development . It's also possible to invoke the command line functions from within the ant build environment by using AppleCommander's ant interface . The -geos transfer file format is specified in Apple GEOS CONVERT Format .","title":"Further details"},{"location":"ac/#known-problems-limitations","text":"To replace an existing file on an image, you must delete it first; ac will create as many duplicate entries as you specify, only one of which will be accessible to the operating system. Given a ProDOS image, a full pathname may be specified for the -e , -g , -p , -d , -k , -u , -dos , and -as options. Files can only be put into an existing directory.","title":"Known problems &amp; limitations"},{"location":"acx/","text":"acx is a new command-line tool for AppleCommander. This tool is subcommand based (think git pull and git commit ) and is expected to allow more nuanced command activities. Overview / Asking for help All commands and subcommands will show options and command structure with the --help flag. $ acx --help Usage: acx [-hVv] [--debug] [--quiet] [COMMAND] 'acx' experimental utility Options: --debug Show detailed stack traces. -h, --help Show this help message and exit. --quiet Turn off all logging. -v, --verbose Be verbose. Multiple occurrences increase logging. -V, --version Print version information and exit. Commands: convert Uncompress a ShrinkIt or Binary II file; or convert a DiskCopy 4.2 image into a ProDOS disk image. copy, cp Copy files between disks. create, mkdisk Create a disk image. delete, del, rm Delete file(s) from a disk image. diskmap, map Show disk usage map. export, x, get Export file(s) from a disk image. help Displays help information about the specified command import, put Import file onto disk. info, i Show information on a disk image(s). list, ls List directory of disk image(s). lock Lock file(s) on a disk image. mkdir, md Create a directory on disk. rename, ren Rename file on a disk image. rename-disk Rename volume of a disk image. rmdir, rd Remove a directory on disk. unlock Unlock file(s) on a disk image. When looking for options for a subcommand, the help subcommand may be used as an alternate ( acx copy --help or acx help copy are both valid). $ acx copy --help Usage: acx copy [-fhr] -d=<disk> -s=<sourceDisk> [--to=<targetPath>] [<globs>...] Copy files between disks. Parameters: [<globs>...] File glob(s) to copy (default = '*') Options: -d, --disk=<disk> Image to process [$ACX_DISK_NAME]. -f, --force Overwrite existing files. -h, --help Show help for subcommand. -r, --recursive Copy files recursively. -s, --from, --source=<sourceDisk> Source disk for files. --to, --directory=<targetPath> Specify which directory to place files. Identifying a disk acx differs from ac in that the primary disk image is always specified by the -d flag. However, this can be painful when running a series of commands. To simplify usage, the environment variable ACX_DISK_NAME can be set to simplify scripting. This means that a sequence of commands that look like this: $ acx create -d disk1.po --prodos $ acx copy -d disk1.po --from ProDOS_2_4_2.dsk PRODOS $ acx list -d disk1.po --native File: disk1.po Name: /NEW.DISK/ * PRODOS SYS 035 01/15/2022 01/13/2018 17,128 ProDOS format; 121,856 bytes free; 21,504 bytes used. Can also be specified in this manner: $ export ACX_DISK_NAME=disk2.po $ acx create --prodos $ acx copy --from ProDOS_2_4_2.dsk PRODOS BASIC.SYSTEM $ acx list --native File: disk2.po Name: /NEW.DISK/ * BASIC.SYSTEM SYS 021 01/15/2022 01/13/2018 10,240 A=$2000 * PRODOS SYS 035 01/15/2022 01/13/2018 17,128 ProDOS format; 111,104 bytes free; 32,256 bytes used. Creating a bootable disk acx introduces experimenal capability to create bootable disks. Note that this is only viable for writeable disks (DOS, ProDOS, and Pascal). $ acx create -d disk1.po --format ProDOS_2_4_2.dsk --prodos --size=140kb $ acx create -d disk2.dsk --format original332sysmas.nib --dos --size=140kb $ acx create -d disk3.po --format UCSD\\ Pascal\\ 1.2_0.DSK --pascal Note that Pascal doesn't copy any files. Looking for feedback or PR's to correct this! For ProDOS and Pascal, the boot block is copied over and in the ProDOS case, STARTUP and BASIC.SYSTEM as well. For DOS 3.3, tracks 0-2 are copied and marked as used. File listings by name pattern A new feature when listing files is that acx allows \"glob\" pattern matching (\"*\" wildcard matching). (Be careful with the usual shell expansion issues.) For example, to list files that might be run at startup ( *.SYSTEM ): $ acx ls -d ProDOS_2_4_2.dsk --globs \"*.SYSTEM\" File: ProDOS_2_4_2.dsk Name: /PRODOS.2.4.2/ * QUIT.SYSTEM SYS 001 09/15/2016 01/13/2018 56 A=$2000 * BASIC.SYSTEM SYS 021 08/30/2016 01/13/2018 10,240 A=$2000 * FASTDSK.SYSTEM SYS 004 05/04/2009 01/13/2018 1,402 A=$2000 ProDOS format; 0 bytes free; 143,360 bytes used. File listing as JSON or CSV Like ac , acx allows file listings to be written out as structured text. Specifically, with JSON output, secondary processing tools can be used to extract information. Here's a sample using the jq tool: $ acx ls -d ProDOS_2_4_2.dsk --json | jq '.disks[].files[] | select(.name == \"BASIC.SYSTEM\")' { \"locked\": \"*\", \"name\": \"BASIC.SYSTEM\", \"type\": \"SYS\", \"blocks\": \"021\", \"modified\": \"08/30/2016\", \"created\": \"01/13/2018\", \"size\": \"10,240\", \"auxType\": \"A=$2000\" }","title":"Using 'acx'"},{"location":"acx/#overview-asking-for-help","text":"All commands and subcommands will show options and command structure with the --help flag. $ acx --help Usage: acx [-hVv] [--debug] [--quiet] [COMMAND] 'acx' experimental utility Options: --debug Show detailed stack traces. -h, --help Show this help message and exit. --quiet Turn off all logging. -v, --verbose Be verbose. Multiple occurrences increase logging. -V, --version Print version information and exit. Commands: convert Uncompress a ShrinkIt or Binary II file; or convert a DiskCopy 4.2 image into a ProDOS disk image. copy, cp Copy files between disks. create, mkdisk Create a disk image. delete, del, rm Delete file(s) from a disk image. diskmap, map Show disk usage map. export, x, get Export file(s) from a disk image. help Displays help information about the specified command import, put Import file onto disk. info, i Show information on a disk image(s). list, ls List directory of disk image(s). lock Lock file(s) on a disk image. mkdir, md Create a directory on disk. rename, ren Rename file on a disk image. rename-disk Rename volume of a disk image. rmdir, rd Remove a directory on disk. unlock Unlock file(s) on a disk image. When looking for options for a subcommand, the help subcommand may be used as an alternate ( acx copy --help or acx help copy are both valid). $ acx copy --help Usage: acx copy [-fhr] -d=<disk> -s=<sourceDisk> [--to=<targetPath>] [<globs>...] Copy files between disks. Parameters: [<globs>...] File glob(s) to copy (default = '*') Options: -d, --disk=<disk> Image to process [$ACX_DISK_NAME]. -f, --force Overwrite existing files. -h, --help Show help for subcommand. -r, --recursive Copy files recursively. -s, --from, --source=<sourceDisk> Source disk for files. --to, --directory=<targetPath> Specify which directory to place files.","title":"Overview / Asking for help"},{"location":"acx/#identifying-a-disk","text":"acx differs from ac in that the primary disk image is always specified by the -d flag. However, this can be painful when running a series of commands. To simplify usage, the environment variable ACX_DISK_NAME can be set to simplify scripting. This means that a sequence of commands that look like this: $ acx create -d disk1.po --prodos $ acx copy -d disk1.po --from ProDOS_2_4_2.dsk PRODOS $ acx list -d disk1.po --native File: disk1.po Name: /NEW.DISK/ * PRODOS SYS 035 01/15/2022 01/13/2018 17,128 ProDOS format; 121,856 bytes free; 21,504 bytes used. Can also be specified in this manner: $ export ACX_DISK_NAME=disk2.po $ acx create --prodos $ acx copy --from ProDOS_2_4_2.dsk PRODOS BASIC.SYSTEM $ acx list --native File: disk2.po Name: /NEW.DISK/ * BASIC.SYSTEM SYS 021 01/15/2022 01/13/2018 10,240 A=$2000 * PRODOS SYS 035 01/15/2022 01/13/2018 17,128 ProDOS format; 111,104 bytes free; 32,256 bytes used.","title":"Identifying a disk"},{"location":"acx/#creating-a-bootable-disk","text":"acx introduces experimenal capability to create bootable disks. Note that this is only viable for writeable disks (DOS, ProDOS, and Pascal). $ acx create -d disk1.po --format ProDOS_2_4_2.dsk --prodos --size=140kb $ acx create -d disk2.dsk --format original332sysmas.nib --dos --size=140kb $ acx create -d disk3.po --format UCSD\\ Pascal\\ 1.2_0.DSK --pascal Note that Pascal doesn't copy any files. Looking for feedback or PR's to correct this! For ProDOS and Pascal, the boot block is copied over and in the ProDOS case, STARTUP and BASIC.SYSTEM as well. For DOS 3.3, tracks 0-2 are copied and marked as used.","title":"Creating a bootable disk"},{"location":"acx/#file-listings-by-name-pattern","text":"A new feature when listing files is that acx allows \"glob\" pattern matching (\"*\" wildcard matching). (Be careful with the usual shell expansion issues.) For example, to list files that might be run at startup ( *.SYSTEM ): $ acx ls -d ProDOS_2_4_2.dsk --globs \"*.SYSTEM\" File: ProDOS_2_4_2.dsk Name: /PRODOS.2.4.2/ * QUIT.SYSTEM SYS 001 09/15/2016 01/13/2018 56 A=$2000 * BASIC.SYSTEM SYS 021 08/30/2016 01/13/2018 10,240 A=$2000 * FASTDSK.SYSTEM SYS 004 05/04/2009 01/13/2018 1,402 A=$2000 ProDOS format; 0 bytes free; 143,360 bytes used.","title":"File listings by name pattern"},{"location":"acx/#file-listing-as-json-or-csv","text":"Like ac , acx allows file listings to be written out as structured text. Specifically, with JSON output, secondary processing tools can be used to extract information. Here's a sample using the jq tool: $ acx ls -d ProDOS_2_4_2.dsk --json | jq '.disks[].files[] | select(.name == \"BASIC.SYSTEM\")' { \"locked\": \"*\", \"name\": \"BASIC.SYSTEM\", \"type\": \"SYS\", \"blocks\": \"021\", \"modified\": \"08/30/2016\", \"created\": \"01/13/2018\", \"size\": \"10,240\", \"auxType\": \"A=$2000\" }","title":"File listing as JSON or CSV"},{"location":"install/","text":"This section covers installation of AppleCommander. As of 1.4.0, this should be a bit simpler as SWT is now packaged for each platform. Install Java If you do not already have Java 11 (or later) installed, you will be required to install one. There are a number of methods to install a Java JVM: From the AdoptOpenJDK site . On Mac OS X: Using Homebrew and installing via brew install openjdk@11 On Ubuntu Linux: sudo apt install openjdk-11-jdk These aren't the only options, so do what make sense for you. If there are other options, feel free to add a ticket or submit a pull request. Mac note With the new Macs that have been released, there is a new wrinkle to pay attention to. These new Macs can run the old (Intel) code as well as the new Apple Silicon (ARM/aarch64), which can lead to some confusion. Either will work. But, the JVM and AppleCommander need to match. If you install a x86_64 JVM, be sure to run that version of AppleCommander. Download AppleCommander Visit the AppleCommander release page and download the JAR file for your system. It will look something like this: Graphical Interface The GUI component comes pre-packaged with all needed dependencies. You do not need to find and install the SWT toolkit any more! For Windows use the file with AppleCommander-win64-VERSION.jar , For Macintosh use AppleCommander-macosx-VERSION.jar , and For Linux use AppleCommander-linux64-gtk-VERSION.jar . Once the JAR is downloaded, just double-click on the file! For Mac OS X, AppleCommander's windowing library (SWT) requires the -XstartOnFirstThread flag. Starting AppleCommander will need to be from a script something like: #!/bin/sh java -XstartOnFirstThread -jar ~/bin/AppleCommander-macosx-VERSION.jar For Linux, you may need to set the file to be executable by allowing the JAR file to be executed as a program. Command-line The distribution file AppleCommander-ac.jar provides a command-line interface to AppleCommander. It is ready to use immediately, but it may be convenient to rename it (e.g. ac.jar ) or invoke it from a script, e.g. GNU bash script for Linux or Mac OS X ( ac.sh ): #!/bin/sh java -jar ~/bin/ac.jar \"${@}\" MS DOS batch file ( ac.bat ): @echo off java -jar AppleCommander-1.7.0-ac.jar %* There is also a Mac OS X Apple II homebrew repository which allows an install of: $ brew install applecommander After it installs, applecommander will be a command. Visit the GitHub page for information on how to install the tap. Please note: The Mac already has an ac command. Setting the alias will \"hide\" that command. Name it whatever makes sense for your environment - there are no dependencies on the name built into the application. Unix-like environments have the ability to alias a command as well. To create an ac command alias, use: alias ac='java -jar build/libs/AppleCommander-ac-1.7.0.jar' Requirements AppleCommander Version Requirements 1.7 or later Java 11 Up to 1.6 Java 8","title":"Installing"},{"location":"install/#install-java","text":"If you do not already have Java 11 (or later) installed, you will be required to install one. There are a number of methods to install a Java JVM: From the AdoptOpenJDK site . On Mac OS X: Using Homebrew and installing via brew install openjdk@11 On Ubuntu Linux: sudo apt install openjdk-11-jdk These aren't the only options, so do what make sense for you. If there are other options, feel free to add a ticket or submit a pull request.","title":"Install Java"},{"location":"install/#mac-note","text":"With the new Macs that have been released, there is a new wrinkle to pay attention to. These new Macs can run the old (Intel) code as well as the new Apple Silicon (ARM/aarch64), which can lead to some confusion. Either will work. But, the JVM and AppleCommander need to match. If you install a x86_64 JVM, be sure to run that version of AppleCommander.","title":"Mac note"},{"location":"install/#download-applecommander","text":"Visit the AppleCommander release page and download the JAR file for your system. It will look something like this:","title":"Download AppleCommander"},{"location":"install/#graphical-interface","text":"The GUI component comes pre-packaged with all needed dependencies. You do not need to find and install the SWT toolkit any more! For Windows use the file with AppleCommander-win64-VERSION.jar , For Macintosh use AppleCommander-macosx-VERSION.jar , and For Linux use AppleCommander-linux64-gtk-VERSION.jar . Once the JAR is downloaded, just double-click on the file! For Mac OS X, AppleCommander's windowing library (SWT) requires the -XstartOnFirstThread flag. Starting AppleCommander will need to be from a script something like: #!/bin/sh java -XstartOnFirstThread -jar ~/bin/AppleCommander-macosx-VERSION.jar For Linux, you may need to set the file to be executable by allowing the JAR file to be executed as a program.","title":"Graphical Interface"},{"location":"install/#command-line","text":"The distribution file AppleCommander-ac.jar provides a command-line interface to AppleCommander. It is ready to use immediately, but it may be convenient to rename it (e.g. ac.jar ) or invoke it from a script, e.g. GNU bash script for Linux or Mac OS X ( ac.sh ): #!/bin/sh java -jar ~/bin/ac.jar \"${@}\" MS DOS batch file ( ac.bat ): @echo off java -jar AppleCommander-1.7.0-ac.jar %* There is also a Mac OS X Apple II homebrew repository which allows an install of: $ brew install applecommander After it installs, applecommander will be a command. Visit the GitHub page for information on how to install the tap. Please note: The Mac already has an ac command. Setting the alias will \"hide\" that command. Name it whatever makes sense for your environment - there are no dependencies on the name built into the application. Unix-like environments have the ability to alias a command as well. To create an ac command alias, use: alias ac='java -jar build/libs/AppleCommander-ac-1.7.0.jar'","title":"Command-line"},{"location":"install/#requirements","text":"AppleCommander Version Requirements 1.7 or later Java 11 Up to 1.6 Java 8","title":"Requirements"},{"location":"javadoc/","text":"Javadoc is generated from all AppleCommander sub-projects. AppleCommander Javadoc ShrinkItArchive Javadoc bastools API Javadoc applesingle API Javadoc","title":"Javadoc"},{"location":"using/","text":"Windows XP This is the initial window from which all disk images are opened: This should be an almost familiar sight, except that the DOS 3.3 master is in a \"standard view\" - which is pretty much operating-system agnostic: Ah, much better! This is as close to the DOS 3.3 CATALOG as you'll get: For those who need all the detail, the detail view will show all information that is available. This view varies significantly by operating system (ProDOS has the most information to show). A disk usage map is also available. Along with general information about the disk image. Don't get confused or concerned regarding the archive order and the disk format - the disk format is how the data is actually written on the disk itself while the order is just the ordering of data in the image that emulators use. For those operating systems that can, a deleted file listing is also available: File exports are now an option: The file export wizard allows you to choose from the supported file types: The graphics export requires a little more information: It may not be beautiful, but it allows you to place your files wherever you want them: The converted Hires color image: AppleCommander now sports a file viewer: Disk images of 140K (floppy) may be reordered: Ubuntu Linux This is the initial window from which all disk images are opened: The current ProDOS 2.4.2 system master:","title":"Screenshots"},{"location":"using/#windows-xp","text":"This is the initial window from which all disk images are opened: This should be an almost familiar sight, except that the DOS 3.3 master is in a \"standard view\" - which is pretty much operating-system agnostic: Ah, much better! This is as close to the DOS 3.3 CATALOG as you'll get: For those who need all the detail, the detail view will show all information that is available. This view varies significantly by operating system (ProDOS has the most information to show). A disk usage map is also available. Along with general information about the disk image. Don't get confused or concerned regarding the archive order and the disk format - the disk format is how the data is actually written on the disk itself while the order is just the ordering of data in the image that emulators use. For those operating systems that can, a deleted file listing is also available: File exports are now an option: The file export wizard allows you to choose from the supported file types: The graphics export requires a little more information: It may not be beautiful, but it allows you to place your files wherever you want them: The converted Hires color image: AppleCommander now sports a file viewer: Disk images of 140K (floppy) may be reordered:","title":"Windows XP"},{"location":"using/#ubuntu-linux","text":"This is the initial window from which all disk images are opened: The current ProDOS 2.4.2 system master:","title":"Ubuntu Linux"},{"location":"dev-notes/ant/","text":"The distribution file AppleCommander-version-ac.jar provides an Ant task that can be used as part of Ant-based builds. Please add a ticket if you would like to see the Ant task maintained. As of 1.7.0, there are no packages being produced. Using the Apple Commander Ant task The AppleCommander Ant task mirrors the ac command line as much as possible. The advantage over using the ant task over simply calling the AppleCommander command line directly is speed. It is much faster to call on the Ant task than it is for ant to shell out to the system, fire up a Java instance, and then execute your command. As with any external ant task, the first thing that must be done is to declare a taskdef : <taskdef name=\"appleCommander\" classname=\"com.webcodepro.applecommander.ui.AntTask\" classpath=\"AppleCommander-${version}-ac.jar\"/> Where ${version} would need to be defined by you to be the version of the command-line AppleCommander you are using. The first version of the AC command line that included this Ant task support is 1.3.5.13. Once you have the taskdef defined, it can be called from within ant like this: <!-- Call AppleCommander to print information about the disk image --> <appleCommander command=\"i\" imagename=\"${myDiskImage}\" /> The values for command that the ant task understands generally mirror those of the command line. Here's a list of them, along with their required and optional parameters: i <imagename> display information about an image. ls <imagename> list brief directory of an image. l <imagename> list directory of an image. ll <imagename> list detailed directory of an image. e <imagename> <filename> [<output>] export file from image to stdout or to an output file. x <imagename> [<outputpath>] extract all files from image to outputpath, or the current working directory if blank. g <imagename> <filename> [<output>] get raw file from image to stdout or to an output file. p <imagename> <filename> <type> [[$|0x]<addr>] put stdin in filename on image, using file type and address [0x2000]. d <imagename> <filename> delete file from image. k <imagename> <filename> lock file on image. u <imagename> <filename> unlock file on image. n <imagename> <volname> change volume name (ProDOS or Pascal). dos <imagename> <filename> <type> put stdin with DOS header in filename on image, using file type and address from header. as <imagename> [<filename>] put stdin with AppleSingle format on image. dos140 <imagename> create a 140K DOS 3.3 image. pro140 <imagename> <volname> create a 140K ProDOS image. pro800 <imagename> <volname> create an 800K ProDOS image. pas140 <imagename> <volname> create a 140K Pascal image. pas800 <imagename> <volname> create an 800K Pascal image. convert <filename> <imagename> [<sizeblocks>] uncompress a ShrinkIt or Binary II file; or convert a DiskCopy 4.2 image into a ProDOS disk image. For the commands that require a type parameter, their values depend on the operating system of the underlying image's operating system: DOS 3.x: A, B, I, T, S, R, a, b. Pascal: bad, code, text, info, data, graf, foto. ProDOS: bas, bin, sys, txt, rel, etc.; see ProdosFileTypes.properties for more. In order to feed AppleCommander standard input, a file would be specified with the input parameter for the task - like this: <appleCommander command=\"p\" input=\"manifest.mf\" imagename=\"${myDiskImage}\" filename=\"MANIFEST\" type=\"T\" /> In order to extract a file from an image to a real file, the real file would be specified with the output parameter for the task - like this: <appleCommander command=\"g\" imagename=\"${myDiskImage}\" filename=\"MANIFEST\" output=\"manifest.mf\" /> AppleCommander ant tasks can be told to ignore errors with the failonerror parameter: <appleCommander command=\"p\" failonerror=\"false\" input=\"${hugeFileExpectFailure}\" imagename=\"${pro800image}\" filename=\"BLOWUP\" type=\"txt\" />","title":"Ant Task"},{"location":"dev-notes/ant/#using-the-apple-commander-ant-task","text":"The AppleCommander Ant task mirrors the ac command line as much as possible. The advantage over using the ant task over simply calling the AppleCommander command line directly is speed. It is much faster to call on the Ant task than it is for ant to shell out to the system, fire up a Java instance, and then execute your command. As with any external ant task, the first thing that must be done is to declare a taskdef : <taskdef name=\"appleCommander\" classname=\"com.webcodepro.applecommander.ui.AntTask\" classpath=\"AppleCommander-${version}-ac.jar\"/> Where ${version} would need to be defined by you to be the version of the command-line AppleCommander you are using. The first version of the AC command line that included this Ant task support is 1.3.5.13. Once you have the taskdef defined, it can be called from within ant like this: <!-- Call AppleCommander to print information about the disk image --> <appleCommander command=\"i\" imagename=\"${myDiskImage}\" /> The values for command that the ant task understands generally mirror those of the command line. Here's a list of them, along with their required and optional parameters: i <imagename> display information about an image. ls <imagename> list brief directory of an image. l <imagename> list directory of an image. ll <imagename> list detailed directory of an image. e <imagename> <filename> [<output>] export file from image to stdout or to an output file. x <imagename> [<outputpath>] extract all files from image to outputpath, or the current working directory if blank. g <imagename> <filename> [<output>] get raw file from image to stdout or to an output file. p <imagename> <filename> <type> [[$|0x]<addr>] put stdin in filename on image, using file type and address [0x2000]. d <imagename> <filename> delete file from image. k <imagename> <filename> lock file on image. u <imagename> <filename> unlock file on image. n <imagename> <volname> change volume name (ProDOS or Pascal). dos <imagename> <filename> <type> put stdin with DOS header in filename on image, using file type and address from header. as <imagename> [<filename>] put stdin with AppleSingle format on image. dos140 <imagename> create a 140K DOS 3.3 image. pro140 <imagename> <volname> create a 140K ProDOS image. pro800 <imagename> <volname> create an 800K ProDOS image. pas140 <imagename> <volname> create a 140K Pascal image. pas800 <imagename> <volname> create an 800K Pascal image. convert <filename> <imagename> [<sizeblocks>] uncompress a ShrinkIt or Binary II file; or convert a DiskCopy 4.2 image into a ProDOS disk image. For the commands that require a type parameter, their values depend on the operating system of the underlying image's operating system: DOS 3.x: A, B, I, T, S, R, a, b. Pascal: bad, code, text, info, data, graf, foto. ProDOS: bas, bin, sys, txt, rel, etc.; see ProdosFileTypes.properties for more. In order to feed AppleCommander standard input, a file would be specified with the input parameter for the task - like this: <appleCommander command=\"p\" input=\"manifest.mf\" imagename=\"${myDiskImage}\" filename=\"MANIFEST\" type=\"T\" /> In order to extract a file from an image to a real file, the real file would be specified with the output parameter for the task - like this: <appleCommander command=\"g\" imagename=\"${myDiskImage}\" filename=\"MANIFEST\" output=\"manifest.mf\" /> AppleCommander ant tasks can be told to ignore errors with the failonerror parameter: <appleCommander command=\"p\" failonerror=\"false\" input=\"${hugeFileExpectFailure}\" imagename=\"${pro800image}\" filename=\"BLOWUP\" type=\"txt\" />","title":"Using the Apple Commander Ant task"},{"location":"dev-notes/cc65-pipeline/","text":"There is a cc65 based pipeline that is maintained with current versions of various Apple II tooling, including ac . See the a2geek/cc65-pipeline GitHub repository for usage and source as well as the associated a2geek/cc65-pipeline Docker Hub repository for Docker images.","title":"cc65 Pipeline"},{"location":"dev-notes/gav/","text":"Dependencies Much of AppleCommander and it's tooling should be reusable and can be included in other projects. AppleCommander The AppleCommander libraries are available as a dependency. Maven: <dependency> <groupId>net.sf.applecommander</groupId> <artifactId>AppleCommander</artifactId> <version>1.7.0</version> </dependency> Gradle: compile \"net.sf.applecommander:AppleCommander:1.7.0\" Note that as of 1.4.0, the Shrinkit library is now a separate project. Shrinkit The Shrinkit library is available as a separate dependency. Maven: <dependency> <groupId>net.sf.applecommander</groupId> <artifactId>ShrinkItArchive</artifactId> <version>1.2.2</version> </dependency> Gradle: compile \"net.sf.applecommander:ShrinkItArchive:1.2.2\" AppleSingle The AppleSingle support is available in a dedicated API. Maven: <dependency> <groupId>net.sf.applecommander</groupId> <artifactId>applesingle-api</artifactId> <version>1.2.1</version> </dependency> Gradle: compile \"net.sf.applecommander:applesingle-api:1.2.1\" BASIC The BASIC tooling is available in the bastools API. Maven: <dependency> <groupId>net.sf.applecommander</groupId> <artifactId>bastools-api</artifactId> <version>0.3.1</version> </dependency> Gradle: compile \"net.sf.applecommander:bastools-api:0.3.1\" Final Notes This is a manual release process, so it may take a bit of time (and possibly some prodding). Notes: There are no plans to change from net.sf.applecommander in the GAV. (It should have been com.webcodepro.applecommander , however, that domain was given up long ago.) The Java packages will remain com.webcodepro.applecommander as everyone depends on that package scheme. The versions listed here are modified by hand, so don't hesitate to check them. Note that the version should match was is in the GitHub release page for each of the subprojects.","title":"Maven/Gradle GAV"},{"location":"dev-notes/gav/#dependencies","text":"Much of AppleCommander and it's tooling should be reusable and can be included in other projects.","title":"Dependencies"},{"location":"dev-notes/gav/#applecommander","text":"The AppleCommander libraries are available as a dependency. Maven: <dependency> <groupId>net.sf.applecommander</groupId> <artifactId>AppleCommander</artifactId> <version>1.7.0</version> </dependency> Gradle: compile \"net.sf.applecommander:AppleCommander:1.7.0\" Note that as of 1.4.0, the Shrinkit library is now a separate project.","title":"AppleCommander"},{"location":"dev-notes/gav/#shrinkit","text":"The Shrinkit library is available as a separate dependency. Maven: <dependency> <groupId>net.sf.applecommander</groupId> <artifactId>ShrinkItArchive</artifactId> <version>1.2.2</version> </dependency> Gradle: compile \"net.sf.applecommander:ShrinkItArchive:1.2.2\"","title":"Shrinkit"},{"location":"dev-notes/gav/#applesingle","text":"The AppleSingle support is available in a dedicated API. Maven: <dependency> <groupId>net.sf.applecommander</groupId> <artifactId>applesingle-api</artifactId> <version>1.2.1</version> </dependency> Gradle: compile \"net.sf.applecommander:applesingle-api:1.2.1\"","title":"AppleSingle"},{"location":"dev-notes/gav/#basic","text":"The BASIC tooling is available in the bastools API. Maven: <dependency> <groupId>net.sf.applecommander</groupId> <artifactId>bastools-api</artifactId> <version>0.3.1</version> </dependency> Gradle: compile \"net.sf.applecommander:bastools-api:0.3.1\"","title":"BASIC"},{"location":"dev-notes/gav/#final-notes","text":"This is a manual release process, so it may take a bit of time (and possibly some prodding). Notes: There are no plans to change from net.sf.applecommander in the GAV. (It should have been com.webcodepro.applecommander , however, that domain was given up long ago.) The Java packages will remain com.webcodepro.applecommander as everyone depends on that package scheme. The versions listed here are modified by hand, so don't hesitate to check them. Note that the version should match was is in the GitHub release page for each of the subprojects.","title":"Final Notes"},{"location":"dev-notes/uml/","text":"Disk and FormattedDisk Generally, a Disk represents an Apple ][ disk image. This can be size, any order, and any format. The Disk class itself manages the varying disk order (DOS, ProDOS, or their variants) simply by the file extension. Disk s that are formatted with an operating system are managed by the subclasses of FormattedDisk . The general user interface(s) can then work with a FormattedDisk without knowing about the specific operating system. Somewhat surprisingly, a Disk can contain multiple FormattedDisk s. By structuring the disk image in this manner, the 800K DOS formats can be accommodated (yielding two 400K DOS FormattedDisk s - which models the physical behavior rather nicely). Additionally, other configurations can be accommodated in the future - Pascals multiple volume configuration or a ProDOS volume hosting DOS 3.3 and/or Pascal volumes. FileEntry Each Disk contains multiple files. The file is represented by a FileEntry . You will note that the attributes exposed by the FileEntry interface are pretty generic. To accommodate the various views available, the getFileColumnData method was added. This method will, depending on the setting, return a standard view, a native view (mimics the native catalog/directory display), and a detailed view (giving all available data on the files). FileFilter In order to allow AppleCommander to export files easily, the concept of a FileFilter was added. A FileFilter simply takes the raw data from the FileEntry and then processes it according to the filter. Adding new filters is as easy as implementing the FileFilter interface and then hooking it into the user interface! ProdosCommonEntry Just to be complete, ProDOS yielded itself to a simple object hierarchy.","title":"UML diagrams"},{"location":"dev-notes/uml/#disk-and-formatteddisk","text":"Generally, a Disk represents an Apple ][ disk image. This can be size, any order, and any format. The Disk class itself manages the varying disk order (DOS, ProDOS, or their variants) simply by the file extension. Disk s that are formatted with an operating system are managed by the subclasses of FormattedDisk . The general user interface(s) can then work with a FormattedDisk without knowing about the specific operating system. Somewhat surprisingly, a Disk can contain multiple FormattedDisk s. By structuring the disk image in this manner, the 800K DOS formats can be accommodated (yielding two 400K DOS FormattedDisk s - which models the physical behavior rather nicely). Additionally, other configurations can be accommodated in the future - Pascals multiple volume configuration or a ProDOS volume hosting DOS 3.3 and/or Pascal volumes.","title":"Disk and FormattedDisk"},{"location":"dev-notes/uml/#fileentry","text":"Each Disk contains multiple files. The file is represented by a FileEntry . You will note that the attributes exposed by the FileEntry interface are pretty generic. To accommodate the various views available, the getFileColumnData method was added. This method will, depending on the setting, return a standard view, a native view (mimics the native catalog/directory display), and a detailed view (giving all available data on the files).","title":"FileEntry"},{"location":"dev-notes/uml/#filefilter","text":"In order to allow AppleCommander to export files easily, the concept of a FileFilter was added. A FileFilter simply takes the raw data from the FileEntry and then processes it according to the filter. Adding new filters is as easy as implementing the FileFilter interface and then hooking it into the user interface!","title":"FileFilter"},{"location":"dev-notes/uml/#prodoscommonentry","text":"Just to be complete, ProDOS yielded itself to a simple object hierarchy.","title":"ProdosCommonEntry"},{"location":"history/current/","text":"Release notes and downloads are now on the GitHub releases section. To download the most recent version of AppleCommander, please visit the releases tab at our GitHub page! Please visit the installing AppleCommander page for installation instructions.","title":"Current releases"},{"location":"history/version100/","text":"I am working on a general Apple2 disk image utility. Why? I haven't found any one utility that does everything for transferring files in and out of disk images - and, besides, I'm thoroughly enjoying retro computing . Currently, it reads and displays the contents of disks. It supports DOS 3.3, ProDOS, Apple Pascal, and RDOS formatted disks - and reads compressed ( *.gz ) images, 140K DOS ordered ( *.do , *.dsk ), 140K ProDOS ordered ( *.po ), 800K ProDOS ordered ( *.2img , *.2mg ), and 32MB ApplePC hard disk images ( *.hdv ). This doesn't cover all image formats, but covers the ones I needed/wanted to have covered - it can be expanded relatively easily. Future direction are to (a) have the ability to extract files from images and (b) to import files into images. Two caveats - it is written in Java (you need the JVM installed to run it), and I also have been using this as an excuse to work with the Eclipse.org SWT windowing library (which will need to be downloaded also). However, the upside to this is that it should run wherever Java and SWT run (Windows, Linux, and Mac OS X right now). If you're interested, come and take a peek! http://webpages.charter.net/greener/AppleCommander/ (Note that this link is no longer active.) -Rob","title":"1.0 (28-Oct-2002)"},{"location":"history/version110/","text":"A new release of AppleCommander is available. Version 1.1.0 brings in file exporting and filtering (if chosen). File export types include raw disk, binary, ASCII text, Applesoft BASIC, Integer BASIC, and Graphics modes (Hires and Double Hires). AppleCommander reads and DOS 3.3, ProDOS, Apple Pascal, and RDOS formatted disks - and reads compressed ( *.gz ) images, 140K DOS ordered ( *.do , *.dsk ), 140K ProDOS ordered ( *.po ), 800K ProDOS ordered ( *.2img , *.2mg ), and 32MB ApplePC hard disk images ( *.hdv ). If you're interested, come and take a peek! http://webpages.charter.net/greener/AppleCommander/ (Note that this link is no longer active.) -Rob","title":"1.1 (12-Nov-2002)"},{"location":"history/version111/","text":"A new release of AppleCommander is available. Version 1.1.1 brings AppleWorks word processor (AWP) file exporting, multiple files can be exported at once, the wizard \"guesses\" the file type, along with minor bug fixes and enhancements. With this release, AppleCommander is GPL. The home page has now moved to: http://applecommander.sourceforge.net/ The SourceForge project page is located at: http://sourceforge.net/projects/applecommander/ If you're interested, please take a peek. Now that AppleCommander is hosted at SourceForge, you may submit bugs or requests, browse the code, or even contribute code! -Rob","title":"1.1.1 (30-Nov-2002)"},{"location":"history/version120/","text":"A new release of AppleCommander is available. Version 1.2.0 took a bit longer than expected, as I got distracted with other fun stuff in AppleCommander (hence, super-hires exports and AWP to RTF conversion): Can now create disk images. For the moment, these images are not bootable (including hard disk images) - they do however boot a nifty title screen... Files can now be imported into disks. Formats that support this are DOS 3.3 and ProDOS formats. (Pascal and RDOS will come at a later point.) The AppleWorks export now has an option for exporting to Rich-Text Format (RTF). This format can be loaded into many word-processors easily. The graphics export option now supports Super High-Res images. Both unpacked and packed formats. These are essentially raw dumps from the IIGS memory that were saved to disk. Files can be deleted. Any changes to a disk image can be saved. Please be careful! It's easy enough to keep a backup copy of your work these days. Two new DOS derivatives are available: UniDOS and OzDOS (both are 800K formats). A Linux and a Windows native executable is in the works. Be warned that they are still experimental. In particular, in the process of compiling, something about the code introduces delays (i.e., click and wait a couple of seconds), and the graphics filter currently needs to be disabled, as GCJ does not support the graphics libraries that are being used. AppleCommander is hosted on SourceForge. The home page is located at: http://applecommander.sourceforge.net/ The SourceForge project page is located at: http://sourceforge.net/projects/applecommander/ The files are located at: http://sourceforge.net/project/showfiles.php?group_id=67414 If you're interested, please take a peek and let me know! -Rob","title":"1.2.0 (11-Feb-2003)"},{"location":"history/version121/","text":"A new release of AppleCommander is available. Version 1.2.1 is primarily a clean-up operation. However, there is a bit of new functionality - AppleWorks Spread Sheet (ASP) and Data Base (ADB) files can both be exported to a *.csv file format. Now carries margin setting through, sets font to Courier New (more realistic formatting), and fixes boldface not being turned off correctly when converting AWP files to RTF format. Import could/should choose the filetype based upon the file extension for files being imported. Mostly useful for ProDOS; unless a filetype mapping is introduced. Export of AppleWorks Data Base files. Export of AppleWorks Spread Sheet files. Fixed minor issue with ProDOS disks where files at the 128K border would be grown (incorrectly) into a Tree file (instead of a Sapling). Import of multiple files fails after multiple imports. This was an issue with ProDOS files >128K (\"Tree\" files). The delete code didn't handle the master index block appropriately when blocks numbered zero were present (normally indicating the end of file). DOS 3.3 was not writing correct number of sectors if a file was more than 256 sectors long. DOS 3.3 was not managing deleted file entries appropriately and tried to work with track $FF. Fixed offset calculation for 800K DOS organized disks. This primarily affected UniDOS. Import menu should be in directory pane instead of file pane. The information tab does not get updated. Now that the disk can be modified, this page needs to be updated when shown. I'm still putzing with a compiled version for Linux and Windows, so they haven't shown up as of yet. AppleCommander is hosted on SourceForge. The home page is located at: http://applecommander.sourceforge.net/ The SourceForge project page is located at: http://sourceforge.net/projects/applecommander/ The files are located at: http://sourceforge.net/project/showfiles.php?group_id=67414 If you're interested, please take a peek and let me know! -Rob","title":"1.2.1 (01-Mar-2003)"},{"location":"history/version122/","text":"A new release of AppleCommander is available! Version 1.2.2 continues on the general cleanup. One new export filter of a generalized hex dump has been added and quite a bit of work in relation to ProDOS volumes. ProDOS disks now re-use deleted file entries. Prior to this fix, deleted entries were never re-used. If importing many files, a \"Disk Full\" error would be generated rather quickly. ProDOS file entries do not generate spurious file entries. There was no method of detecting unused entries in pre-1.2.2 code. Import file specification should only allow address editing if the filetype requires it. Fixed parsing of filetype definitions for ProDOS volumes. Need to be able to import into a directory in ProDOS. This will most likely involve adding an interface indicating a (writable) directory. This interface would be applied to both disks as well as file entries, if appropriate. ProDOS subdirectories need to allocate another block as they fill up; otherwise the directory is limited to the number of entries that fit within the allocated space. Import now sports a progress indicator and identifies which file is being imported. Popup dialogs are now centered above the controlling window instead of popping up randomly. Added a Hex Dump file filter that displays offset into file, hex bytes, and the ASCII code. AppleCommander is now being built by an ANT script instead of by the Eclipse menu pick. I'm still putzing with a compiled version for Linux and Windows, so they haven't shown up as of yet. (Unchanged - but not forgotten.) AppleCommander is hosted on SourceForge. The home page is located at: http://applecommander.sourceforge.net/ The SourceForge project page is located at: http://sourceforge.net/projects/applecommander/ The files are located at: http://sourceforge.net/project/showfiles.php?group_id=67414 If you're interested, please take a peek and let me know what you think! -Rob","title":"1.2.2 (15-Mar-2003)"},{"location":"history/version123/","text":"A new release of AppleCommander is available! Version 1.2.3 concentrated work on being able to build a Windows executable. Separated image support for GraphicsFileFilter. This allows easier preparation for compiling AppleCommander as a Windows executable (and allows limited image support to boot). Compile into native executable (Windows works now). Work on identifying why GCJ introduces slow performance to some areas. This appears to be resolved with an early build of GCJ 3.3. AppleCommander is hosted on SourceForge. The home page is located at: http://applecommander.sourceforge.net/ The SourceForge project page is located at: http://sourceforge.net/projects/applecommander/ The files are located at: http://sourceforge.net/project/showfiles.php?group_id=67414 If you're interested, please take a peek and let me know what you think! -Rob","title":"1.2.3 (13-Apr-2003)"},{"location":"history/version130/","text":"Very early release of an Applesoft BASIC compiler; John Matthews' bug fixes have been incorporated; Chris Sebrell's fixes have been incorporated.","title":"1.3.0 (04-Dec-2003)"},{"location":"history/version131/","text":"A new release of AppleCommander is available! Version 1.3.1 introduces file viewing as well as John Matthews command-line version of AppleCommander ( ac ). The beginnings of an AppleSoft compiler have been added (strictly beta and incomplete). Full gory details are listed below for both the unannounced 1.3.0 as well as the current 1.3.1. AppleCommander is hosted on SourceForge. The home page is located at: http://applecommander.sourceforge.net/ The SourceForge project page is located at: http://sourceforge.net/projects/applecommander/ The files are located at: http://sourceforge.net/project/showfiles.php?group_id=67414 John Matthews' command-line \"ac\" utility is available at: http://www.wright.edu/~john.matthews/ac.html If you're interested, please take a peek and let me know what you think! -Rob New for version 1.3.1 (2003-12-12): Short-cut keys have been implemented. From AppleCommander window: - CTRL+O = Open a disk image - CTRL+C = Create a new disk image - CTRL+A = About... From disk window - Toolbar shortcuts: - F2 = Standard file view - F3 = Native file view - F4 = Detail file view - F5 = Show deleted files - CTRL+I = Import files wizard - CTRL+S = Save - CTRL+SHIFT+S = Save As - Directory shortcuts (in addition to toolbar shortcuts) - \"+\" = expand one level - \"-\" = close one level - CTRL+\"+\" = expand fully - CTRL+\"-\" = close fully - File shortcuts (in addition to toolbar shortcuts) - CTRL+E = Export file wizard - CTRL+C = Compile BASIC program (BETA) - CTRL+V = View file (later version) - CTRL+D = Delete file Spent time ensuring that buttons, context menus, and shortcuts are enabled or disabled as appropriate. Save does not allow the disk image location to be chosen for new images: Implemented Save As A save on a new image invokes Save As File preview supports: BASIC programs (Applesoft and Integer BASIC); Applesoft BASIC is colored Graphics images (same as supported by the graphics export function) Appleworks (database, spreadsheet, word processor) Text files Hex dump of all the above \"Raw\" format of all of the above; this includes all data as read from disk including length and starting address as well as full sectors/blocks Shortcuts available: F2 = Native format view (as applicable) F3 = Hex dump view F4 = Raw hex dump of disk bytes (includes length or address start along with all bytes stored on disk - a multiple of 256 or 512 depending on disk format) CTRL+A = Select all (only text formats) CTRL+C = Copy to clipboard (only text formats) CTRL+P = Print Printing is available from the file preview. Copy is avilable from file preview except for images. Opening an invalid disk image (or a file that is not a disk image) no longer crashes AppleCommander. Provide a command-line interface - John Matthews \"ac\" is now supplied as part of the AppleCommander distribution. If AppleCommander gets no command-line arguments, the GUI version is launched. Otherwise, AppleCommander reserves the following messages: -swt = force SWT version -swing = force Swing version (N/A - may be removed) -command = force command interpreter (not done - may be superseded by the \"ac\" utility) -help or -? = general help messages Everything else is passed on to John's \"ac\" command-line version (from the application help): AppleCommander command line options: -l list directory of image. -e export file from image to stdout. -g get raw file from image to stdout. -p put stdin in destname on image, using file type and address. -d delete file from image. -p140 create a 140K ProDOS image. -p800 create a 800K ProDOS image. New for version 1.3.0 (2003-12-05): HDV disks are not always created to their full capacity. AppleCommander, however, assumes that the size of the file on disk is the size of the disk. (Really!) This is an issue because the ProDOS bitmap indicates there is a certain amount of space and AppleCommander just assumes that the data exists. Incorporated fixes from John Matthews. See: http://www.wright.edu/~john.matthews/ac.html Early release of Applesoft BASIC compiler. This currently is limited to assembly of small programs. If a command is not compiled, you are likely to just get an error about expecting a line number. Expressions are not very complete. Supported commands are: END, FLASH, FOR, GOTO, GR, HCOLOR, HGR, HGR2, HOME, HPLOT, HTAB, INVERSE, NEXT, NORMAL, PRINT, RETURN, TEXT, VTAB Unsupported commands are: ABS, AND, ASC, AT, ATN, CALL, CHR$, CLEAR, COLOR=, CONT, COS, DATA, DEF, DEL, DIM, DRAW, EXP, FN, FRE, GET, GOSUB, GR, HIMEM:, HLIN, IF, IN#, INPUT, INT, LEFT$, LEN, LET, LIST, LOAD, LOG, LOMEM:, MID$, NEW, NOT, NOTRACE, ON, ONERR, OR, PDL, PEEK, PLOT, POKE, POP, POS, PR#, READ, RECALL, REM, RESTORE, RESUME, RIGHT$, RND, ROT=, RUN, SAVE, SCALE=, SCRN, SGN, SHLOAD, SIN, SPC, SPEED=, SQR, STEP, STOP, STORE, STR$, TAB, TAN, THEN, TO, TRACE, USR, VAL, VLIN, WAIT, XDRAW, & Note that the compiler is not very sophisticated. Updated build notes and process. DELETE does not seem to delete in all circumstances. (JM caught this one.) [The End.]","title":"1.3.1 (12-Dec-2003)"},{"location":"history/version132/","text":"A new release of AppleCommander is available! Version 1.3.2 adds support for the nibble disk image order as well as support for read-only CP/M disks. SHR 3200-color graphics capability also. AppleCommander is hosted on SourceForge. The home page is located at: http://applecommander.sourceforge.net/ The SourceForge project page is located at: http://sourceforge.net/projects/applecommander/ The files are located at: http://sourceforge.net/project/showfiles.php?group_id=67414 If you're interested, please take a peek and let me know what you think! -Rob New for version 1.3.2 (2004-06-05): Print file listing or full disk listing (including subdirectories or multiple volumes). Added support for Super Hi-Res 3200 color format (PIC of 38400 bytes, file type $C1 and auxiliary type $0002). Updated preferences to remember the following directory locations: Open Save/Save As (new) Import (new) Export Compile Added support for Finder Icons File ($CA or \"ICN\"). Added CP/M disk image support. Restructured how AppleCommander manages disk ordering. This simplifies the manner in which various disk ordering schemes are implemented, and makes it possible to translate between ordering schemes. Support for nibble images ( *.NIB ) added. Can read and write to the images as long as that format supports writing. To support nibble images, changed the structure surrounding the disk image for a Disk. There now is an ImageOrder which manages the ordering of data on the image and supplies low-level read and write routines (track/sector and block). An ImageOrder holds data in an image layout - this allows the generic byte array and 2IMG layouts to be abstracted away from an images order. This does add interaction complexity but actually simplified the Disk class. Viewing or double-clicking on a directory will navigate into that directory. Viewing a deleted file no longer crashes AppleCommander - a warning message is displayed. Updated Export Graphics wizard and export right-click options. Add the ability to change physical order too (DOS <=> ProDOS <=> Nibble) on 140KB images. Add ability to compare disks - regardless of physical order. Started using Gimp for images (instead of Microsoft Photo Draw 2). Added a \"View As\" menu pick in context menu. (Just Text or Graphics at this time.) [The End.]","title":"1.3.2 (05-Jun-2004)"},{"location":"history/version133/","text":"A new release of AppleCommander is available! Version 1.3.3 adds support for Apple Pascal .text files; also added support for Assembly source file viewing. Scrollbar increments are now sensible. AppleCommander is hosted on SourceForge. The home page is located at: http://applecommander.sourceforge.net/ The SourceForge project page is located at: http://sourceforge.net/projects/applecommander/ The files are located at: http://sourceforge.net/project/showfiles.php?group_id=67414 If you're interested, please take a peek and let me know what you think! -Rob New for version 1.3.3 (2004-06-18): Repackage code - packages were getting a bit large. The goal is to make class structure/placement more logical. GUI: Moved the SWT wizards into their own packages; Separated utility classes into the util package; Main application windows remain in swt package. Storage: Moved OS formats into their respective packages in the \"os\" package ( dos33 , prodos , cpm , rdos , pascal ); Filters are now in the filters package; General storage classes remain under storage ( Disk , FormattedDisk , etc). Added formatted assembly FileFilter . Understands Merlin format source files. Need to recognize various formats - T.* , *.S , etc. Need examples for other formats (Orca, APW, etc). File viewer window now scrolls an appropriate amount: PgUp/PgDn, arrows, mouse wheel all work (must select content area first of course). Wizard windows no longer show up with the title bar off the screen. Refactored FileViewerWindow . Created supporting FilterAdapter classes as well as (presumably) reusable ContentAdapters . Started caching the filtered content for a little speed improvement when switching filters (native, hex, raw) in the FileView . Hans Otten provided information on Apple Pascal's formatting of .text files - they are now read correctly with appropriate character spacing and header section is ignored. Fixed error where viewing an invalid graphics file crashed AppleCommander (typically was too short). This can be done by context menu -> View As -> Graphics. Further automated build (and web site) deployment. Ant now builds source zip, GUI JAR, command-line jar, javadoc, and website. Website zip file only needs to be extracted into the web root to be deployed. Windows executable is scripted but not plugged into the Ant script at this time. [The End.]","title":"1.3.3 (18-Jun-2004)"},{"location":"history/version134/","text":"A new release of AppleCommander is available! Version 1.3.4 adds support for Apple Pascal 800K images; OS X issues resolved; Pascal images are now writable; and some work towards internationalization has been done. AppleCommander is hosted on SourceForge. The home page is located at: http://applecommander.sourceforge.net/ The SourceForge project page is located at: http://sourceforge.net/projects/applecommander/ The files are located at: http://sourceforge.net/project/showfiles.php?group_id=67414 If you're interested, please take a peek and let me know what you think! Contributions are more than welcome. If anyone wants to create an engaging GUI, that would be a great addition. Any anything else you think should be in AppleCommander... -Rob New for version 1.3.4 (2007-03-31): Started using the SWT S-Leak application to test for application resource leakage. Reports of a few issues with 800K images. UniDOS in particular doesn't appear to be recognized appropriately. This was due to a mix-up in setting the the image ordering. Fixed the bug where the import of a binary file does not set the address for DOS images. Fixed bug that where a file could not be exported as raw binary. (Crashed AppleCommander.) Raw binary files may now be imported - just check the raw image checkbox in the import wizard. Prepare for internationalization (I18N). Started as a simplification process but it got carried away. Text is stored in text bundles throughout the code. The files end with ____Bundle.properties . The groupings are Storage, Compiler, Ui, and Text; directories relate to the package. Contributions are more than welcome seeing as I know very little German and it's unlikely that I'll get my wife to spend time translating to Spanish. Updates per Eclipse 3.0 recommendations. Resolve OS X issues where window cannot come to the foreground. (J Matthews) Add Apple Pascal writing capability. (J Matthews) [The End.]","title":"1.3.4 (31-Mar-2007)"},{"location":"history/version135/","text":"A new release of AppleCommander is available! Version 1.3.5 adds support for cc65 and improves support for Apple UCSD Pascal 800K images and Mac OS X. AppleCommander is hosted on SourceForge. The home page is located at: http://applecommander.sourceforge.net/ The SourceForge project page is located at: http://sourceforge.net/projects/applecommander/ The files are located at: http://sourceforge.net/project/showfiles.php?group_id=67414 New for version 1.3.5 (2008-06-01): Added -cc65 option to use header information for start address. Fixed a bug in which DosFormatDisk.createFile() was iterating tracks instead of sectors. Fixed a related bug in which the DOS start address wasn't set correctly when recycling a previously used directory entry. Enabled 800K Pascal disk images; added Pascal unit tests. Added command-line guide to web site. [fin]","title":"1.3.5 (01-Jun-2008)"},{"location":"history/version13514/","text":"Pulled from Call-A.P.P.L.E. . AppleCommander, the java based floppy viewing software has been updated. Dr. John B. Matthews has put forth version 1.3.5.14 which is intended to address a freezing issue which has been in many early versions. The issue addressed in the update affected SWT and has long forced users to to FORCE QUIT the application. The new version has been confirmed to work on all versions of Mac OS X from 10.5.x to 10.9.x. AppleCommander is a floppy disk image viewer which allows users to check the contents of Apple II Disk images, manipulate files, change disk ordering and save the disk images to the users local drive. For more information or to download the latest build, check out the AppleCommander website at: https://sites.google.com/site/drjohnbmatthews/applecommander","title":"1.3.5.14 (27-Nov-2013)"}]}