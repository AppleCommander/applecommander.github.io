{
    "docs": [
        {
            "location": "/", 
            "text": "AppleCommander is a cross-platform set of tools used to manipulate Apple ][ disk images.  There is a GUI packaged for Windows, Linux, or Mac OS X, and there is also a command-line tool \nac\n that is useful in build chains.\n\n\nPlease visit \nAppleCommander on GitHub\n!  You can find current releases, submit tickets, and lend a helping hand.\n\n\nCapabilities\n\n\nAppleCommander is currently able to read and display information about disk images, export files of various types, create disk images, import files into disk images, and has a rudimentary compiler. As of 1.3.5, AppleCommander incorporates support for cc65 and an improved command-line and even an Ant interface.\n\n\nDisk image organizations\n\n\n\n\nCompressed images (\n*.gz\n);\n\n\n140K DOS-ordered images (\n*.do\n, \n*.dsk\n);\n\n\n140K ProDOS-ordered images (\n*.po\n);\n\n\n140K Nibble (DOS ordered) images (\n*.nib\n);\n\n\n800K ProDOS-ordered images (\n*.2mg\n, \n*.2img\n);\n\n\n32MB ApplePC Hard Disk images (\n*.hdv\n).\n\n\n\n\nDisk formats\n\n\n\n\nDOS 3.3 (140K formats only);\n\n\nUniDOS, OzDOS (800K formats only);\n\n\nProDOS;\n\n\nApple Pascal (140K and 800K formats);\n\n\nSSI's RDOS (140K formats only);\n\n\nCP/M (probably only 140K formats);\n\n\nGutenberg Word Processor;\n\n\nNakedOS (see the \nSuper-Mon page\n).\n\n\n\n\nArchive formats\n\n\n\n\nShrinkIt (the archive will be automatically extracted into a ProDOS disk);\n\n\nAppleSingle (\nac\n only).\n\n\n\n\nFile export filters\n\n\n\n\nRaw disk data (dumps blocks or sectors without regard to file length or operating system storage);\n\n\nBinary file (dumps file without any conversion);\n\n\nHex dump;\n\n\nASCII file filter;\n\n\nFormatted assembly output;\n\n\nPascal \".text\" files;\n\n\nApplesoft BASIC file filter (file is de-tokenized and written out as a text file);\n\n\nInteger BASIC file filter (ditto);\n\n\nBusiness BASIC file (ditto);\n\n\nGraphic image file filter (supports black and white or color Hires images as well as black and white or color Double Hires images as well as standard Super Hires, and 3200 color Super Hires);\n\n\nGutenberg Word processor;\n\n\nAppleWorks word processor (AWP) file filter (converts to text, poor HTML, or Rich-Text Format (RTF));\n\n\nAppleWorks database (ADB) file filter (converts to CSV);\n\n\nAppleWorks spread sheet (ASP) file filter (converts to CSV).\n\n\n\n\nCompile capabilities (experimental)\n\n\n\n\nApplesoft BASIC\n\n\n\n\nViewer capabilities\n\n\n\n\nBASIC programs (Applesoft and Integer BASIC); Applesoft BASIC is colored\n\n\nGraphics images (same as supported by the graphics export function)\n\n\nAppleWorks (database, spreadsheet, word processor)\n\n\nText files (plain text, assembly source files, Pascal text files)\n\n\nHex dump of all the above\n\n\n\"Raw\" format of all of the above; this includes all data as read from disk including length and starting address as well as full sectors/blocks", 
            "title": "Overview"
        }, 
        {
            "location": "/#capabilities", 
            "text": "AppleCommander is currently able to read and display information about disk images, export files of various types, create disk images, import files into disk images, and has a rudimentary compiler. As of 1.3.5, AppleCommander incorporates support for cc65 and an improved command-line and even an Ant interface.", 
            "title": "Capabilities"
        }, 
        {
            "location": "/#disk-image-organizations", 
            "text": "Compressed images ( *.gz );  140K DOS-ordered images ( *.do ,  *.dsk );  140K ProDOS-ordered images ( *.po );  140K Nibble (DOS ordered) images ( *.nib );  800K ProDOS-ordered images ( *.2mg ,  *.2img );  32MB ApplePC Hard Disk images ( *.hdv ).", 
            "title": "Disk image organizations"
        }, 
        {
            "location": "/#disk-formats", 
            "text": "DOS 3.3 (140K formats only);  UniDOS, OzDOS (800K formats only);  ProDOS;  Apple Pascal (140K and 800K formats);  SSI's RDOS (140K formats only);  CP/M (probably only 140K formats);  Gutenberg Word Processor;  NakedOS (see the  Super-Mon page ).", 
            "title": "Disk formats"
        }, 
        {
            "location": "/#archive-formats", 
            "text": "ShrinkIt (the archive will be automatically extracted into a ProDOS disk);  AppleSingle ( ac  only).", 
            "title": "Archive formats"
        }, 
        {
            "location": "/#file-export-filters", 
            "text": "Raw disk data (dumps blocks or sectors without regard to file length or operating system storage);  Binary file (dumps file without any conversion);  Hex dump;  ASCII file filter;  Formatted assembly output;  Pascal \".text\" files;  Applesoft BASIC file filter (file is de-tokenized and written out as a text file);  Integer BASIC file filter (ditto);  Business BASIC file (ditto);  Graphic image file filter (supports black and white or color Hires images as well as black and white or color Double Hires images as well as standard Super Hires, and 3200 color Super Hires);  Gutenberg Word processor;  AppleWorks word processor (AWP) file filter (converts to text, poor HTML, or Rich-Text Format (RTF));  AppleWorks database (ADB) file filter (converts to CSV);  AppleWorks spread sheet (ASP) file filter (converts to CSV).", 
            "title": "File export filters"
        }, 
        {
            "location": "/#compile-capabilities-experimental", 
            "text": "Applesoft BASIC", 
            "title": "Compile capabilities (experimental)"
        }, 
        {
            "location": "/#viewer-capabilities", 
            "text": "BASIC programs (Applesoft and Integer BASIC); Applesoft BASIC is colored  Graphics images (same as supported by the graphics export function)  AppleWorks (database, spreadsheet, word processor)  Text files (plain text, assembly source files, Pascal text files)  Hex dump of all the above  \"Raw\" format of all of the above; this includes all data as read from disk including length and starting address as well as full sectors/blocks", 
            "title": "Viewer capabilities"
        }, 
        {
            "location": "/install/", 
            "text": "This section covers installation of AppleCommander. As of 1.4.0, this should be a bit simpler as SWT is now packaged for each platform.\n\n\nInstall Java\n\n\nIf you do not already have Java 8 (or later) installed, you will be required to install one.\n\n\nFortunately, Oracle maintains a site dedicated to Java at \nJava.com\n.\n\n\nThe directions to check which version of Java you have installed is \nhere\n.\n\n\nDownload AppleCommander\n\n\nVisit the \nAppleCommander release page\n and download the JAR file for your system.  It will look something like this:\n\n\n\n\nGraphical Interface\n\n\nThe GUI component comes pre-packaged with all needed dependencies. You do not need to find and install the SWT toolkit any more!\n\n\n\n\nFor Windows use the file with \nAppleCommander-win64-VERSION.jar\n,\n\n\nFor Macintosh use \nAppleCommander-macosx-VERSION.jar\n, and\n\n\nFor Linux use \nAppleCommander-linux64-gtk-VERSION.jar\n.\n\n\n\n\nOnce the JAR is downloaded, just double-click on the file!\n\n\nFor Linux, you may need to set the file to be executable by allowing the JAR file to be executed as a program.\n\n\n\n\nCommand-line\n\n\nThe distribution file \nAppleCommander-ac.jar\n provides a command-line interface to AppleCommander. It is ready to use immediately, but it may be convenient to rename it (e.g. \nac.jar\n) or invoke it from a script, e.g.\n\n\nGNU bash script for Linux or Mac OS X (\nac.sh\n):\n\n\n#!/bin/sh\njava -jar ~/bin/ac.jar \n${@}\n\n\n\n\n\nMS DOS batch file (\nac.bat\n):\n\n\n@echo off\njava -jar AppleCommander-1.3.5-ac.jar %*\n\n\n\n\nThere is also a Mac OS X \nApple II homebrew repository\n which allows an install of:\n\n\n$ brew install applecommander\n\n\n\n\nAfter it installs, \napplecommander\n will be a command. Visit the GitHub page for information on how to install the tap.\n\n\nUnix-like environments have the ability to \nalias\n a command as well. To create an \nac\n command alias, use:\n\n\nalias ac='java -jar build/libs/AppleCommander-ac-1.4.0-BETA.jar'", 
            "title": "Installing"
        }, 
        {
            "location": "/install/#install-java", 
            "text": "If you do not already have Java 8 (or later) installed, you will be required to install one.  Fortunately, Oracle maintains a site dedicated to Java at  Java.com .  The directions to check which version of Java you have installed is  here .", 
            "title": "Install Java"
        }, 
        {
            "location": "/install/#download-applecommander", 
            "text": "Visit the  AppleCommander release page  and download the JAR file for your system.  It will look something like this:", 
            "title": "Download AppleCommander"
        }, 
        {
            "location": "/install/#graphical-interface", 
            "text": "The GUI component comes pre-packaged with all needed dependencies. You do not need to find and install the SWT toolkit any more!   For Windows use the file with  AppleCommander-win64-VERSION.jar ,  For Macintosh use  AppleCommander-macosx-VERSION.jar , and  For Linux use  AppleCommander-linux64-gtk-VERSION.jar .   Once the JAR is downloaded, just double-click on the file!  For Linux, you may need to set the file to be executable by allowing the JAR file to be executed as a program.", 
            "title": "Graphical Interface"
        }, 
        {
            "location": "/install/#command-line", 
            "text": "The distribution file  AppleCommander-ac.jar  provides a command-line interface to AppleCommander. It is ready to use immediately, but it may be convenient to rename it (e.g.  ac.jar ) or invoke it from a script, e.g.  GNU bash script for Linux or Mac OS X ( ac.sh ):  #!/bin/sh\njava -jar ~/bin/ac.jar  ${@}   MS DOS batch file ( ac.bat ):  @echo off\njava -jar AppleCommander-1.3.5-ac.jar %*  There is also a Mac OS X  Apple II homebrew repository  which allows an install of:  $ brew install applecommander  After it installs,  applecommander  will be a command. Visit the GitHub page for information on how to install the tap.  Unix-like environments have the ability to  alias  a command as well. To create an  ac  command alias, use:  alias ac='java -jar build/libs/AppleCommander-ac-1.4.0-BETA.jar'", 
            "title": "Command-line"
        }, 
        {
            "location": "/using/", 
            "text": "Windows XP\n\n\nThis is the initial window from which all disk images are opened:\n\n\n\n\nThis should be an almost familiar sight, except that the DOS 3.3 master is in a \"standard view\" - which is pretty much operating-system agnostic:\n\n\n\n\nAh, much better! This is as close to the DOS 3.3 CATALOG as you'll get:\n\n\n\n\nFor those who need all the detail, the detail view will show all information that is available. This view varies significantly by operating system (ProDOS has the most information to show).\n\n\n\n\nA disk usage map is also available.\n\n\n\n\nAlong with general information about the disk image.  Don't get confused or concerned regarding the archive order and the disk format - the disk format is how the data is actually written on the disk itself while the order is just the ordering of data in the image that emulators use.\n\n\n\n\nFor those operating systems that can, a deleted file listing is also available:\n\n\n\n\nFile exports are now an option:\n\n\n\n\nThe file export wizard allows you to choose from the supported file types:\n\n\n\n\nThe graphics export requires a little more information:\n\n\n\n\nIt may not be beautiful, but it allows you to place your files wherever you want them:\n\n\n\n\nThe converted Hires color image:\n\n\n\n\nAppleCommander now sports a file viewer:\n\n\n\n\n\n\nDisk images of 140K (floppy) may be reordered:\n\n\n\n\nUbuntu Linux\n\n\nThis is the initial window from which all disk images are opened:\n\n\n\n\nThe current ProDOS 2.4.2 system master:", 
            "title": "Screenshots"
        }, 
        {
            "location": "/using/#windows-xp", 
            "text": "This is the initial window from which all disk images are opened:   This should be an almost familiar sight, except that the DOS 3.3 master is in a \"standard view\" - which is pretty much operating-system agnostic:   Ah, much better! This is as close to the DOS 3.3 CATALOG as you'll get:   For those who need all the detail, the detail view will show all information that is available. This view varies significantly by operating system (ProDOS has the most information to show).   A disk usage map is also available.   Along with general information about the disk image.  Don't get confused or concerned regarding the archive order and the disk format - the disk format is how the data is actually written on the disk itself while the order is just the ordering of data in the image that emulators use.   For those operating systems that can, a deleted file listing is also available:   File exports are now an option:   The file export wizard allows you to choose from the supported file types:   The graphics export requires a little more information:   It may not be beautiful, but it allows you to place your files wherever you want them:   The converted Hires color image:   AppleCommander now sports a file viewer:    Disk images of 140K (floppy) may be reordered:", 
            "title": "Windows XP"
        }, 
        {
            "location": "/using/#ubuntu-linux", 
            "text": "This is the initial window from which all disk images are opened:   The current ProDOS 2.4.2 system master:", 
            "title": "Ubuntu Linux"
        }, 
        {
            "location": "/ac/", 
            "text": "ac\n is the command-line tool that provides access to the core of AppleCommander's capabilities.\n\n\nA quick note\n\n\nAll of these samples were done in a Unix-type environment (Mac OS X or Linux), hence the \n$\n is the prompt character.\n\n\nEvery sample assumes you have an \nac.jar\n in the current directory and are therefore written out \"long-hand\".  If you followed the \ninstall instructions\n, you have have setup a command-line script to help you out, meaning that every \njava -jar ac.jar\n can be replaced with \nac.sh\n or \nac.bat\n.  Additionally if you setup an \nalias\n, you can replace that to just \nac\n.  \n\n\nSetup whatever works for you and your environment, and be cognizant that the sample commands probably aren't \nquite\n exactly right for your setup!\n\n\nOptions\n\n\nFor a quick list of \nac\n options, enter the \n-h\n command:\n\n\n$ java -jar ac.jar -h\n\nCommandLineHelp = AppleCommander command line options [1.4.0-BETA]:\n-i  \nimagename\n [\nimagename\n] display information about image(s).\n-ls \nimagename\n [\nimagename\n] list brief directory of image(s).\n-l  \nimagename\n [\nimagename\n] list directory of image(s).\n-ll \nimagename\n [\nimagename\n] list detailed directory of image(s).\n-e  \nimagename\n \nfilename\n [\noutput\n] export file from image to stdout\n    or to an output file.\n-x  \nimagename\n [\ndirectory\n] extract all files from image to directory.\n-g  \nimagename\n \nfilename\n [\noutput\n] get raw file from image to stdout\n    or to an output file.\n-p  \nimagename\n \nfilename\n \ntype\n [[$|0x]\naddr\n] put stdin\n    in filename on image, using file type and address [0x2000].\n-d  \nimagename\n \nfilename\n delete file from image.\n-k  \nimagename\n \nfilename\n lock file on image.\n-u  \nimagename\n \nfilename\n unlock file on image.\n-n  \nimagename\n \nvolname\n change volume name (ProDOS or Pascal).\n-dos \nimagename\n \nfilename\n \ntype\n put stdin with DOS header\n      in filename on image, using file type and address from header.\n-as \nimagename\n [\nfilename\n] put stdin with AppleSingle format\n      in filename on image, using file type, address, and (optionally) name\n      from the AppleSingle file.\n-geos \nimagename\n interpret stdin as a GEOS conversion file and\n      place it on image (ProDOS only).\n-dos140 \nimagename\n create a 140K DOS 3.3 image.\n-pro140 \nimagename\n \nvolname\n create a 140K ProDOS image.\n-pro800 \nimagename\n \nvolname\n create an 800K ProDOS image.\n-pas140 \nimagename\n \nvolname\n create a 140K Pascal image.\n-pas800 \nimagename\n \nvolname\n create an 800K Pascal image.\n-convert \nfilename\n \nimagename\n [\nsizeblocks\n] uncompress a ShrinkIt or Binary\n         II file; or convert a DiskCopy 4.2 image into a ProDOS disk image.\n\n\n\n\n\n\nNote that the \n-cc65\n has been deprecated as CC65 itself is moving to using the AppleSingle format (\n-as\n flag).  Use \n-dos\n instead. \n-cc65\n will still be recognized, but it maps to \n-dos\n and a warning will be printed.\n\n\n\n\nCreating an image\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDOS 3.3\n\n\nThe \n-dos140\n command creates an empty 140K DOS 3.3 disk image in DOS sector order; DOS volumes do not have names, and volume number is the default (254).\n\n\n\n\n\n\nProDOS\n\n\nThe \n-pro140\n command creates an empty 140K ProDOS disk image, and \n-pro800\n creates an empty 800K image, both in ProDOS sector order.\n\n\n\n\n\n\nPascal\n\n\nThe \n-pas140\n command creates an empty 140K Pascal disk image, and \n-pas800\n creates an empty 800K image, both in Pascal sector order.\n\n\n\n\n\n\n\n\nTo be read correctly, DOS order disk image names should end in \n.dsk\n or \n.do\n, while ProDOS and Pascal order image names should end in \n.po\n. The resulting images will not boot, but they can be edited with the traditional utilities.\n\n\nTo create a DOS 3.3, Pascal and ProDOS image, enter the commands:\n\n\n$ java -jar ac.jar -dos140 dos.dsk\n$ java -jar ac.jar -pas140 pas.po volume1\n$ java -jar ac.jar -pro140 pro.po volume2\n\n\n\n\nThere is no textual output from this command (unless an error occurs) beyond having a new blank disk image.\n\n\nDisplaying information about an image\n\n\nThe \n-i\n command displays information about a disk image. Multiple image names are permitted.\n\n\nTo get information about one or more disks, enter any of the following commands:\n\n\n$ java -jar ac.jar -i ricky.2mg\n$ java -jar ac.jar -i fred.dsk ethel.po\n$ java -jar ac.jar -i mertz/*\n$ java -jar ac.jar -i *.po *.dsk\n\n\n\n\nA sample from the ProDOS 2.4.2 master disk:\n\n\n$ java -jar ac.jar -i ProDOS_2_4_2.dsk\nFile Name: ProDOS_2_4_2.dsk\nDisk Name: /PRODOS.2.4.2/\nPhysical Size (bytes): 143360\nFree Space (bytes): 0\nUsed Space (bytes): 143360\nPhysical Size (KB): 140\nFree Space (KB): 0\nUsed Space (KB): 140\nArchive Order: DOS\nDisk Format: ProDOS\nTotal Blocks: 280\nFree Blocks: 0\nUsed Blocks: 280\nVolume Access: Destroy Read Rename Write\nBlock Number of Bitmap: 6\nCreation Date: 09/19/2016\nFile Entries Per Block: 13\nFile Entry Length (bytes): 39\nActive Files in Root Directory: 19\nMinimum ProDOS Version Required: 0\nVolume Created By ProDOS Version: 0\nVolume Name: PRODOS.2.4.2\n\n\n\n\nDirectory listings\n\n\nThe \n-ls\n, \n-l\n and \n-ll\n commands list the directory of a disk image in short, regular and long format respectively. Multiple image names are permitted, as suggested above. To see the directory of one or more disk, enter any of the following commands:\n\n\n$ java -jar ac.jar -ls misc.dsk\n$ java -jar ac.jar -l  misc.dsk\n$ java -jar ac.jar -ll misc.dsk\n$ java -jar ac.jar -ls *.po *.dsk\n$ java -jar ac.jar -l  Nibble*/*\n\n\n\n\nSample runs (with some text omitted for brevity):\n\n\n$ java -jar ac.jar -ls ProDOS_2_4_2.dsk\n/home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/\nVIEW.README BAS 512  \n\nsnip\n\nPRODOS SYS 17,128 Locked\nProDOS format; 0 bytes free; 143,360 bytes used.\n\n$ java -jar ac.jar -l ProDOS_2_4_2.dsk\n/home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/\n  VIEW.README BAS 001 09/15/2016 01/13/2018 512 A=$0801\n\nsnip\n\n* PRODOS SYS 034 01/18/2018 01/13/2018 17,128  \nProDOS format; 0 bytes free; 143,360 bytes used.\n\n$ java -jar ac.jar -ll ProDOS_2_4_2.dsk\n/home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/\n  VIEW.README  Destroy Read Rename Write BAS  001 09/15/2016 01/13/2018 512 A=$0801 0002 0116 Seedling Changed 0 36\n\nsnip\n\n* PRODOS  Read  SYS  034 01/18/2018 01/13/2018 17,128 $0000 0002 0005 Sapling Changed 0 36\nProDOS format; 0 bytes free; 143,360 bytes used.\n\n\n\n\nExamining a file\n\n\nThe \n-e\n command lets you examine a file by printing a readable version to standard output. To examine a file named \nfred\n on a disk named \nmisc.dsk\n, enter the command:\n\n\n$ java -jar ac.jar -e misc.dsk fred\n\n\n\n\nThe export command tries to choose an appropriate filter for the chosen file. Filters exist for formats, with a default hexadecimal format for binary files. If the file is probably a picture, the export format is PNG. To save the output to a file:\n\n\n$ java -jar ac.jar -e misc.dsk lucy.pic \n lucy.png\n\n\n\n\nA sample run against an AppleSoft BASIC program on the ProDOS 2.4.2 disk:\n\n\n$ java -jar ac.jar -e ProDOS_2_4_2.dsk VIEW.README\n10  REM VIEW.README BY J.BROOKS. 9/15/2016\n20 ADR = 768\n30  READ BYTE: IF BYTE \n0  THEN 100\n40  POKE ADR,BYTE:ADR = ADR +1: GOTO 30\n100  CALL 806\n150  PRINT  CHR$(4)\nBLOAD README,A$2000,TTXT\n\n200  HOME : FOR I = 1 TO 22: CALL 768: NEXT\n300  CALL 768: GET KEY$\n350  IF  ASC(KEY$) = 27 GOTO 500\n400  IF  PEEK(251) \n0 GOTO 300\n500  PRINT  CHR$(4)\nbye\n\n1000  DATA 162,40,160,0,177,250,240,29,9,128,201,225,144,2,41,255,32,237,253,200,201,141,240,3,202,208,233,152,24,101,250,133,250,144,2,230,251,96,162,96,169,32,133,251,141,54,3,169\n1010  DATA 0,133,250,168,153,0,32,200,208,250,238,54,3,202,208,244,26,208,2,160,224,136,140,15,3,96,-1\n\n\n\n\nGet a raw data file\n\n\nThe \n-g\n command gets a file in its raw form. To copy a file named \nfred\n from \nmisc.dsk\n to a file named \nethel\n on your file system, enter the command:\n\n\n$ java -jar ac.jar -g misc.dsk fred \n ethel\n\n\n\n\nBecause binary files are difficult to read, you may want to send the output to a program that can show the data in a hexadecimal format other than the one used with the \n-e\n option, above:\n\n\n$ java -jar ac.jar -g misc.dsk fred | hexdump\n\n\n\n\nAgain, a sample run with the AppleSoft BASIC program from the ProDOS 2.4.2 image.  This time, however, you will see the tokenized program:\n\n\n$ java -jar ac.jar -g ProDOS_2_4_2.dsk VIEW.README | hexdump -C\n00000000  29 08 0a 00 b2 56 49 45  57 2e 52 45 41 44 4d 45  |)....VIEW.README|\n00000010  20 42 59 20 4a 2e 42 52  4f 4f 4b 53 2e 20 39 2f  | BY J.BROOKS. 9/|\n00000020  31 35 2f 32 30 31 36 00  35 08 14 00 41 44 52 d0  |15/2016.5...ADR.|\n00000030  37 36 38 00 4b 08 1e 00  87 42 59 54 45 3a ad 42  |768.K....BYTE:.B|\n00000040  59 54 45 d1 30 c4 31 30  30 00 67 08 28 00 b9 41  |YTE.0.100.g.(..A|\n00000050  44 52 2c 42 59 54 45 3a  41 44 52 d0 41 44 52 c8  |DR,BYTE:ADR.ADR.|\n00000060  31 3a ab 33 30 00 70 08  64 00 8c 38 30 36 00 94  |1:.30.p.d..806..|\n00000070  08 96 00 ba e7 28 34 29  22 42 4c 4f 41 44 20 52  |.....(4)\nBLOAD R|\n00000080  45 41 44 4d 45 2c 41 24  32 30 30 30 2c 54 54 58  |EADME,A$2000,TTX|\n\nsnip\n\n000001f0  30 2c 31 35 2c 33 2c 39  36 2c 2d 31 00 00 00 e8  |0,15,3,96,-1....|\n00000200\n\n\n\n\nPut standard input onto disk image\n\n\nThe \n-p\n command puts data from the standard input stream onto a disk image. Four parameters are used: imagename, filename, type, and address. If the address is omitted and one is required, $2000 is assumed. Suppose \nethel\n is a binary file meant to start at address 2048 ($800 or 0x800). To put the binary file named \nethel\n back into a file named \nfred\n with that starting address on the DOS image named \nmisc.dsk\n:\n\n\n$ java -jar ac.jar -p misc.dsk fred B 0x800 \n ethel\n\n\n\n\nAlternatively, suppose \nethel\n is a binary starting at 2048 destined for \nfred\n on a ProDOS image named \np1.po\n:\n\n\n$ java -jar ac.jar -p p1.po fred bin 2048 \n ethel\n\n\n\n\nPut standard input with DOS 3.3 header onto disk image\n\n\nThe \n-dos\n command is like \n-p\n, but it assumes the input stream includes a four-byte header, as generated by older versions of \ncc65\n. Three parameters are required: imagename, filename, and type. The start address is taken from bytes 0-1 of the header. To put the DOS binary named \nethel\n into a file named \nfred\n on the DOS image named \nmisc.dsk\n:\n\n\n$ java -jar ac.jar -cc65 misc.dsk fred B \n ethel\n\n\n\n\nPut standard input in AppleSingle format onto disk image\n\n\nThe \n-as\n command is like \n-p\n, but it assumes the input stream is in the AppleSingle format, as generated by newer versions of \ncc65\n (\nsee ticket #20\n). The parameters are imagename (required) and, optionally, filename. The AppleSingle format supports a filename entry, but it is not always populated.  To put the AppleSingle binary named \nethel\n into a file named \nfred\n on the ProDOS image named \nmisc.dsk\n:\n\n\n$ java -jar ac.jar -as misc.dsk fred \n ethel\n\n\n\n\nPutting files and file types\n\n\nAs another example, consider the text file named \nfoo.text\n and the Pascal image named \nsrc.po\n:\n\n\n$ java -jar ac.jar -p p2.po foo.text text \n foo.text\n\n\n\n\nValid file types are specific to each operating system:\n\n\n\n\n\n\n\n\nOperating System\n\n\nFile Types\n\n\n\n\n\n\n\n\n\n\nDOS 3.x\n\n\nA\n, \nB\n, \nI\n, \nT\n, \nS\n, \nR\n, \na\n, \nb\n.\n\n\n\n\n\n\nPascal\n\n\nbad\n, \ncode\n, \ntext\n, \ninfo\n, \ndata\n, \ngraf\n, \nfoto\n.\n\n\n\n\n\n\nProDOS\n\n\nbas\n, \nbin\n, \nsys\n, \ntxt\n, \nrel\n, etc.; see \nProdosFileTypes.properties\n for more.\n\n\n\n\n\n\n\n\nDelete a file\n\n\nThe \n-d\n command deletes a file from an image:\n\n\n$ java -jar ac.jar -d misc.dsk fred\n\n\n\n\nCopying a file between disks\n\n\nTo copy a file from one image to another, do something like this:\n\n\n$ java -jar ac.jar -g one.dsk fred | java -jar ac.jar -p another.dsk fred bin 2048\n\n\n\n\nLocking and unlocking a file\n\n\nThe \n-k\n and \n-u\n commands lock and unlock a file on the given image:\n\n\n$ java -jar ac.jar -k misc.dsk fred\n$ java -jar ac.jar -u misc.dsk fred\n\n\n\n\nChange a volume name\n\n\nThe \n-n\n command changes the volume name on an image. Only ProDOS and Pascal images are affected:\n\n\n$ java -jar ac.jar -n misc.po name\n\n\n\n\nFurther details\n\n\n\n\nHere's a more comprehensive example of using AppleCommander for \ncross-platform development\n.\n\n\nIt's also possible to invoke the command line functions from within the ant build environment by using AppleCommander's \nant interface\n.\n\n\nThe \n-geos\n transfer file format is specified in \nApple GEOS CONVERT Format\n.\n\n\n\n\nKnown problems \n limitations\n\n\n\n\nTo replace an existing file on an image, you must delete it first; \nac\n will create as many duplicate entries as you specify, only one of which will be accessible to the operating system.\n\n\nGiven a ProDOS image, a full pathname may be specified for the \n-e\n, \n-g\n, \n-p\n, \n-d\n, \n-k\n, \n-u\n, \n-dos\n, and \n-as\n options. Files can only be put into an existing directory.", 
            "title": "Using 'ac'"
        }, 
        {
            "location": "/ac/#a-quick-note", 
            "text": "All of these samples were done in a Unix-type environment (Mac OS X or Linux), hence the  $  is the prompt character.  Every sample assumes you have an  ac.jar  in the current directory and are therefore written out \"long-hand\".  If you followed the  install instructions , you have have setup a command-line script to help you out, meaning that every  java -jar ac.jar  can be replaced with  ac.sh  or  ac.bat .  Additionally if you setup an  alias , you can replace that to just  ac .    Setup whatever works for you and your environment, and be cognizant that the sample commands probably aren't  quite  exactly right for your setup!", 
            "title": "A quick note"
        }, 
        {
            "location": "/ac/#options", 
            "text": "For a quick list of  ac  options, enter the  -h  command:  $ java -jar ac.jar -h\n\nCommandLineHelp = AppleCommander command line options [1.4.0-BETA]:\n-i   imagename  [ imagename ] display information about image(s).\n-ls  imagename  [ imagename ] list brief directory of image(s).\n-l   imagename  [ imagename ] list directory of image(s).\n-ll  imagename  [ imagename ] list detailed directory of image(s).\n-e   imagename   filename  [ output ] export file from image to stdout\n    or to an output file.\n-x   imagename  [ directory ] extract all files from image to directory.\n-g   imagename   filename  [ output ] get raw file from image to stdout\n    or to an output file.\n-p   imagename   filename   type  [[$|0x] addr ] put stdin\n    in filename on image, using file type and address [0x2000].\n-d   imagename   filename  delete file from image.\n-k   imagename   filename  lock file on image.\n-u   imagename   filename  unlock file on image.\n-n   imagename   volname  change volume name (ProDOS or Pascal).\n-dos  imagename   filename   type  put stdin with DOS header\n      in filename on image, using file type and address from header.\n-as  imagename  [ filename ] put stdin with AppleSingle format\n      in filename on image, using file type, address, and (optionally) name\n      from the AppleSingle file.\n-geos  imagename  interpret stdin as a GEOS conversion file and\n      place it on image (ProDOS only).\n-dos140  imagename  create a 140K DOS 3.3 image.\n-pro140  imagename   volname  create a 140K ProDOS image.\n-pro800  imagename   volname  create an 800K ProDOS image.\n-pas140  imagename   volname  create a 140K Pascal image.\n-pas800  imagename   volname  create an 800K Pascal image.\n-convert  filename   imagename  [ sizeblocks ] uncompress a ShrinkIt or Binary\n         II file; or convert a DiskCopy 4.2 image into a ProDOS disk image.   Note that the  -cc65  has been deprecated as CC65 itself is moving to using the AppleSingle format ( -as  flag).  Use  -dos  instead.  -cc65  will still be recognized, but it maps to  -dos  and a warning will be printed.", 
            "title": "Options"
        }, 
        {
            "location": "/ac/#creating-an-image", 
            "text": "Type  Description      DOS 3.3  The  -dos140  command creates an empty 140K DOS 3.3 disk image in DOS sector order; DOS volumes do not have names, and volume number is the default (254).    ProDOS  The  -pro140  command creates an empty 140K ProDOS disk image, and  -pro800  creates an empty 800K image, both in ProDOS sector order.    Pascal  The  -pas140  command creates an empty 140K Pascal disk image, and  -pas800  creates an empty 800K image, both in Pascal sector order.     To be read correctly, DOS order disk image names should end in  .dsk  or  .do , while ProDOS and Pascal order image names should end in  .po . The resulting images will not boot, but they can be edited with the traditional utilities.  To create a DOS 3.3, Pascal and ProDOS image, enter the commands:  $ java -jar ac.jar -dos140 dos.dsk\n$ java -jar ac.jar -pas140 pas.po volume1\n$ java -jar ac.jar -pro140 pro.po volume2  There is no textual output from this command (unless an error occurs) beyond having a new blank disk image.", 
            "title": "Creating an image"
        }, 
        {
            "location": "/ac/#displaying-information-about-an-image", 
            "text": "The  -i  command displays information about a disk image. Multiple image names are permitted.  To get information about one or more disks, enter any of the following commands:  $ java -jar ac.jar -i ricky.2mg\n$ java -jar ac.jar -i fred.dsk ethel.po\n$ java -jar ac.jar -i mertz/*\n$ java -jar ac.jar -i *.po *.dsk  A sample from the ProDOS 2.4.2 master disk:  $ java -jar ac.jar -i ProDOS_2_4_2.dsk\nFile Name: ProDOS_2_4_2.dsk\nDisk Name: /PRODOS.2.4.2/\nPhysical Size (bytes): 143360\nFree Space (bytes): 0\nUsed Space (bytes): 143360\nPhysical Size (KB): 140\nFree Space (KB): 0\nUsed Space (KB): 140\nArchive Order: DOS\nDisk Format: ProDOS\nTotal Blocks: 280\nFree Blocks: 0\nUsed Blocks: 280\nVolume Access: Destroy Read Rename Write\nBlock Number of Bitmap: 6\nCreation Date: 09/19/2016\nFile Entries Per Block: 13\nFile Entry Length (bytes): 39\nActive Files in Root Directory: 19\nMinimum ProDOS Version Required: 0\nVolume Created By ProDOS Version: 0\nVolume Name: PRODOS.2.4.2", 
            "title": "Displaying information about an image"
        }, 
        {
            "location": "/ac/#directory-listings", 
            "text": "The  -ls ,  -l  and  -ll  commands list the directory of a disk image in short, regular and long format respectively. Multiple image names are permitted, as suggested above. To see the directory of one or more disk, enter any of the following commands:  $ java -jar ac.jar -ls misc.dsk\n$ java -jar ac.jar -l  misc.dsk\n$ java -jar ac.jar -ll misc.dsk\n$ java -jar ac.jar -ls *.po *.dsk\n$ java -jar ac.jar -l  Nibble*/*  Sample runs (with some text omitted for brevity):  $ java -jar ac.jar -ls ProDOS_2_4_2.dsk\n/home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/\nVIEW.README BAS 512   snip \nPRODOS SYS 17,128 Locked\nProDOS format; 0 bytes free; 143,360 bytes used.\n\n$ java -jar ac.jar -l ProDOS_2_4_2.dsk\n/home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/\n  VIEW.README BAS 001 09/15/2016 01/13/2018 512 A=$0801 snip \n* PRODOS SYS 034 01/18/2018 01/13/2018 17,128  \nProDOS format; 0 bytes free; 143,360 bytes used.\n\n$ java -jar ac.jar -ll ProDOS_2_4_2.dsk\n/home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/\n  VIEW.README  Destroy Read Rename Write BAS  001 09/15/2016 01/13/2018 512 A=$0801 0002 0116 Seedling Changed 0 36 snip \n* PRODOS  Read  SYS  034 01/18/2018 01/13/2018 17,128 $0000 0002 0005 Sapling Changed 0 36\nProDOS format; 0 bytes free; 143,360 bytes used.", 
            "title": "Directory listings"
        }, 
        {
            "location": "/ac/#examining-a-file", 
            "text": "The  -e  command lets you examine a file by printing a readable version to standard output. To examine a file named  fred  on a disk named  misc.dsk , enter the command:  $ java -jar ac.jar -e misc.dsk fred  The export command tries to choose an appropriate filter for the chosen file. Filters exist for formats, with a default hexadecimal format for binary files. If the file is probably a picture, the export format is PNG. To save the output to a file:  $ java -jar ac.jar -e misc.dsk lucy.pic   lucy.png  A sample run against an AppleSoft BASIC program on the ProDOS 2.4.2 disk:  $ java -jar ac.jar -e ProDOS_2_4_2.dsk VIEW.README\n10  REM VIEW.README BY J.BROOKS. 9/15/2016\n20 ADR = 768\n30  READ BYTE: IF BYTE  0  THEN 100\n40  POKE ADR,BYTE:ADR = ADR +1: GOTO 30\n100  CALL 806\n150  PRINT  CHR$(4) BLOAD README,A$2000,TTXT \n200  HOME : FOR I = 1 TO 22: CALL 768: NEXT\n300  CALL 768: GET KEY$\n350  IF  ASC(KEY$) = 27 GOTO 500\n400  IF  PEEK(251)  0 GOTO 300\n500  PRINT  CHR$(4) bye \n1000  DATA 162,40,160,0,177,250,240,29,9,128,201,225,144,2,41,255,32,237,253,200,201,141,240,3,202,208,233,152,24,101,250,133,250,144,2,230,251,96,162,96,169,32,133,251,141,54,3,169\n1010  DATA 0,133,250,168,153,0,32,200,208,250,238,54,3,202,208,244,26,208,2,160,224,136,140,15,3,96,-1", 
            "title": "Examining a file"
        }, 
        {
            "location": "/ac/#get-a-raw-data-file", 
            "text": "The  -g  command gets a file in its raw form. To copy a file named  fred  from  misc.dsk  to a file named  ethel  on your file system, enter the command:  $ java -jar ac.jar -g misc.dsk fred   ethel  Because binary files are difficult to read, you may want to send the output to a program that can show the data in a hexadecimal format other than the one used with the  -e  option, above:  $ java -jar ac.jar -g misc.dsk fred | hexdump  Again, a sample run with the AppleSoft BASIC program from the ProDOS 2.4.2 image.  This time, however, you will see the tokenized program:  $ java -jar ac.jar -g ProDOS_2_4_2.dsk VIEW.README | hexdump -C\n00000000  29 08 0a 00 b2 56 49 45  57 2e 52 45 41 44 4d 45  |)....VIEW.README|\n00000010  20 42 59 20 4a 2e 42 52  4f 4f 4b 53 2e 20 39 2f  | BY J.BROOKS. 9/|\n00000020  31 35 2f 32 30 31 36 00  35 08 14 00 41 44 52 d0  |15/2016.5...ADR.|\n00000030  37 36 38 00 4b 08 1e 00  87 42 59 54 45 3a ad 42  |768.K....BYTE:.B|\n00000040  59 54 45 d1 30 c4 31 30  30 00 67 08 28 00 b9 41  |YTE.0.100.g.(..A|\n00000050  44 52 2c 42 59 54 45 3a  41 44 52 d0 41 44 52 c8  |DR,BYTE:ADR.ADR.|\n00000060  31 3a ab 33 30 00 70 08  64 00 8c 38 30 36 00 94  |1:.30.p.d..806..|\n00000070  08 96 00 ba e7 28 34 29  22 42 4c 4f 41 44 20 52  |.....(4) BLOAD R|\n00000080  45 41 44 4d 45 2c 41 24  32 30 30 30 2c 54 54 58  |EADME,A$2000,TTX| snip \n000001f0  30 2c 31 35 2c 33 2c 39  36 2c 2d 31 00 00 00 e8  |0,15,3,96,-1....|\n00000200", 
            "title": "Get a raw data file"
        }, 
        {
            "location": "/ac/#put-standard-input-onto-disk-image", 
            "text": "The  -p  command puts data from the standard input stream onto a disk image. Four parameters are used: imagename, filename, type, and address. If the address is omitted and one is required, $2000 is assumed. Suppose  ethel  is a binary file meant to start at address 2048 ($800 or 0x800). To put the binary file named  ethel  back into a file named  fred  with that starting address on the DOS image named  misc.dsk :  $ java -jar ac.jar -p misc.dsk fred B 0x800   ethel  Alternatively, suppose  ethel  is a binary starting at 2048 destined for  fred  on a ProDOS image named  p1.po :  $ java -jar ac.jar -p p1.po fred bin 2048   ethel", 
            "title": "Put standard input onto disk image"
        }, 
        {
            "location": "/ac/#put-standard-input-with-dos-33-header-onto-disk-image", 
            "text": "The  -dos  command is like  -p , but it assumes the input stream includes a four-byte header, as generated by older versions of  cc65 . Three parameters are required: imagename, filename, and type. The start address is taken from bytes 0-1 of the header. To put the DOS binary named  ethel  into a file named  fred  on the DOS image named  misc.dsk :  $ java -jar ac.jar -cc65 misc.dsk fred B   ethel", 
            "title": "Put standard input with DOS 3.3 header onto disk image"
        }, 
        {
            "location": "/ac/#put-standard-input-in-applesingle-format-onto-disk-image", 
            "text": "The  -as  command is like  -p , but it assumes the input stream is in the AppleSingle format, as generated by newer versions of  cc65  ( see ticket #20 ). The parameters are imagename (required) and, optionally, filename. The AppleSingle format supports a filename entry, but it is not always populated.  To put the AppleSingle binary named  ethel  into a file named  fred  on the ProDOS image named  misc.dsk :  $ java -jar ac.jar -as misc.dsk fred   ethel", 
            "title": "Put standard input in AppleSingle format onto disk image"
        }, 
        {
            "location": "/ac/#putting-files-and-file-types", 
            "text": "As another example, consider the text file named  foo.text  and the Pascal image named  src.po :  $ java -jar ac.jar -p p2.po foo.text text   foo.text  Valid file types are specific to each operating system:     Operating System  File Types      DOS 3.x  A ,  B ,  I ,  T ,  S ,  R ,  a ,  b .    Pascal  bad ,  code ,  text ,  info ,  data ,  graf ,  foto .    ProDOS  bas ,  bin ,  sys ,  txt ,  rel , etc.; see  ProdosFileTypes.properties  for more.", 
            "title": "Putting files and file types"
        }, 
        {
            "location": "/ac/#delete-a-file", 
            "text": "The  -d  command deletes a file from an image:  $ java -jar ac.jar -d misc.dsk fred", 
            "title": "Delete a file"
        }, 
        {
            "location": "/ac/#copying-a-file-between-disks", 
            "text": "To copy a file from one image to another, do something like this:  $ java -jar ac.jar -g one.dsk fred | java -jar ac.jar -p another.dsk fred bin 2048", 
            "title": "Copying a file between disks"
        }, 
        {
            "location": "/ac/#locking-and-unlocking-a-file", 
            "text": "The  -k  and  -u  commands lock and unlock a file on the given image:  $ java -jar ac.jar -k misc.dsk fred\n$ java -jar ac.jar -u misc.dsk fred", 
            "title": "Locking and unlocking a file"
        }, 
        {
            "location": "/ac/#change-a-volume-name", 
            "text": "The  -n  command changes the volume name on an image. Only ProDOS and Pascal images are affected:  $ java -jar ac.jar -n misc.po name", 
            "title": "Change a volume name"
        }, 
        {
            "location": "/ac/#further-details", 
            "text": "Here's a more comprehensive example of using AppleCommander for  cross-platform development .  It's also possible to invoke the command line functions from within the ant build environment by using AppleCommander's  ant interface .  The  -geos  transfer file format is specified in  Apple GEOS CONVERT Format .", 
            "title": "Further details"
        }, 
        {
            "location": "/ac/#known-problems-limitations", 
            "text": "To replace an existing file on an image, you must delete it first;  ac  will create as many duplicate entries as you specify, only one of which will be accessible to the operating system.  Given a ProDOS image, a full pathname may be specified for the  -e ,  -g ,  -p ,  -d ,  -k ,  -u ,  -dos , and  -as  options. Files can only be put into an existing directory.", 
            "title": "Known problems &amp; limitations"
        }, 
        {
            "location": "/dev-notes/maven/", 
            "text": "AppleCommander\n\n\nThe AppleCommander libraries are available in the Maven repository:\n\n\ndependency\n\n \ngroupId\nnet.sf.applecommander\n/groupId\n\n \nartifactId\nAppleCommander\n/artifactId\n\n \nversion\n1.4.0\n/version\n\n\n/dependency\n\n\n\n\n\n\n\nNote that as of 1.4.0, the Shrinkit library is a separate project and is in the \npom.xml\n\nas a dependency.\n\n\n\n\nShrinkItArchive\n\n\nThe Shrinkit libary is available as a separate dependency:\n\n\ndependency\n\n \ngroupId\nnet.sf.applecommander\n/groupId\n\n \nartifactId\nShrinkItArchive\n/artifactId\n\n \nversion\n1.1.0\n/version\n\n\n/dependency\n\n\n\n\n\nFinal Notes\n\n\nThis is a manual release process, so it may take a bit of time (and possibly some prodding).\n\n\nNotes:\n\n\n\n\nThere are no plans to change from \nnet.sf.applecommander\n in the GAV. (It should have been \ncom.webcodepro.applecommander\n, however, that domain was given up long ago.)\n\n\nThe Java packages will remain \ncom.webcodepro.applecommander\n as everyone depends on that package scheme.", 
            "title": "Maven GAV"
        }, 
        {
            "location": "/dev-notes/maven/#applecommander", 
            "text": "The AppleCommander libraries are available in the Maven repository:  dependency \n  groupId net.sf.applecommander /groupId \n  artifactId AppleCommander /artifactId \n  version 1.4.0 /version  /dependency    Note that as of 1.4.0, the Shrinkit library is a separate project and is in the  pom.xml \nas a dependency.", 
            "title": "AppleCommander"
        }, 
        {
            "location": "/dev-notes/maven/#shrinkitarchive", 
            "text": "The Shrinkit libary is available as a separate dependency:  dependency \n  groupId net.sf.applecommander /groupId \n  artifactId ShrinkItArchive /artifactId \n  version 1.1.0 /version  /dependency", 
            "title": "ShrinkItArchive"
        }, 
        {
            "location": "/dev-notes/maven/#final-notes", 
            "text": "This is a manual release process, so it may take a bit of time (and possibly some prodding).  Notes:   There are no plans to change from  net.sf.applecommander  in the GAV. (It should have been  com.webcodepro.applecommander , however, that domain was given up long ago.)  The Java packages will remain  com.webcodepro.applecommander  as everyone depends on that package scheme.", 
            "title": "Final Notes"
        }, 
        {
            "location": "/dev-notes/uml/", 
            "text": "Disk and FormattedDisk\n\n\nGenerally, a \nDisk\n represents an Apple ][ disk image.  This can be size, any order, and any\nformat.  The \nDisk\n class itself manages the varying disk order (DOS, ProDOS, or their variants)\nsimply by the file extension.  \nDisk\ns that are formatted with an operating system are managed\nby the subclasses of \nFormattedDisk\n.  The general user interface(s) can then work with a\n\nFormattedDisk\n without knowing about the specific operating system.\n\n\n\n\nSomewhat surprisingly, a \nDisk\n can contain multiple \nFormattedDisk\ns.  By structuring the disk image\nin this manner, the 800K DOS formats can be accommodated (yielding two 400K DOS \nFormattedDisk\ns -\nwhich models the physical behavior rather nicely).  Additionally, other configurations\ncan be accommodated in the future - Pascals multiple volume configuration or a ProDOS volume\nhosting DOS 3.3 and/or Pascal volumes.\n\n\nFileEntry\n\n\nEach \nDisk\n contains multiple files.  The file is represented by a \nFileEntry\n.  You will note that\nthe attributes exposed by the \nFileEntry\n interface are pretty generic.  To accommodate the various\nviews available, the \ngetFileColumnData\n method was added.  This method will, depending on the\nsetting, return a standard view, a native view (mimics the native catalog/directory display), and\na detailed view (giving all available data on the files).\n\n\n\n\nFileFilter\n\n\nIn order to allow AppleCommander to export files easily, the concept of a \nFileFilter\n was added.\nA \nFileFilter\n simply takes the raw data from the \nFileEntry\n and then processes it according to the\nfilter.  Adding new filters is as easy as implementing the \nFileFilter\n interface and then hooking\nit into the user interface!\n\n\n\n\nProdosCommonEntry\n\n\nJust to be complete, ProDOS yielded itself to a simple object hierarchy.", 
            "title": "UML diagrams"
        }, 
        {
            "location": "/dev-notes/uml/#disk-and-formatteddisk", 
            "text": "Generally, a  Disk  represents an Apple ][ disk image.  This can be size, any order, and any\nformat.  The  Disk  class itself manages the varying disk order (DOS, ProDOS, or their variants)\nsimply by the file extension.   Disk s that are formatted with an operating system are managed\nby the subclasses of  FormattedDisk .  The general user interface(s) can then work with a FormattedDisk  without knowing about the specific operating system.   Somewhat surprisingly, a  Disk  can contain multiple  FormattedDisk s.  By structuring the disk image\nin this manner, the 800K DOS formats can be accommodated (yielding two 400K DOS  FormattedDisk s -\nwhich models the physical behavior rather nicely).  Additionally, other configurations\ncan be accommodated in the future - Pascals multiple volume configuration or a ProDOS volume\nhosting DOS 3.3 and/or Pascal volumes.", 
            "title": "Disk and FormattedDisk"
        }, 
        {
            "location": "/dev-notes/uml/#fileentry", 
            "text": "Each  Disk  contains multiple files.  The file is represented by a  FileEntry .  You will note that\nthe attributes exposed by the  FileEntry  interface are pretty generic.  To accommodate the various\nviews available, the  getFileColumnData  method was added.  This method will, depending on the\nsetting, return a standard view, a native view (mimics the native catalog/directory display), and\na detailed view (giving all available data on the files).", 
            "title": "FileEntry"
        }, 
        {
            "location": "/dev-notes/uml/#filefilter", 
            "text": "In order to allow AppleCommander to export files easily, the concept of a  FileFilter  was added.\nA  FileFilter  simply takes the raw data from the  FileEntry  and then processes it according to the\nfilter.  Adding new filters is as easy as implementing the  FileFilter  interface and then hooking\nit into the user interface!", 
            "title": "FileFilter"
        }, 
        {
            "location": "/dev-notes/uml/#prodoscommonentry", 
            "text": "Just to be complete, ProDOS yielded itself to a simple object hierarchy.", 
            "title": "ProdosCommonEntry"
        }, 
        {
            "location": "/dev-notes/ant/", 
            "text": "The distribution file \nAppleCommander-version-ac.jar\n provides an Ant task that can be used as part of Ant-based builds.\n\n\nUsing the Apple Commander Ant task\n\n\nThe AppleCommander Ant task mirrors the \nac\n command line as much as possible. The advantage over using the ant task over simply calling the AppleCommander command line directly is speed. It is much faster to call on the Ant task than it is for ant to shell out to the system, fire up a Java instance, and then execute your command.\nAs with any external ant task, the first thing that must be done is to declare a \ntaskdef\n:\n\n\ntaskdef name=\nappleCommander\n\n         classname=\ncom.webcodepro.applecommander.ui.AntTask\n\n         classpath=\nAppleCommander-${version}-ac.jar\n/\n\n\n\n\n\nWhere \n${version}\n would need to be defined by you to be the version of the command-line AppleCommander you are using. The first version of the AC command line that included this Ant task support is 1.3.5.13.\n\n\nOnce you have the \ntaskdef\n defined, it can be called from within ant like this:\n\n\n!-- Call AppleCommander to print information about the disk image --\n\n\nappleCommander command=\ni\n imagename=\n${myDiskImage}\n /\n\n\n\n\n\nThe values for command that the ant task understands generally mirror those of the command line. Here's a list of them, along with their required and optional parameters:\n\n\ni  \nimagename\n display information about an image.\nls \nimagename\n list brief directory of an image.\nl  \nimagename\n list directory of an image.\nll \nimagename\n list detailed directory of an image.\ne  \nimagename\n \nfilename\n [\noutput\n] export file from image to stdout or to an output file.\nx  \nimagename\n [\noutputpath\n] extract all files from image to outputpath, or the current working directory if blank.\ng  \nimagename\n \nfilename\n [\noutput\n] get raw file from image to stdout or to an output file.\np  \nimagename\n \nfilename\n \ntype\n [[$|0x]\naddr\n] put stdin in filename on image, using file type and address [0x2000].\nd  \nimagename\n \nfilename\n delete file from image.\nk  \nimagename\n \nfilename\n lock file on image.\nu  \nimagename\n \nfilename\n unlock file on image.\nn  \nimagename\n \nvolname\n change volume name (ProDOS or Pascal).\ndos \nimagename\n \nfilename\n \ntype\n put stdin with DOS header in filename on image, using file type and address from header.\nas \nimagename\n [\nfilename\n] put stdin with AppleSingle format on image.\ndos140 \nimagename\n create a 140K DOS 3.3 image.\npro140 \nimagename\n \nvolname\n create a 140K ProDOS image.\npro800 \nimagename\n \nvolname\n create an 800K ProDOS image.\npas140 \nimagename\n \nvolname\n create a 140K Pascal image.\npas800 \nimagename\n \nvolname\n create an 800K Pascal image.\nconvert \nfilename\n \nimagename\n [\nsizeblocks\n] uncompress a ShrinkIt or Binary II file; or convert a DiskCopy 4.2 image into a ProDOS disk image.\n\n\n\n\nFor the commands that require a type parameter, their values depend on the operating system of the underlying image's operating system:\n\n\nDOS 3.x: A, B, I, T, S, R, a, b.\nPascal: bad, code, text, info, data, graf, foto.\nProDOS: bas, bin, sys, txt, rel, etc.; see ProdosFileTypes.properties for more.\n\n\n\n\nIn order to feed AppleCommander standard input, a file would be specified with the input parameter for the task - like this:\n\n\nappleCommander command=\np\n\n                input=\nmanifest.mf\n\n                imagename=\n${myDiskImage}\n\n                filename=\nMANIFEST\n\n                type=\nT\n /\n\n\n\n\n\nIn order to extract a file from an image to a real file, the real file would be specified with the output parameter for the task - like this:\n\n\nappleCommander command=\ng\n\n                imagename=\n${myDiskImage}\n\n                filename=\nMANIFEST\n\n                output=\nmanifest.mf\n /\n\n\n\n\n\nAppleCommander ant tasks can be told to ignore errors with the \nfailonerror\n parameter:\n\n\nappleCommander command=\np\n\n                failonerror=\nfalse\n\n                input=\n${hugeFileExpectFailure}\n\n                imagename=\n${pro800image}\n\n                filename=\nBLOWUP\n\n                type=\ntxt\n /", 
            "title": "Ant Task"
        }, 
        {
            "location": "/dev-notes/ant/#using-the-apple-commander-ant-task", 
            "text": "The AppleCommander Ant task mirrors the  ac  command line as much as possible. The advantage over using the ant task over simply calling the AppleCommander command line directly is speed. It is much faster to call on the Ant task than it is for ant to shell out to the system, fire up a Java instance, and then execute your command.\nAs with any external ant task, the first thing that must be done is to declare a  taskdef :  taskdef name= appleCommander \n         classname= com.webcodepro.applecommander.ui.AntTask \n         classpath= AppleCommander-${version}-ac.jar /   Where  ${version}  would need to be defined by you to be the version of the command-line AppleCommander you are using. The first version of the AC command line that included this Ant task support is 1.3.5.13.  Once you have the  taskdef  defined, it can be called from within ant like this:  !-- Call AppleCommander to print information about the disk image --  appleCommander command= i  imagename= ${myDiskImage}  /   The values for command that the ant task understands generally mirror those of the command line. Here's a list of them, along with their required and optional parameters:  i   imagename  display information about an image.\nls  imagename  list brief directory of an image.\nl   imagename  list directory of an image.\nll  imagename  list detailed directory of an image.\ne   imagename   filename  [ output ] export file from image to stdout or to an output file.\nx   imagename  [ outputpath ] extract all files from image to outputpath, or the current working directory if blank.\ng   imagename   filename  [ output ] get raw file from image to stdout or to an output file.\np   imagename   filename   type  [[$|0x] addr ] put stdin in filename on image, using file type and address [0x2000].\nd   imagename   filename  delete file from image.\nk   imagename   filename  lock file on image.\nu   imagename   filename  unlock file on image.\nn   imagename   volname  change volume name (ProDOS or Pascal).\ndos  imagename   filename   type  put stdin with DOS header in filename on image, using file type and address from header.\nas  imagename  [ filename ] put stdin with AppleSingle format on image.\ndos140  imagename  create a 140K DOS 3.3 image.\npro140  imagename   volname  create a 140K ProDOS image.\npro800  imagename   volname  create an 800K ProDOS image.\npas140  imagename   volname  create a 140K Pascal image.\npas800  imagename   volname  create an 800K Pascal image.\nconvert  filename   imagename  [ sizeblocks ] uncompress a ShrinkIt or Binary II file; or convert a DiskCopy 4.2 image into a ProDOS disk image.  For the commands that require a type parameter, their values depend on the operating system of the underlying image's operating system:  DOS 3.x: A, B, I, T, S, R, a, b.\nPascal: bad, code, text, info, data, graf, foto.\nProDOS: bas, bin, sys, txt, rel, etc.; see ProdosFileTypes.properties for more.  In order to feed AppleCommander standard input, a file would be specified with the input parameter for the task - like this:  appleCommander command= p \n                input= manifest.mf \n                imagename= ${myDiskImage} \n                filename= MANIFEST \n                type= T  /   In order to extract a file from an image to a real file, the real file would be specified with the output parameter for the task - like this:  appleCommander command= g \n                imagename= ${myDiskImage} \n                filename= MANIFEST \n                output= manifest.mf  /   AppleCommander ant tasks can be told to ignore errors with the  failonerror  parameter:  appleCommander command= p \n                failonerror= false \n                input= ${hugeFileExpectFailure} \n                imagename= ${pro800image} \n                filename= BLOWUP \n                type= txt  /", 
            "title": "Using the Apple Commander Ant task"
        }, 
        {
            "location": "/javadoc/", 
            "text": "Javadoc is available separately.  Please open \nthis Javadoc link in a new window\n.", 
            "title": "Javadoc"
        }, 
        {
            "location": "/history/current/", 
            "text": "Please visit the \ninstalling AppleCommander page\n for installation instructions.\n\n\nTo download the most recent version of AppleCommander, please visit the \nreleases tab\n at our GitHub page!", 
            "title": "Current releases"
        }, 
        {
            "location": "/history/version13514/", 
            "text": "Pulled from \nCall-A.P.P.L.E.\n.\n\n\n\n\nAppleCommander, the java based floppy viewing software has been updated.  Dr. John B. Matthews has put forth version 1.3.5.14 which is intended to address a freezing issue which has been in many early versions.  The issue addressed in the update affected SWT and has long forced users to to FORCE QUIT the application.  The new version has been confirmed to work on all versions of Mac OS X from 10.5.x to 10.9.x.\n\n\nAppleCommander is a floppy disk image viewer which allows users to check the contents of Apple II Disk images, manipulate files, change disk ordering and save the disk images to the users local drive. For more information or to download the latest build, check out the AppleCommander\nwebsite at:\n\n\n\n\nhttps://sites.google.com/site/drjohnbmatthews/applecommander", 
            "title": "1.3.5.14 (27-Nov-2013)"
        }, 
        {
            "location": "/history/version135/", 
            "text": "A new release of AppleCommander is available!\n\n\nVersion 1.3.5 adds support for cc65 and improves support for Apple UCSD Pascal 800K images and Mac OS X.\n\n\nAppleCommander is hosted on SourceForge. The home page is located at:\n\n\nhttp://applecommander.sourceforge.net/\n\n\n\nThe SourceForge project page is located at:\n\n\nhttp://sourceforge.net/projects/applecommander/\n\n\n\nThe files are located at:\n\n\nhttp://sourceforge.net/project/showfiles.php?group_id=67414\n\n\n\nNew for version 1.3.5 (2008-06-01):\n\n\n\n\nAdded -cc65 option to use header information for start address.\n\n\nFixed a bug in which DosFormatDisk.createFile() was iterating tracks instead of sectors.\n\n\nFixed a related bug in which the DOS start address wasn't set correctly when recycling a previously used directory entry.\n\n\nEnabled 800K Pascal disk images; added Pascal unit tests.\n\n\nAdded command-line guide to web site.\n\n\n\n\n[fin]", 
            "title": "1.3.5 (01-Jun-2008)"
        }, 
        {
            "location": "/history/version134/", 
            "text": "A new release of AppleCommander is available!\n\n\nVersion 1.3.4 adds support for Apple Pascal 800K images; OS X issues resolved; Pascal images are now writable; and some work towards internationalization has been done.\n\n\nAppleCommander is hosted on SourceForge. The home page is located at:\n\n\nhttp://applecommander.sourceforge.net/\n\n\n\nThe SourceForge project page is located at:\n\n\nhttp://sourceforge.net/projects/applecommander/\n\n\n\nThe files are located at:\n\n\nhttp://sourceforge.net/project/showfiles.php?group_id=67414\n\n\n\nIf you're interested, please take a peek and let me know what you think! Contributions are more than welcome. If anyone wants to create an engaging GUI, that would be a great addition. Any anything else you think should be in AppleCommander...\n\n\n-Rob\n\n\nNew for version 1.3.4 (2007-03-31):\n\n\n\n\nStarted using the SWT S-Leak application to test for application resource leakage.\n\n\nReports of a few issues with 800K images. UniDOS in particular doesn't appear to be recognized appropriately. This was due to a mix-up in setting the the image ordering.\n\n\nFixed the bug where the import of a binary file does not set the address for DOS images.\n\n\nFixed bug that where a file could not be exported as raw binary. (Crashed AppleCommander.)\n\n\nRaw binary files may now be imported - just check the raw image checkbox in the import wizard.\n\n\nPrepare for internationalization (I18N). Started as a simplification process but it got carried away. Text is stored in text bundles throughout the code. The files end with \n____Bundle.properties\n. The groupings are Storage, Compiler, Ui, and Text; directories relate to the package. Contributions are more than welcome seeing as I know very little German and it's unlikely that I'll get my wife to spend time translating to Spanish.\n\n\nUpdates per Eclipse 3.0 recommendations.\n\n\nResolve OS X issues where window cannot come to the foreground. (J Matthews)\n\n\nAdd Apple Pascal writing capability. (J Matthews)\n\n\n\n\n[The End.]", 
            "title": "1.3.4 (31-Mar-2007)"
        }, 
        {
            "location": "/history/version133/", 
            "text": "A new release of AppleCommander is available!\n\n\nVersion 1.3.3 adds support for Apple Pascal .text files; also added support for Assembly source file viewing. Scrollbar increments are now sensible.\n\n\nAppleCommander is hosted on SourceForge. The home page is located at:\n\n\nhttp://applecommander.sourceforge.net/\n\n\n\nThe SourceForge project page is located at:\n\n\nhttp://sourceforge.net/projects/applecommander/\n\n\n\nThe files are located at:\n\n\nhttp://sourceforge.net/project/showfiles.php?group_id=67414\n\n\n\nIf you're interested, please take a peek and let me know what you think!\n\n\n-Rob\n\n\nNew for version 1.3.3 (2004-06-18):\n\n\n\n\nRepackage code - packages were getting a bit large. The goal is to make class structure/placement more logical. GUI:\n\n\nMoved the SWT wizards into their own packages;\n\n\nSeparated utility classes into the util package;\n\n\nMain application windows remain in swt package.\n\n\n\n\n\n\nStorage:\n\n\nMoved OS formats into their respective packages in the \"os\" package (\ndos33\n, \nprodos\n, \ncpm\n, \nrdos\n, \npascal\n);\n\n\nFilters are now in the filters package;\n\n\nGeneral storage classes remain under storage (\nDisk\n, \nFormattedDisk\n, etc).\n\n\n\n\n\n\nAdded formatted assembly \nFileFilter\n. Understands Merlin format source files. Need to recognize various formats - \nT.*\n, \n*.S\n, etc. Need examples for other formats (Orca, APW, etc).\n\n\nFile viewer window now scrolls an appropriate amount: PgUp/PgDn, arrows, mouse wheel all work (must select content area first of course).\n\n\nWizard windows no longer show up with the title bar off the screen.\n\n\nRefactored \nFileViewerWindow\n. Created supporting \nFilterAdapter\n classes as well as (presumably) reusable \nContentAdapters\n. Started caching the filtered content for a little speed improvement when switching filters (native, hex, raw) in the \nFileView\n.\n\n\nHans Otten provided information on Apple Pascal's formatting of \n.text\n files - they are now read correctly with appropriate character spacing and header section is ignored.\n\n\nFixed error where viewing an invalid graphics file crashed AppleCommander (typically was too short). This can be done by context menu -\n View As -\n Graphics.\n\n\nFurther automated build (and web site) deployment. Ant now builds source zip, GUI JAR, command-line jar, javadoc, and website. Website zip file only needs to be extracted into the web root to be deployed. Windows executable is scripted but not plugged into the Ant script at this time.\n\n\n\n\n[The End.]", 
            "title": "1.3.3 (18-Jun-2004)"
        }, 
        {
            "location": "/history/version132/", 
            "text": "A new release of AppleCommander is available!\n\n\nVersion 1.3.2 adds support for the nibble disk image order as well as support for read-only CP/M disks. SHR 3200-color graphics capability also.\n\n\nAppleCommander is hosted on SourceForge. The home page is located at:\n\n\nhttp://applecommander.sourceforge.net/\n\n\n\nThe SourceForge project page is located at:\n\n\nhttp://sourceforge.net/projects/applecommander/\n\n\n\nThe files are located at:\n\n\nhttp://sourceforge.net/project/showfiles.php?group_id=67414\n\n\n\nIf you're interested, please take a peek and let me know what you think!\n\n\n-Rob\n\n\nNew for version 1.3.2 (2004-06-05):\n\n\n\n\nPrint file listing or full disk listing (including subdirectories or multiple volumes).\n\n\nAdded support for Super Hi-Res 3200 color format (PIC of 38400 bytes, file type $C1 and auxiliary type $0002).\n\n\nUpdated preferences to remember the following directory locations:\n\n\nOpen\n\n\nSave/Save As (new)\n\n\nImport (new)\n\n\nExport\n\n\nCompile\n\n\n\n\n\n\nAdded support for Finder Icons File ($CA or \"ICN\").\n\n\nAdded CP/M disk image support.\n\n\nRestructured how AppleCommander manages disk ordering. This simplifies the manner in which various disk ordering schemes are implemented, and makes it possible to translate between ordering schemes.\n\n\nSupport for nibble images (\n*.NIB\n) added. Can read and write to the images as long as that format supports writing.\n\n\nTo support nibble images, changed the structure surrounding the disk image for a Disk. There now is an \nImageOrder\n which manages the ordering of data on the image and supplies low-level read and write routines (track/sector and block). An \nImageOrder\n holds data in an image layout - this allows the generic byte array and 2IMG layouts to be abstracted away from an images order. This does add interaction complexity but actually simplified the Disk class.\n\n\nViewing or double-clicking on a directory will navigate into that directory.\n\n\nViewing a deleted file no longer crashes AppleCommander - a warning message is displayed.\n\n\nUpdated Export Graphics wizard and export right-click options.\n\n\nAdd the ability to change physical order too (DOS \n=\n ProDOS \n=\n Nibble) on 140KB images.\n\n\nAdd ability to compare disks - regardless of physical order.\n\n\nStarted using Gimp for images (instead of Microsoft Photo Draw 2).\n\n\nAdded a \"View As\" menu pick in context menu. (Just Text or Graphics at this time.)\n\n\n\n\n[The End.]", 
            "title": "1.3.2 (05-Jun-2004)"
        }, 
        {
            "location": "/history/version131/", 
            "text": "A new release of AppleCommander is available!\n\n\nVersion 1.3.1 introduces file viewing as well as John Matthews command-line version of AppleCommander (\nac\n). The beginnings of an AppleSoft compiler have been added (strictly beta and incomplete). Full gory details are listed below for both the unannounced 1.3.0 as well as the current 1.3.1.\n\n\nAppleCommander is hosted on SourceForge. The home page is located at:\n\n\nhttp://applecommander.sourceforge.net/\n\n\n\nThe SourceForge project page is located at:\n\n\nhttp://sourceforge.net/projects/applecommander/\n\n\n\nThe files are located at:\n\n\nhttp://sourceforge.net/project/showfiles.php?group_id=67414\n\n\n\nJohn Matthews' command-line \"ac\" utility is available at:\n\n\nhttp://www.wright.edu/~john.matthews/ac.html\n\n\n\nIf you're interested, please take a peek and let me know what you think!\n\n\n-Rob\n\n\nNew for version 1.3.1 (2003-12-12):\n\n\n\n\nShort-cut keys have been implemented.\n        From AppleCommander window:\n        - CTRL+O = Open a disk image\n        - CTRL+C = Create a new disk image\n        - CTRL+A = About...\n\n\n\n\n\n\nFrom disk window\n        - Toolbar shortcuts:\n            - F2 = Standard file view\n            - F3 = Native file view\n            - F4 = Detail file view\n            - F5 = Show deleted files\n            - CTRL+I = Import files wizard\n            - CTRL+S = Save\n            - CTRL+SHIFT+S = Save As\n        - Directory shortcuts (in addition to toolbar shortcuts)\n            - \"+\" = expand one level\n            - \"-\" = close one level\n            - CTRL+\"+\" = expand fully\n            - CTRL+\"-\" = close fully\n        - File shortcuts (in addition to toolbar shortcuts)\n            - CTRL+E = Export file wizard\n            - CTRL+C = Compile BASIC program (BETA)\n            - CTRL+V = View file (later version)\n            - CTRL+D = Delete file\n\n\n\n\n\n\nSpent time ensuring that buttons, context menus, and shortcuts are enabled or disabled as appropriate.\n\n\nSave does not allow the disk image location to be chosen for new images:\n\n\nImplemented Save As\n\n\nA save on a new image invokes Save As\n\n\n\n\n\n\nFile preview supports:\n\n\nBASIC programs (Applesoft and Integer BASIC); Applesoft BASIC is colored\n\n\nGraphics images (same as supported by the graphics export function)\n\n\nAppleworks (database, spreadsheet, word processor)\n\n\nText files\n\n\nHex dump of all the above\n\n\n\"Raw\" format of all of the above; this includes all data as read from disk including length and starting address as well as full sectors/blocks\n\n\nShortcuts available:\n\n\nF2 = Native format view (as applicable)\n\n\nF3 = Hex dump view\n\n\nF4 = Raw hex dump of disk bytes (includes length or address start along with all bytes stored on disk - a multiple of 256 or 512 depending on disk format)\n\n\nCTRL+A = Select all (only text formats)\n\n\nCTRL+C = Copy to clipboard (only text formats)\n\n\nCTRL+P = Print\n\n\n\n\n\n\n\n\n\n\nPrinting is available from the file preview.\n\n\nCopy is avilable from file preview except for images.\n\n\nOpening an invalid disk image (or a file that is not a disk image) no longer crashes AppleCommander.\n\n\nProvide a command-line interface - John Matthews \"ac\" is now supplied as part of the AppleCommander distribution. If AppleCommander gets no command-line arguments, the GUI version is launched. Otherwise, AppleCommander reserves the following messages:\n\n\n-swt\n = force SWT version\n\n\n-swing\n = force Swing version (N/A - may be removed)\n\n\n-command\n = force command interpreter (not done - may be superseded by the \"ac\" utility)\n\n\n-help\n or -? = general help messages\n\n\nEverything else is passed on to John's \"ac\" command-line version (from the application help):\n\n\nAppleCommander command line options:\n\n\n-l\n list directory of image.\n\n\n-e\n export file from image to stdout.\n\n\n-g\n get raw file from image to stdout.\n\n\n-p\n put stdin in destname on image, using file type and address.\n\n\n-d\n delete file from image.\n\n\n-p140\n create a 140K ProDOS image.\n\n\n-p800\n create a 800K ProDOS image.\n\n\n\n\n\n\n\n\n\n\n\n\nNew for version 1.3.0 (2003-12-05):\n\n\n\n\nHDV disks are not always created to their full capacity. AppleCommander, however, assumes that the size of the file on disk is the size of the disk. (Really!) This is an issue because the ProDOS bitmap indicates there is a certain amount of space and AppleCommander just assumes that the data exists.\n\n\n\n\nIncorporated fixes from John Matthews. See:\n\n\nhttp://www.wright.edu/~john.matthews/ac.html\n\n\n\n\n\n\n\nEarly release of Applesoft BASIC compiler. This currently is limited to assembly of small programs. If a command is not compiled, you are likely to just get an error about expecting a line number. Expressions are not very complete. Supported commands are:\n\n\nEND, FLASH, FOR, GOTO, GR, HCOLOR, HGR, HGR2, HOME, HPLOT, HTAB, INVERSE, NEXT, NORMAL, PRINT, RETURN, TEXT, VTAB\n\n\n\n\n\n\n\nUnsupported commands are:\n\n\nABS, AND, ASC, AT, ATN, CALL, CHR$, CLEAR, COLOR=, CONT, COS, DATA, DEF, DEL, DIM, DRAW, EXP, FN, FRE, GET, GOSUB, GR, HIMEM:, HLIN, IF, IN#, INPUT, INT, LEFT$, LEN, LET, LIST, LOAD, LOG, LOMEM:, MID$, NEW, NOT, NOTRACE, ON, ONERR, OR, PDL, PEEK, PLOT, POKE, POP, POS, PR#, READ, RECALL, REM, RESTORE, RESUME, RIGHT$, RND, ROT=, RUN, SAVE, SCALE=, SCRN, SGN, SHLOAD, SIN, SPC, SPEED=, SQR, STEP, STOP, STORE, STR$, TAB, TAN, THEN, TO, TRACE, USR, VAL, VLIN, WAIT, XDRAW, \n\n\n\n\n\n\n\n\nNote that the compiler is not very sophisticated.\n\n\n\n\nUpdated build notes and process.\n\n\nDELETE does not seem to delete in all circumstances. (JM caught this one.)\n\n\n\n\n[The End.]", 
            "title": "1.3.1 (12-Dec-2003)"
        }, 
        {
            "location": "/history/version130/", 
            "text": "Very early release of an Applesoft BASIC compiler; John Matthews' bug fixes have been incorporated; Chris Sebrell's fixes have been incorporated.", 
            "title": "1.3.0 (04-Dec-2003)"
        }, 
        {
            "location": "/history/version123/", 
            "text": "A new release of AppleCommander is available! Version 1.2.3 concentrated work on being able to build a Windows executable.\n\n\n\n\nSeparated image support for GraphicsFileFilter. This allows easier preparation for compiling AppleCommander as a Windows executable (and allows limited image support to boot).\n\n\nCompile into native executable (Windows works now).\n\n\nWork on identifying why GCJ introduces slow performance to some areas. This appears to be resolved with an early build of GCJ 3.3.\n\n\n\n\nAppleCommander is hosted on SourceForge. The home page is located at:\n\n\nhttp://applecommander.sourceforge.net/\n\n\n\nThe SourceForge project page is located at:\n\n\nhttp://sourceforge.net/projects/applecommander/\n\n\n\nThe files are located at:\n\n\nhttp://sourceforge.net/project/showfiles.php?group_id=67414\n\n\n\nIf you're interested, please take a peek and let me know what you think!\n\n\n-Rob", 
            "title": "1.2.3 (13-Apr-2003)"
        }, 
        {
            "location": "/history/version122/", 
            "text": "A new release of AppleCommander is available! Version 1.2.2 continues on the general cleanup. One new export filter of a generalized hex dump has been added and quite a bit of work in relation to ProDOS volumes.\n\n\n\n\nProDOS disks now re-use deleted file entries. Prior to this fix, deleted entries were never re-used. If importing many files, a \"Disk Full\" error would be generated rather quickly.\n\n\nProDOS file entries do not generate spurious file entries. There was no method of detecting unused entries in pre-1.2.2 code.\n\n\nImport file specification should only allow address editing if the filetype requires it.\n\n\nFixed parsing of filetype definitions for ProDOS volumes.\n\n\nNeed to be able to import into a directory in ProDOS. This will most likely involve adding an interface indicating a (writable) directory. This interface would be applied to both disks as well as file entries, if appropriate.\n\n\nProDOS subdirectories need to allocate another block as they fill up; otherwise the directory is limited to the number of entries that fit within the allocated space.\n\n\nImport now sports a progress indicator and identifies which file is being imported.\n\n\nPopup dialogs are now centered above the controlling window instead of popping up randomly.\n\n\nAdded a Hex Dump file filter that displays offset into file, hex bytes, and the ASCII code.\n\n\nAppleCommander is now being built by an ANT script instead of by the Eclipse menu pick.\n\n\n\n\nI'm still putzing with a compiled version for Linux and Windows, so they haven't shown up as of yet. (Unchanged - but not forgotten.)\n\n\nAppleCommander is hosted on SourceForge. The home page is located at:\n\n\nhttp://applecommander.sourceforge.net/\n\n\n\nThe SourceForge project page is located at:\n\n\nhttp://sourceforge.net/projects/applecommander/\n\n\n\nThe files are located at:\n\n\nhttp://sourceforge.net/project/showfiles.php?group_id=67414\n\n\n\nIf you're interested, please take a peek and let me know what you think!\n\n\n-Rob", 
            "title": "1.2.2 (15-Mar-2003)"
        }, 
        {
            "location": "/history/version121/", 
            "text": "A new release of AppleCommander is available. Version 1.2.1 is primarily a clean-up operation. However, there is a bit of new functionality - AppleWorks Spread Sheet (ASP) and Data Base (ADB) files can both be exported to a \n*.csv\n file format.\n\n\n\n\nNow carries margin setting through, sets font to Courier New (more realistic formatting), and fixes boldface not being turned off correctly when converting AWP files to RTF format.\n\n\nImport could/should choose the filetype based upon the file extension for files being imported. Mostly useful for ProDOS; unless a filetype mapping is introduced.\n\n\nExport of AppleWorks Data Base files.\n\n\nExport of AppleWorks Spread Sheet files.\n\n\nFixed minor issue with ProDOS disks where files at the 128K border would be grown (incorrectly) into a Tree file (instead of a Sapling).\n\n\nImport of multiple files fails after multiple imports. This was an issue with ProDOS files \n128K (\"Tree\" files). The delete code didn't handle the master index block appropriately when blocks numbered zero were present (normally indicating the end of file).\n\n\nDOS 3.3 was not writing correct number of sectors if a file was more than 256 sectors long.\n\n\nDOS 3.3 was not managing deleted file entries appropriately and tried to work with track $FF.\n\n\nFixed offset calculation for 800K DOS organized disks. This primarily affected UniDOS.\n\n\nImport menu should be in directory pane instead of file pane.\n\n\nThe information tab does not get updated. Now that the disk can be modified, this page needs to be updated when shown.\n\n\n\n\nI'm still putzing with a compiled version for Linux and Windows, so they haven't shown up as of yet.\n\n\nAppleCommander is hosted on SourceForge. The home page is located at:\n\n\nhttp://applecommander.sourceforge.net/\n\n\n\nThe SourceForge project page is located at:\n\n\nhttp://sourceforge.net/projects/applecommander/\n\n\n\nThe files are located at:\n\n\nhttp://sourceforge.net/project/showfiles.php?group_id=67414\n\n\n\nIf you're interested, please take a peek and let me know!\n\n\n-Rob", 
            "title": "1.2.1 (01-Mar-2003)"
        }, 
        {
            "location": "/history/version120/", 
            "text": "A new release of AppleCommander is available. Version 1.2.0 took a bit longer than expected, as I got distracted with other fun stuff in AppleCommander (hence, super-hires exports and AWP to RTF conversion):\n\n\n\n\nCan now create disk images. For the moment, these images are not bootable (including hard disk images) - they do however boot a nifty title screen...\n\n\nFiles can now be imported into disks. Formats that support this are DOS 3.3 and ProDOS formats. (Pascal and RDOS will come at a later point.)\n\n\nThe AppleWorks export now has an option for exporting to Rich-Text Format (RTF). This format can be loaded into many word-processors easily.\n\n\nThe graphics export option now supports Super High-Res images. Both unpacked and packed formats. These are essentially raw dumps from the IIGS memory that were saved to disk.\n\n\nFiles can be deleted.\n\n\nAny changes to a disk image can be saved. Please be careful! It's easy enough to keep a backup copy of your work these days.\n\n\nTwo new DOS derivatives are available: UniDOS and OzDOS (both are 800K formats).\n\n\n\n\nA Linux and a Windows native executable is in the works. Be warned that they are still experimental. In particular, in the process of compiling, something about the code introduces delays (i.e., click and wait a couple of seconds), and the graphics filter currently needs to be disabled, as GCJ does not support the graphics libraries that are being used.\n\n\nAppleCommander is hosted on SourceForge. The home page is located at:\n\n\nhttp://applecommander.sourceforge.net/\n\n\n\nThe SourceForge project page is located at:\n\n\nhttp://sourceforge.net/projects/applecommander/\n\n\n\nThe files are located at:\n\n\nhttp://sourceforge.net/project/showfiles.php?group_id=67414\n\n\n\nIf you're interested, please take a peek and let me know!\n\n\n-Rob", 
            "title": "1.2.0 (11-Feb-2003)"
        }, 
        {
            "location": "/history/version111/", 
            "text": "A new release of AppleCommander is available. Version 1.1.1 brings AppleWorks word processor (AWP) file exporting, multiple files can be exported at once, the wizard \"guesses\" the file type, along with minor bug fixes and enhancements.\n\n\nWith this release, AppleCommander is GPL. The home page has now moved to:\n\n\nhttp://applecommander.sourceforge.net/\n\n\n\nThe SourceForge project page is located at:\n\n\nhttp://sourceforge.net/projects/applecommander/\n\n\n\nIf you're interested, please take a peek. Now that AppleCommander is hosted at SourceForge, you may submit bugs or requests, browse the code, or even contribute code!\n\n\n-Rob", 
            "title": "1.1.1 (30-Nov-2002)"
        }, 
        {
            "location": "/history/version110/", 
            "text": "A new release of AppleCommander is available. Version 1.1.0 brings in file exporting and filtering (if chosen). File export types include raw disk, binary, ASCII text, Applesoft BASIC, Integer BASIC, and Graphics modes (Hires and Double Hires).\n\n\nAppleCommander reads and DOS 3.3, ProDOS, Apple Pascal, and RDOS formatted disks - and reads compressed (\n*.gz\n) images, 140K DOS ordered (\n*.do\n, \n*.dsk\n), 140K ProDOS ordered (\n*.po\n), 800K ProDOS ordered (\n*.2img\n, \n*.2mg\n), and 32MB ApplePC hard disk images (\n*.hdv\n).\n\n\nIf you're interested, come and take a peek!\n\n\n    http://webpages.charter.net/greener/AppleCommander/\n    (Note that this link is no longer active.)\n\n\n\n-Rob", 
            "title": "1.1 (12-Nov-2002)"
        }, 
        {
            "location": "/history/version100/", 
            "text": "I am working on a general Apple2 disk image utility. Why? I haven't found any one utility that does everything for transferring files in and out of disk images - and, besides, I'm thoroughly enjoying \nretro computing\n.\n\n\nCurrently, it reads and displays the contents of disks. It supports DOS 3.3, ProDOS, Apple Pascal, and RDOS formatted disks - and reads compressed (\n*.gz\n) images, 140K DOS ordered (\n*.do\n, \n*.dsk\n), 140K ProDOS ordered (\n*.po\n), 800K ProDOS ordered (\n*.2img\n, \n*.2mg\n), and 32MB ApplePC hard disk images (\n*.hdv\n). This doesn't cover all image formats, but covers the ones I needed/wanted to have covered - it can be expanded relatively easily.\n\n\nFuture direction are to (a) have the ability to extract files from images and (b) to import files into images.\n\n\nTwo caveats - it is written in Java (you need the JVM installed to run it), and I also have been using this as an excuse to work with the Eclipse.org SWT windowing library (which will need to be downloaded also). However, the upside to this is that it should run wherever Java and SWT run (Windows, Linux, and Mac OS X right now).\n\n\nIf you're interested, come and take a peek!\n\n\n    http://webpages.charter.net/greener/AppleCommander/\n    (Note that this link is no longer active.)\n\n\n\n-Rob", 
            "title": "1.0 (28-Oct-2002)"
        }
    ]
}