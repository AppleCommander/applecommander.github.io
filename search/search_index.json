{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>AppleCommander is a cross-platform set of tools used to manipulate Apple ][ disk images.  There is a GUI packaged for Windows, Linux, or Mac OS X, and there are a number of command-line tools (see below) that are useful for build chains.  </p> <p>Please visit AppleCommander on GitHub!  You can find current releases, submit tickets, and lend a helping hand.</p>"},{"location":"#capabilities","title":"Capabilities","text":"<p>AppleCommander is currently able to read and display information about disk images, export files of various types, create disk images, import files into disk images, and has a rudimentary compiler. AppleCommander incorporates support for cc65, an improved command-line tool, and even an Ant interface.</p>"},{"location":"#disk-image-organizations","title":"Disk image organizations","text":"<ul> <li>Compressed images (<code>*.gz</code>);</li> <li>140K DOS-ordered images (<code>*.do</code>, <code>*.dsk</code>);</li> <li>140K ProDOS-ordered images (<code>*.po</code>);</li> <li>140K Nibble (DOS ordered) images (<code>*.nib</code>);</li> <li>32MB ApplePC Hard Disk images (<code>*.hdv</code>).</li> <li>Universal Disk Images (<code>*.2mg</code>, <code>*.2img</code>);</li> <li>WOZ Disk Image, version 1 and 2 (<code>*.woz</code>) - 5.25\" only</li> </ul>"},{"location":"#disk-formats","title":"Disk formats","text":"<ul> <li>DOS (both 13-sector and 16-sector);</li> <li>UniDOS, OzDOS (800K formats only);</li> <li>ProDOS;</li> <li>Apple Pascal (140K and 800K formats);</li> <li>SSI's RDOS (140K formats only);</li> <li>CP/M (probably only 140K formats);</li> <li>Gutenberg Word Processor;</li> <li>NakedOS (see the Super-Mon page).</li> </ul>"},{"location":"#archive-formats","title":"Archive formats","text":"<ul> <li>ShrinkIt (the archive will be automatically extracted into a ProDOS disk);</li> <li>AppleSingle.</li> </ul>"},{"location":"#file-export-filters","title":"File export filters","text":"<ul> <li>Raw disk data (dumps blocks or sectors without regard to file length or operating system storage);</li> <li>Binary file (dumps file without any conversion);</li> <li>Hex dump;</li> <li>Disassembly;</li> <li>ASCII file filter;</li> <li>Formatted assembly output;</li> <li>Pascal \".text\" files;</li> <li>Applesoft BASIC file filter (file is de-tokenized and written out as a text file);</li> <li>Integer BASIC file filter (ditto);</li> <li>Business BASIC file (ditto);</li> <li>Graphic image file filter (supports black and white or color Hires images as well as black and white or color Double Hires images as well as standard Super Hires, and 3200 color Super Hires);</li> <li>Shape table support;</li> <li>Gutenberg Word processor;</li> <li>AppleWorks word processor (AWP) file filter (converts to text, poor HTML, or Rich-Text Format (RTF));</li> <li>AppleWorks database (ADB) file filter (converts to CSV);</li> <li>AppleWorks spread sheet (ASP) file filter (converts to CSV).</li> </ul>"},{"location":"#viewer-capabilities","title":"Viewer capabilities","text":"<ul> <li>BASIC programs (Applesoft and Integer BASIC); Applesoft BASIC is colored</li> <li>Graphics images (same as supported by the graphics export function)</li> <li>AppleWorks (database, spreadsheet, word processor)</li> <li>Text files (plain text, assembly source files, Pascal text files)</li> <li>Hex dump of all the above</li> <li>\"Raw\" format of all of the above; this includes all data as read from disk including length and starting address as well as full sectors/blocks</li> </ul>"},{"location":"#other-cli-tooling","title":"Other CLI tooling","text":"<p>AppleCommander includes a number of command-line tools:</p> <ul> <li><code>ac</code> (based on AppleCommander) - see the ac page.</li> <li><code>acx</code> (experimental utility for AppleCommander) - see the acx page.</li> <li><code>asu</code> (AppleSingle utility) - see the asu README.</li> <li><code>bt</code> (Applesoft BASIC tokenizer tool) - see the bt README.</li> <li><code>st</code> (Applesoft shape utility) - see the st README.</li> <li><code>acdasm</code> (6502/65C02/SWEET16 disassembler) - see the README.</li> </ul> <p>Since the CLI tooling may be lacking, these additional resources should be useful:</p> <ul> <li>Directives section in the API overview</li> <li>Source formats for the Shapes defined in the API</li> <li>bastools sample code </li> </ul>"},{"location":"ac/","title":"Using 'ac'","text":"<p><code>ac</code> is the command-line tool that provides access to the core of AppleCommander's capabilities.</p>"},{"location":"ac/#a-quick-note","title":"A quick note","text":"<p>All of these samples were done in a Unix-type environment (Mac OS X or Linux), hence the <code>$</code> is the prompt character.</p> <p>Every sample assumes you have an <code>ac.jar</code> in the current directory and are therefore written out \"long-hand\".  If you followed the install instructions, you have setup a command-line script to help you out, meaning that every <code>java -jar ac.jar</code> can be replaced with <code>ac.sh</code> or <code>ac.bat</code>.  Additionally if you setup an <code>alias</code>, you can replace that to just <code>ac</code>.  </p> <p>Setup whatever works for you and your environment, and be cognizant that the sample commands probably aren't quite exactly right for your setup!</p>"},{"location":"ac/#options","title":"Options","text":"<p>For a quick list of <code>ac</code> options, enter the <code>-h</code> command:</p> <pre><code>$ java -jar ac.jar -h\nAppleCommander command line options [1.11.0]:\n-i       &lt;imagename&gt; [&lt;imagename&gt;] display information about image(s).\n-ls      &lt;imagename&gt; [&lt;imagename&gt;] list brief directory of image(s).\n-l       &lt;imagename&gt; [&lt;imagename&gt;] list directory of image(s).\n-ll      &lt;imagename&gt; [&lt;imagename&gt;] list detailed directory of image(s).\n-lsv     &lt;imagename&gt; [&lt;imagename&gt;] list in CSV format brief directory of image(s).\n-lv      &lt;imagename&gt; [&lt;imagename&gt;] list in CSV format directory of image(s).\n-llv     &lt;imagename&gt; [&lt;imagename&gt;] list in CSV format detailed directory of image(s).\n-lsj     &lt;imagename&gt; [&lt;imagename&gt;] list in JSON format brief directory of image(s).\n-lj      &lt;imagename&gt; [&lt;imagename&gt;] list in JSON format directory of image(s).\n-llj     &lt;imagename&gt; [&lt;imagename&gt;] list in JSON format detailed directory of image(s).\n-e       &lt;imagename&gt; &lt;filename&gt; [&lt;output&gt;] export file from image to stdout\n         or to an output file.\n-x       &lt;imagename&gt; [&lt;directory&gt;] extract all files from image to directory.\n-g       &lt;imagename&gt; &lt;filename&gt; [&lt;output&gt;] get raw file from image to stdout\n         or to an output file.\n-p       &lt;imagename&gt; &lt;filename&gt; &lt;type&gt; [[$|0x]&lt;addr&gt;] put stdin\n         in filename on image, using file type and address [0x2000].\n-pt      &lt;imagename&gt; &lt;filename&gt; put stdin in filename on image\n         defaulting to TXT file type, setting high bit on and replacing\n         newline characters with $8D.\n-ptx     &lt;imagename&gt; &lt;filename&gt; put stdin in filename on image\n         defaulting to TXT file type, clearing high bit and replacing\n         newline characters with $0D.\n-d       &lt;imagename&gt; &lt;filename&gt; delete file from image.\n-k       &lt;imagename&gt; &lt;filename&gt; lock file on image.\n-u       &lt;imagename&gt; &lt;filename&gt; unlock file on image.\n-n       &lt;imagename&gt; &lt;volname&gt; change volume name (ProDOS or Pascal).\n-dos     &lt;imagename&gt; &lt;filename&gt; &lt;type&gt; put stdin with DOS header\n         in filename on image, using file type and address from header.\n-as      &lt;imagename&gt; [&lt;filename&gt;] put stdin with AppleSingle format\n         in filename on image, using file type, address, and (optionally) name\n         from the AppleSingle file.\n-geos    &lt;imagename&gt; interpret stdin as a GEOS conversion file and\n         place it on image (ProDOS only).\n-dos140  &lt;imagename&gt; create a 140K DOS 3.3 image.\n-pro140  &lt;imagename&gt; &lt;volname&gt;\n         create a 140K ProDOS image.\n-pro800  &lt;imagename&gt; &lt;volname&gt; create an 800K ProDOS image.\n-pas140  &lt;imagename&gt; &lt;volname&gt; create a 140K Pascal image.\n-pas800  &lt;imagename&gt; &lt;volname&gt; create an 800K Pascal image.\n-convert &lt;filename&gt; &lt;imagename&gt; [&lt;sizeblocks&gt;] uncompress a ShrinkIt or Binary\n         II file; or convert a DiskCopy 4.2 image into a ProDOS disk image.\n-bas     &lt;imagename&gt; &lt;filename&gt; import an AppleSoft basic file from text\n         back to its tokenized format.\n</code></pre> <p>Note that the <code>-cc65</code> has been deprecated as CC65 itself is moving to using the AppleSingle format (<code>-as</code> flag).  Use <code>-dos</code> instead. <code>-cc65</code> will still be recognized, but it maps to <code>-dos</code> and a warning will be printed.</p>"},{"location":"ac/#creating-an-image","title":"Creating an image","text":"Type Description DOS 3.3 The <code>-dos140</code> command creates an empty 140K DOS 3.3 disk image in DOS sector order; DOS volumes do not have names, and volume number is the default (254). ProDOS The <code>-pro140</code> command creates an empty 140K ProDOS disk image, and <code>-pro800</code> creates an empty 800K image, both in ProDOS sector order. Pascal The <code>-pas140</code> command creates an empty 140K Pascal disk image, and <code>-pas800</code> creates an empty 800K image, both in Pascal sector order. <p>To be read correctly, DOS order disk image names should end in <code>.dsk</code> or <code>.do</code>, while ProDOS and Pascal order image names should end in <code>.po</code>. The resulting images will not boot, but they can be edited with the traditional utilities.</p> <p>To create a DOS 3.3, Pascal and ProDOS image, enter the commands:</p> <pre><code>$ java -jar ac.jar -dos140 dos.dsk\n$ java -jar ac.jar -pas140 pas.po volume1\n$ java -jar ac.jar -pro140 pro.po volume2\n</code></pre> <p>There is no textual output from this command (unless an error occurs) beyond having a new blank disk image.</p>"},{"location":"ac/#displaying-information-about-an-image","title":"Displaying information about an image","text":"<p>The <code>-i</code> command displays information about a disk image. Multiple image names are permitted.</p> <p>To get information about one or more disks, enter any of the following commands:</p> <pre><code>$ java -jar ac.jar -i ricky.2mg\n$ java -jar ac.jar -i fred.dsk ethel.po\n$ java -jar ac.jar -i mertz/*\n$ java -jar ac.jar -i *.po *.dsk\n</code></pre> <p>A sample from the ProDOS 2.4.2 master disk:</p> <pre><code>$ java -jar ac.jar -i ProDOS_2_4_2.dsk\nFile Name: ProDOS_2_4_2.dsk\nDisk Name: /PRODOS.2.4.2/\nPhysical Size (bytes): 143360\nFree Space (bytes): 0\nUsed Space (bytes): 143360\nPhysical Size (KB): 140\nFree Space (KB): 0\nUsed Space (KB): 140\nArchive Order: DOS\nDisk Format: ProDOS\nTotal Blocks: 280\nFree Blocks: 0\nUsed Blocks: 280\nVolume Access: Destroy Read Rename Write\nBlock Number of Bitmap: 6\nCreation Date: 09/19/2016\nFile Entries Per Block: 13\nFile Entry Length (bytes): 39\nActive Files in Root Directory: 19\nMinimum ProDOS Version Required: 0\nVolume Created By ProDOS Version: 0\nVolume Name: PRODOS.2.4.2\n</code></pre>"},{"location":"ac/#directory-listings","title":"Directory listings","text":"<p>The <code>-ls</code>, <code>-l</code> and <code>-ll</code> commands list the directory of a disk image in short, regular and long format respectively. Multiple image names are permitted, as suggested above. To see the directory of one or more disk, enter any of the following commands:</p> <pre><code>$ java -jar ac.jar -ls misc.dsk\n$ java -jar ac.jar -l  misc.dsk\n$ java -jar ac.jar -ll misc.dsk\n$ java -jar ac.jar -ls *.po *.dsk\n$ java -jar ac.jar -l  Nibble*/*\n</code></pre> <p>Sample runs (with some text omitted for brevity):</p> <pre><code>$ java -jar ac.jar -ls ProDOS_2_4_2.dsk\n/home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/\nVIEW.README BAS 512  \n&lt;snip&gt;\nPRODOS SYS 17,128 Locked\nProDOS format; 0 bytes free; 143,360 bytes used.\n\n$ java -jar ac.jar -l ProDOS_2_4_2.dsk\n/home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/\n  VIEW.README BAS 001 09/15/2016 01/13/2018 512 A=$0801\n&lt;snip&gt;\n* PRODOS SYS 034 01/18/2018 01/13/2018 17,128  \nProDOS format; 0 bytes free; 143,360 bytes used.\n\n$ java -jar ac.jar -ll ProDOS_2_4_2.dsk\n/home/rob/Downloads/ProDOS_2_4_2.dsk /PRODOS.2.4.2/\n  VIEW.README  Destroy Read Rename Write BAS  001 09/15/2016 01/13/2018 512 A=$0801 0002 0116 Seedling Changed 0 36\n&lt;snip&gt;\n* PRODOS  Read  SYS  034 01/18/2018 01/13/2018 17,128 $0000 0002 0005 Sapling Changed 0 36\nProDOS format; 0 bytes free; 143,360 bytes used.\n</code></pre>"},{"location":"ac/#examining-a-file","title":"Examining a file","text":"<p>The <code>-e</code> command lets you examine a file by printing a readable version to standard output. To examine a file named <code>fred</code> on a disk named <code>misc.dsk</code>, enter the command:</p> <pre><code>$ java -jar ac.jar -e misc.dsk fred\n</code></pre> <p>The export command tries to choose an appropriate filter for the chosen file. Filters exist for formats, with a default hexadecimal format for binary files. If the file is probably a picture, the export format is PNG. To save the output to a file:</p> <pre><code>$ java -jar ac.jar -e misc.dsk lucy.pic &gt; lucy.png\n</code></pre> <p>A sample run against an AppleSoft BASIC program on the ProDOS 2.4.2 disk:</p> <pre><code>$ java -jar ac.jar -e ProDOS_2_4_2.dsk VIEW.README\n10  REM VIEW.README BY J.BROOKS. 9/15/2016\n20 ADR = 768\n30  READ BYTE: IF BYTE &lt;0  THEN 100\n40  POKE ADR,BYTE:ADR = ADR +1: GOTO 30\n100  CALL 806\n150  PRINT  CHR$(4)\"BLOAD README,A$2000,TTXT\"\n200  HOME : FOR I = 1 TO 22: CALL 768: NEXT\n300  CALL 768: GET KEY$\n350  IF  ASC(KEY$) = 27 GOTO 500\n400  IF  PEEK(251) &gt;0 GOTO 300\n500  PRINT  CHR$(4)\"bye\"\n1000  DATA 162,40,160,0,177,250,240,29,9,128,201,225,144,2,41,255,32,237,253,200,201,141,240,3,202,208,233,152,24,101,250,133,250,144,2,230,251,96,162,96,169,32,133,251,141,54,3,169\n1010  DATA 0,133,250,168,153,0,32,200,208,250,238,54,3,202,208,244,26,208,2,160,224,136,140,15,3,96,-1\n</code></pre>"},{"location":"ac/#get-a-raw-data-file","title":"Get a raw data file","text":"<p>The <code>-g</code> command gets a file in its raw form. To copy a file named <code>fred</code> from <code>misc.dsk</code> to a file named <code>ethel</code> on your file system, enter the command:</p> <pre><code>$ java -jar ac.jar -g misc.dsk fred &gt; ethel\n</code></pre> <p>Because binary files are difficult to read, you may want to send the output to a program that can show the data in a hexadecimal format other than the one used with the <code>-e</code> option, above:</p> <pre><code>$ java -jar ac.jar -g misc.dsk fred | hexdump\n</code></pre> <p>Again, a sample run with the AppleSoft BASIC program from the ProDOS 2.4.2 image.  This time, however, you will see the tokenized program:</p> <pre><code>$ java -jar ac.jar -g ProDOS_2_4_2.dsk VIEW.README | hexdump -C\n00000000  29 08 0a 00 b2 56 49 45  57 2e 52 45 41 44 4d 45  |)....VIEW.README|\n00000010  20 42 59 20 4a 2e 42 52  4f 4f 4b 53 2e 20 39 2f  | BY J.BROOKS. 9/|\n00000020  31 35 2f 32 30 31 36 00  35 08 14 00 41 44 52 d0  |15/2016.5...ADR.|\n00000030  37 36 38 00 4b 08 1e 00  87 42 59 54 45 3a ad 42  |768.K....BYTE:.B|\n00000040  59 54 45 d1 30 c4 31 30  30 00 67 08 28 00 b9 41  |YTE.0.100.g.(..A|\n00000050  44 52 2c 42 59 54 45 3a  41 44 52 d0 41 44 52 c8  |DR,BYTE:ADR.ADR.|\n00000060  31 3a ab 33 30 00 70 08  64 00 8c 38 30 36 00 94  |1:.30.p.d..806..|\n00000070  08 96 00 ba e7 28 34 29  22 42 4c 4f 41 44 20 52  |.....(4)\"BLOAD R|\n00000080  45 41 44 4d 45 2c 41 24  32 30 30 30 2c 54 54 58  |EADME,A$2000,TTX|\n&lt;snip&gt;\n000001f0  30 2c 31 35 2c 33 2c 39  36 2c 2d 31 00 00 00 e8  |0,15,3,96,-1....|\n00000200\n</code></pre>"},{"location":"ac/#put-standard-input-onto-disk-image","title":"Put standard input onto disk image","text":"<p>The <code>-p</code> command puts data from the standard input stream onto a disk image. Four parameters are used: imagename, filename, type, and address. If the address is omitted and one is required, $2000 is assumed. Suppose <code>ethel</code> is a binary file meant to start at address 2048 ($800 or 0x800). To put the binary file named <code>ethel</code> back into a file named <code>fred</code> with that starting address on the DOS image named <code>misc.dsk</code>:</p> <pre><code>$ java -jar ac.jar -p misc.dsk fred B 0x800 &lt; ethel\n</code></pre> <p>Alternatively, suppose <code>ethel</code> is a binary starting at 2048 destined for <code>fred</code> on a ProDOS image named <code>p1.po</code>:</p> <pre><code>$ java -jar ac.jar -p p1.po fred bin 2048 &lt; ethel\n</code></pre>"},{"location":"ac/#put-standard-input-onto-disk-image-as-a-text-file","title":"Put standard input onto disk image as a text file","text":"<p>The <code>-pt</code> and <code>-ptx</code> commands work the same as <code>-p</code> except that they assume the input is a text file. This defaults the file type to <code>TXT</code>. They also translate the MS-DOS CR+LF format into a single line ending.</p> <p>A sample using the <code>CONTRIB.txt</code> file in this archive, which happes to be in MS-DOS format:</p> <pre><code>$ cat CONTRIB.txt | hexdump -C\n00000000  41 70 70 6c 65 43 6f 6d  6d 61 6e 64 65 72 20 2d  |AppleCommander -|\n00000010  20 41 6e 20 41 70 70 6c  65 20 5d 5b 20 69 6d 61  | An Apple ][ ima|\n00000020  67 65 20 75 74 69 6c 69  74 79 2e 0d 0a 43 6f 70  |ge utility...Cop|\n&lt;snip&gt;\n$ # Note the CR + LF is here .............. ^^ ^^\n</code></pre> <p>For <code>-pt</code>, it translates line endings to the Apple 0x8d as well as setting the high bit:</p> <pre><code>$ cat CONTRIB.txt | ac -pt test.dsk contrib\n$ ac -g test.dsk contrib | hexdump -C\n00000000  c1 f0 f0 ec e5 c3 ef ed  ed e1 ee e4 e5 f2 a0 ad  |................|\n00000010  a0 c1 ee a0 c1 f0 f0 ec  e5 a0 dd db a0 e9 ed e1  |................|\n00000020  e7 e5 a0 f5 f4 e9 ec e9  f4 f9 ae 8d c3 ef f0 f9  |................|\n&lt;snip&gt;\n$ # Note that the CR + LF is fixed ........ ^^\n</code></pre> <p>For <code>-ptx</code>, it translates line endings to the Apple 0x0d as well as clearing the high bit:</p> <pre><code>$ cat CONTRIB.txt | ac -ptx test.dsk contrib2\n$ ac -g test.dsk contrib2 | hexdump -C\n00000000  41 70 70 6c 65 43 6f 6d  6d 61 6e 64 65 72 20 2d  |AppleCommander -|\n00000010  20 41 6e 20 41 70 70 6c  65 20 5d 5b 20 69 6d 61  | An Apple ][ ima|\n00000020  67 65 20 75 74 69 6c 69  74 79 2e 0d 43 6f 70 79  |ge utility..Copy|\n&lt;snip&gt;\n$ # Note that the CR + LF is fixed ........ ^^\n</code></pre>"},{"location":"ac/#put-standard-input-basic-source-code-onto-disk-image-as-a-basic-file","title":"Put standard input BASIC source code onto disk image as a BASIC file","text":"<p>With the addition of the bastools library, <code>ac</code> now has the ability to tokenize a BASIC program and place it onto the disk. Please see the bt and st for more advanced capabilities!</p> <p>Note: Due to the bastools API, <code>ac</code> will create a temp file in the system temp folder and then delete it once completed. </p> <pre><code>$ cat sample.bas \n10 TEXT:HOME:GR:POKE -16302,23\n20 COLOR=0:FOR I=41 TO 47 STEP 2:HLIN 0,39 AT I:NEXT\n30 COLOR=INT(RND(1)*16)\n40 PLOT INT(RND(1)*40),INT(RND(1)*48)\n50 IF PEEK(49152)&lt;128 THEN 30\n60 GET A$:TEXT:HOME\n$ cat sample.bas | ac -bas test.dsk sample\n$ ac -g test.dsk sample | hexdump -C\n00000000  16 08 0a 00 89 3a 97 3a  88 3a b9 c9 31 36 33 30  |.....:.:.:..1630|\n00000010  32 2c 32 33 00 32 08 14  00 a0 30 3a 81 49 d0 34  |2,23.2....0:.I.4|\n00000020  31 c1 34 37 c7 32 3a 8e  30 2c 33 39 c5 49 3a 82  |1.47.2:.0,39.I:.|\n00000030  00 42 08 1e 00 a0 d3 28  db 28 31 29 ca 31 36 29  |.B.....(.(1).16)|\n00000040  00 5d 08 28 00 8d d3 28  db 28 31 29 ca 34 30 29  |.].(...(.(1).40)|\n00000050  2c d3 28 db 28 31 29 ca  34 38 29 00 72 08 32 00  |,.(.(1).48).r.2.|\n00000060  ad e2 28 34 39 31 35 32  29 d1 31 32 38 c4 33 30  |..(49152).128.30|\n00000070  00 7e 08 3c 00 be 41 24  3a 89 3a 97 00 00 00     |.~.&lt;..A$:.:....|\n0000007f\n</code></pre>"},{"location":"ac/#put-standard-input-with-dos-33-header-onto-disk-image","title":"Put standard input with DOS 3.3 header onto disk image","text":"<p>The <code>-dos</code> command is like <code>-p</code>, but it assumes the input stream includes a four-byte header, as generated by older versions of <code>cc65</code>. Three parameters are required: imagename, filename, and type. The start address is taken from bytes 0-1 of the header. To put the DOS binary named <code>ethel</code> into a file named <code>fred</code> on the DOS image named <code>misc.dsk</code>:</p> <pre><code>$ java -jar ac.jar -dos misc.dsk fred B &lt; ethel\n</code></pre>"},{"location":"ac/#put-standard-input-in-applesingle-format-onto-disk-image","title":"Put standard input in AppleSingle format onto disk image","text":"<p>The <code>-as</code> command is like <code>-p</code>, but it assumes the input stream is in the AppleSingle format, as generated by newer versions of <code>cc65</code> (see ticket #20). The parameters are imagename (required) and, optionally, filename. The AppleSingle format supports a filename entry, but it is not always populated.  To put the AppleSingle binary named <code>ethel</code> into a file named <code>fred</code> on the ProDOS image named <code>misc.dsk</code>:</p> <pre><code>$ java -jar ac.jar -as misc.dsk fred &lt; ethel\n</code></pre>"},{"location":"ac/#putting-files-and-file-types","title":"Putting files and file types","text":"<p>As another example, consider the text file named <code>foo.text</code> and the Pascal image named <code>src.po</code>:</p> <pre><code>$ java -jar ac.jar -p p2.po foo.text text &lt; foo.text\n</code></pre> <p>Valid file types are specific to each operating system:</p> Operating System File Types DOS 3.x <code>A</code>, <code>B</code>, <code>I</code>, <code>T</code>, <code>S</code>, <code>R</code>, <code>a</code>, <code>b</code>. Pascal <code>bad</code>, <code>code</code>, <code>text</code>, <code>info</code>, <code>data</code>, <code>graf</code>, <code>foto</code>. ProDOS <code>bas</code>, <code>bin</code>, <code>sys</code>, <code>txt</code>, <code>rel</code>, etc.; see <code>ProdosFileTypes.properties</code> for more."},{"location":"ac/#delete-a-file","title":"Delete a file","text":"<p>The <code>-d</code> command deletes a file from an image:</p> <pre><code>$ java -jar ac.jar -d misc.dsk fred\n</code></pre>"},{"location":"ac/#copying-a-file-between-disks","title":"Copying a file between disks","text":"<p>To copy a file from one image to another, do something like this:</p> <pre><code>$ java -jar ac.jar -g one.dsk fred | java -jar ac.jar -p another.dsk fred bin 2048\n</code></pre>"},{"location":"ac/#locking-and-unlocking-a-file","title":"Locking and unlocking a file","text":"<p>The <code>-k</code> and <code>-u</code> commands lock and unlock a file on the given image:</p> <pre><code>$ java -jar ac.jar -k misc.dsk fred\n$ java -jar ac.jar -u misc.dsk fred\n</code></pre>"},{"location":"ac/#change-a-volume-name","title":"Change a volume name","text":"<p>The <code>-n</code> command changes the volume name on an image. Only ProDOS and Pascal images are affected:</p> <pre><code>$ java -jar ac.jar -n misc.po name\n</code></pre>"},{"location":"ac/#further-details","title":"Further details","text":"<ul> <li>Here's a more comprehensive example of using AppleCommander for cross-platform development.</li> <li>It's also possible to invoke the command line functions from within the ant build environment by using AppleCommander's ant interface.</li> <li>The <code>-geos</code> transfer file format is specified in Apple GEOS CONVERT Format.</li> </ul>"},{"location":"ac/#known-problems-limitations","title":"Known problems &amp; limitations","text":"<ul> <li>To replace an existing file on an image, you must delete it first; <code>ac</code> will create as many duplicate entries as you specify, only one of which will be accessible to the operating system.</li> <li>Given a ProDOS image, a full pathname may be specified for the <code>-e</code>, <code>-g</code>, <code>-p</code>, <code>-d</code>, <code>-k</code>, <code>-u</code>, <code>-dos</code>, and <code>-as</code> options. Files can only be put into an existing directory.</li> </ul>"},{"location":"acx/","title":"Using 'acx'","text":"<p><code>acx</code> is a new command-line tool for AppleCommander.  This tool is subcommand based (think <code>git pull</code> and <code>git commit</code>) and is expected to allow more nuanced command activities.</p>"},{"location":"acx/#overview-asking-for-help","title":"Overview / Asking for help","text":"<p>All commands and subcommands will show options and command structure with the <code>--help</code> flag. </p> <pre><code>$ acx --help\nUsage: acx [-hVv] [--debug] [--quiet] [COMMAND]\n\n'acx' experimental utility\n\nOptions:\n      --debug     Show detailed stack traces.\n  -h, --help      Show this help message and exit.\n      --quiet     Turn off all logging.\n  -v, --verbose   Be verbose. Multiple occurrences increase logging.\n  -V, --version   Print version information and exit.\n\nCommands:\n  compare          Compare two disk images.\n  convert          Uncompress a ShrinkIt or Binary II file; or convert a\n                     DiskCopy 4.2 image into a ProDOS disk image.\n  copy, cp         Copy files between disks.\n  create, mkdisk   Create a disk image.\n  delete, del, rm  Delete file(s) from a disk image.\n  diskmap, map     Show disk usage map.\n  dump             Dump a block or sector.\n  export, x, get   Export file(s) from a disk image.\n  dups             Find duplicate files.\n  help             Display help information about the specified command.\n  import, put      Import file onto disk.\n  info, i          Show information on a disk image(s).\n  list, ls         List directory of disk image(s).\n  lock             Lock file(s) on a disk image.\n  mkdir, md        Create a directory on disk.\n  read             Read a block or sector.\n  rename, ren      Rename file on a disk image.\n  rename-disk      Rename volume of a disk image.\n  rmdir, rd        Remove a directory on disk.\n  scan             Scan directory and report on disks found and understood.\n  unlock           Unlock file(s) on a disk image.\n  write            Write a block or sector.\n</code></pre> <p>When looking for options for a subcommand, the <code>help</code> subcommand may be used as an alternate (<code>acx copy --help</code> or <code>acx help copy</code> are both valid).</p> <pre><code>$ acx copy --help\nUsage: acx copy [-fhr] -d=&lt;disk&gt; -s=&lt;sourceDisk&gt; [--to=&lt;targetPath&gt;]\n                [&lt;globs&gt;...]\n\nCopy files between disks.\n\nParameters:\n      [&lt;globs&gt;...]    File glob(s) to copy (default = '*')\n\nOptions:\n  -d, --disk=&lt;disk&gt;   Image to process [$ACX_DISK_NAME].\n  -f, --force         Overwrite existing files.\n  -h, --help          Show help for subcommand.\n  -r, --recursive     Copy files recursively.\n  -s, --from, --source=&lt;sourceDisk&gt;\n                      Source disk for files.\n      --to, --directory=&lt;targetPath&gt;\n                      Specify which directory to place files.\n</code></pre>"},{"location":"acx/#identifying-a-disk","title":"Identifying a disk","text":"<p><code>acx</code> differs from <code>ac</code> in that the primary disk image is always specified by the <code>-d</code> flag.  However, this can be painful when running a series of commands.  To simplify usage, the environment variable <code>ACX_DISK_NAME</code> can be set to simplify scripting.</p> <p>This means that a sequence of commands that look like this:</p> <pre><code>$ acx create -d disk1.po --prodos\n$ acx copy -d disk1.po --from ProDOS_2_4_2.dsk PRODOS BASIC.SYSTEM\n$ acx list -d disk1.po --native\n\nFile: disk1.po\nName: /NEW.DISK/\n* BASIC.SYSTEM    SYS      021 05/23/2022 01/13/2018     10,240 A=$2000  \n* PRODOS          SYS      035 05/23/2022 01/13/2018     17,128          \nProDOS format; 111,104 bytes free; 32,256 bytes used.\n</code></pre> <p>Can also be specified in this manner:</p> <pre><code>$ export ACX_DISK_NAME=disk2.po   # This sets the environment variable with the disk name\n$ acx create --prodos\n$ acx copy --from ProDOS_2_4_2.dsk PRODOS BASIC.SYSTEM\n$ acx list --native\n\nFile: disk2.po\nName: /NEW.DISK/\n* BASIC.SYSTEM    SYS      021 05/23/2022 01/13/2018     10,240 A=$2000  \n* PRODOS          SYS      035 05/23/2022 01/13/2018     17,128          \nProDOS format; 111,104 bytes free; 32,256 bytes used.\n$ unset ACX_DISK_NAME               # This removes the environment variable\n</code></pre>"},{"location":"acx/#creating-a-bootable-disk","title":"Creating a bootable disk","text":"<p><code>acx</code> introduces experimenal capability to create bootable disks. Note that this is only viable for writeable disks (DOS, ProDOS, and Pascal).</p> <pre><code>$ acx create -d disk1.po --format ProDOS_2_4_2.dsk --prodos --size=140kb\n$ acx create -d disk2.dsk --format original332sysmas.nib --dos --size=140kb\n$ acx create -d disk3.po --format UCSD\\ Pascal\\ 1.2_0.DSK --pascal\n</code></pre> <p>Note that Pascal doesn't copy any files. Looking for feedback or PR's to correct this!</p> <p>For ProDOS and Pascal, the boot block is copied over and in the ProDOS case, <code>STARTUP</code> and <code>BASIC.SYSTEM</code> as well. For DOS 3.3, tracks 0-2 are copied and marked as used.</p>"},{"location":"acx/#dumping-a-block-or-sector","title":"Dumping a block or sector","text":"<p><code>acx</code> can dump any sector or block in a hex format:</p> <pre><code>$ acx dump -d ProDOS_2_4_2.dsk --block 2\nOffset   Hex Data                                          Characters\n=======  ================================================  =================\n$000800  00 00 03 00 FC 50 52 4F  44 4F 53 2E 32 2E 34 2E  ....|PRO DOS.2.4.\n$000810  32 00 00 00 00 00 00 00  00 00 00 00 33 21 10 13  2....... ....3!..\n$000820  00 00 C3 27 0D 13 00 06  00 18 01 1B 56 49 45 57  ..C'.... ....VIEW\n$000830  2E 52 45 41 44 4D 45 00  00 00 00 FC 16 01 01 00  .README. ...|....\n$000840  00 02 00 2D 24 09 09 24  00 E3 01 08 2F 21 1A 09  ...-$..$ .c../!..\n$000850  02 00 1A 42 49 54 53 59  2E 42 4F 4F 54 00 00 00  ...BITSY .BOOT...\n$000860  00 00 FF 3D 00 01 00 6D  01 00 2D 24 09 09 24 00  ...=...m ..-$..$.\n$000870  21 00 20 2F 21 31 09 02  00 1B 51 55 49 54 2E 53  !. /!1.. ..QUIT.S\n$000880  59 53 54 45 4D 00 00 00  00 FF 27 00 01 00 38 00  YSTEM... ..'...8.\n&lt;snip&gt;\n</code></pre>"},{"location":"acx/#disassembling-the-boot-sector","title":"Disassembling the boot sector","text":"<p><code>acx</code> can dump any sector or block in a disassembled format:</p> <pre><code>$ acx dump -d ~/Downloads/ProDOS_2_4_2.dsk -t 0 -s 0 --disassembly\n0800- 01        ---\n0801- 38        SEC\n0802- B0 03     BCS $0807\n0804- 4C 32 A1  JMP $A132\n0807- 86 43     STX $43\n0809- C9 03     CMP #$03\n080B- 08        PHP\n080C- 8A        TXA\n080D- 29 70     AND #$70\n080F- 4A        LSR\n0810- 4A        LSR\n0811- 4A        LSR\n0812- 4A        LSR\n0813- 09 C0     ORA #$C0\n0815- 85 49     STA $49\n0817- A0 FF     LDY #$FF\n0819- 84 48     STY $48\n081B- 28        PLP\n081C- C8        INY\n081D- B1 48     LDA ($48),Y\n081F- D0 3A     BNE $085B\n0821- B0 0E     BCS $0831\n0823- A9 03     LDA #$03\n0825- 8D 00 08  STA $0800\n&lt;snip&gt;\n</code></pre>"},{"location":"acx/#file-listings-by-name-pattern","title":"File listings by name pattern","text":"<p>A new feature when listing files is that <code>acx</code> allows \"glob\" pattern matching (\"*\" wildcard matching). (Be careful with the usual shell expansion issues.)</p> <p>For example, to list files that might be run at startup (<code>*.SYSTEM</code>):</p> <pre><code>$ acx ls -d ProDOS_2_4_2.dsk --globs \"*.SYSTEM\"\n\nFile: ProDOS_2_4_2.dsk\nName: /PRODOS.2.4.2/\n* QUIT.SYSTEM     SYS      001 09/15/2016 01/13/2018         56 A=$2000  \n* BASIC.SYSTEM    SYS      021 08/30/2016 01/13/2018     10,240 A=$2000  \n* FASTDSK.SYSTEM  SYS      004 05/04/2009 01/13/2018      1,402 A=$2000  \nProDOS format; 0 bytes free; 143,360 bytes used.\n</code></pre>"},{"location":"acx/#file-listing-as-json-or-csv","title":"File listing as JSON or CSV","text":"<p>Like <code>ac</code>, <code>acx</code> allows file listings to be written out as structured text.  Specifically, with JSON output, secondary processing tools can be used to extract information. Here's a sample using the <code>jq</code> tool:</p> <pre><code>$ acx ls -d ProDOS_2_4_2.dsk --json | jq '.disks[].files[] | select(.name == \"BASIC.SYSTEM\")'\n{\n  \"locked\": \"*\",\n  \"name\": \"BASIC.SYSTEM\",\n  \"type\": \"SYS\",\n  \"blocks\": \"021\",\n  \"modified\": \"08/30/2016\",\n  \"created\": \"01/13/2018\",\n  \"size\": \"10,240\",\n  \"auxType\": \"A=$2000\"\n}\n</code></pre>"},{"location":"acx/#find-duplicate-files","title":"Find duplicate files","text":"<p><code>acx</code> can look for duplicate files:</p> <pre><code>$ acx dups -d \"Beagle Bros Tip Disk #1.dsk\"\nDifferences:\n/mmmmmmmm TIP BOOK #1 mmmmmmmmm has the following duplicates:\n    - /mmmmmmmm TIP BOOK #2 mmmmmmmmm\n    - /mmmmmmmm TIP BOOK #3 mmmmmmmmm\n    - /mmmmmmmm TIP BOOK #4 mmmmmmmmm\n/TIP DISK #1 has the following duplicates:\n    - /D2\n</code></pre> <p>... and a partial directory listing:</p> <pre><code>$ acx ls -l -d \"Beagle Bros Tip Disk #1.dsk\"\n\nFile: Beagle Bros Tip Disk #1.dsk\nName: DISK VOLUME #254\n* A TIP DISK #1                       703 004         T19 S15 A=$0000 \n  T mmmmmmmm TIP BOOK #1 mmmmmmmmm      0 001         T20 S15 A=$0000 \n* I INT TO FP CONVERT                 217 002         T21 S15 A=$0000 \n* A FP TO INT CONVERT                 193 002         T22 S15 A=$0000 \n* A DENSITY                           891 005         T23 S15 A=$0000 \n* I INTEGER FLASHER                   347 003         T24 S15 A=$0000 \n&lt;snip&gt;\n  T mmmmmmmm TIP BOOK #2 mmmmmmmmm      0 001         T9 S15  A=$0000 \n* A VISI-SORT                         759 004         T8 S15  A=$0000 \n&lt;snip&gt;\n  A D2                                703 004         T14 S8  A=$0000 \n* A HELP                           14,065 056         T13 S5  A=$0000 \nDOS 3.3 format; 29,440 bytes free; 113,920 bytes used.\n</code></pre>"},{"location":"acx/#scan-directory-to-identifyclassify-files","title":"Scan directory to identify/classify files","text":"<p>This was added in <code>acx</code> version 1.11.0. The primary intention is to track any slips in ongoing code changes but may also be useful to others.</p> <p>Note that each record is an independent JSON structure. It will work with tools such as <code>jq</code> (see below for sample).</p> <p>Sample run: (for more output, use <code>acx -vvv scan ./Apple2/ -o newscan.json</code> for more verbosity)</p> <pre><code>$ acx scan ./Apple2/ -o newscan.json\nScanned 3820 disk images.\n</code></pre> <p>Success record:</p> <pre><code>{\n  \"imageName\": \"./Apple2/APPLE-II-DISK-IMAGES/programming/assembler/prodosexerciser.dsk\",\n  \"success\": true,\n  \"imageType\": \"ProDOS\",\n  \"logicalDisks\": 1,\n  \"deletedFiles\": 0,\n  \"directoriesVisited\": 1,\n  \"filesVisited\": 2,\n  \"filesRead\": 2,\n  \"dataType\": \"blocks\",\n  \"dataRead\": 280,\n  \"errors\": []\n}\n</code></pre> <p>Failure record: (one of many types)</p> <pre><code>{\n  \"imageName\": \"./Apple2/APPLE-II-DISK-IMAGES/programming/basic/tipdisk1.sdk\",\n  \"success\": false,\n  \"imageType\": \"DOS 3.3\",\n  \"logicalDisks\": 1,\n  \"deletedFiles\": 0,\n  \"directoriesVisited\": 1,\n  \"filesVisited\": 117,\n  \"filesRead\": 116,\n  \"dataType\": \"sectors\",\n  \"dataRead\": 560,\n  \"errors\": [\n    \"Unable to read file 0/DISK VOLUME #254/(C) 1981, BEAGLE BROS, INC.: arraycopy: last source index 54740 out of bounds for byte[256]\"\n  ]\n}\n</code></pre> <p>Using <code>jq</code>: (selects failures that have the <code>Unknown ProDOS storage type!</code> error message)</p> <pre><code>$ cat newscan.json | jq -r 'select(.success | not) | select(.errors | contains([\"Unknown ProDOS storage type!\"]))'\n&lt;snip&gt;\n{\n  \"imageName\": \"./Apple2/System 6.0.1/Disk 1 of 7 Install.2mg\",\n  \"success\": false,\n  \"imageType\": \"ProDOS\",\n  \"logicalDisks\": 1,\n  \"deletedFiles\": 1,\n  \"directoriesVisited\": 11,\n  \"filesVisited\": 97,\n  \"filesRead\": 91,\n  \"dataType\": \"blocks\",\n  \"dataRead\": 1600,\n  \"errors\": [\n    \"Unable to read file 0/SYSTEM.SETUP/SYS.RESOURCES: Unknown ProDOS storage type!\",\n    \"Unable to read file 0/CDEVS/SETSTART: Unknown ProDOS storage type!\",\n    \"Unable to read file 0/CDEVS/GENERAL: Unknown ProDOS storage type!\",\n    \"Unable to read file 0/CDEVS/RAM: Unknown ProDOS storage type!\",\n    \"Unable to read file 0/DESK.ACCS/CONTROLPANEL: Unknown ProDOS storage type!\",\n    \"Unable to read file 0//INSTALL//INSTALLER: Unknown ProDOS storage type!\"\n  ]\n}\n&lt;snip&gt;\n</code></pre>"},{"location":"install/","title":"Installing","text":"<p>This section covers installation of AppleCommander. As of 1.4.0, this should be a bit simpler as SWT is now packaged for each platform.</p>"},{"location":"install/#install-java","title":"Install Java","text":"<p>If you do not already have Java 21 (or later) installed, you will be required to install one.</p> <p>There are a number of methods to install a Java JVM:</p> <ul> <li>From the AdoptOpenJDK site.</li> <li>On Mac OS X: Using Homebrew and installing via <code>brew install openjdk@21</code></li> <li>On Ubuntu Linux: <code>sudo apt install openjdk-21-jdk</code></li> </ul> <p>These aren't the only options, so do what make sense for you. </p> <p>If there are other options, feel free to add a ticket or submit a pull request.</p>"},{"location":"install/#mac-note","title":"Mac note","text":"<p>With the new Macs that have been released, there is a new wrinkle to pay attention to. These new Macs can run the old (Intel) code as well as the new Apple Silicon (ARM/aarch64), which can lead to some confusion. Either will work. But, the JVM and AppleCommander need to match. If you install a <code>x86_64</code> JVM, be sure to run that version of AppleCommander.</p>"},{"location":"install/#download-applecommander","title":"Download AppleCommander","text":"<p>Visit the AppleCommander release page and download the JAR file for your system.  It will look something like this:</p> <p></p>"},{"location":"install/#graphical-interface","title":"Graphical Interface","text":"<p>The GUI component comes pre-packaged with all needed dependencies. You do not need to find and install the SWT toolkit any more!</p> <ul> <li>For Windows use the file with <code>AppleCommander-win32-x86_64-VERSION.jar</code>.</li> <li>For Macintosh use one of the following:<ul> <li>Intel Macs: <code>AppleCommander-macosx-x86_64-VERSION.jar</code>.</li> <li>M1+ Macs: <code>AppleCommander-macosx-aarch64-VERSION.jar</code>.</li> </ul> </li> <li>For Linux use:<ul> <li>Intel: <code>AppleCommander-linux-x86_64-VERSION.jar</code>.</li> <li>ARM 64-bit: <code>AppleCommander-linux-aarch64-VERSION.jar</code>.</li> </ul> </li> <li>For 32-bit Raspberry Pi's use: <code>AppleCommander-linux-arm-VERSION.jar</code>.</li> </ul> <p>Generally, once the JAR is downloaded, just double-click on the file!</p> <p>For Mac OS X, AppleCommander's windowing library (SWT) requires the <code>-XstartOnFirstThread</code> flag. Starting AppleCommander will need to be from a script something like:</p> <pre><code>#!/bin/sh\njava -XstartOnFirstThread -jar ~/bin/AppleCommander-macosx-ARCH-VERSION.jar\n</code></pre> <p>(ARCH is one of <code>x86_64</code> or <code>aarch64</code> and VERSION is the current release of AppleCommander.)</p> <p>For Linux, you may need to set the file to be executable by allowing the JAR file to be executed as a program.</p> <p></p>"},{"location":"install/#command-line","title":"Command-line","text":"<p>The distribution file <code>AppleCommander-ac-VERSION.jar</code> provides a command-line interface to AppleCommander. It is ready to use immediately, but it may be convenient to rename it (e.g. <code>ac.jar</code>) or invoke it from a script, e.g.</p> <p>GNU bash script for Linux or Mac OS X (<code>ac.sh</code>):</p> <pre><code>#!/bin/sh\njava -jar ~/bin/ac.jar \"${@}\"\n</code></pre> <p>MS DOS batch file (<code>ac.bat</code>):</p> <pre><code>@echo off\njava -jar AppleCommander-ac-1.11.0.jar %*\n</code></pre> <p>There is also a Mac OS X Apple II homebrew repository which allows an install of:</p> <pre><code>$ brew install applecommander\n</code></pre> <p>After it installs, <code>applecommander</code> will be a command. Visit the GitHub page for information on how to install the tap.</p> <p>Alternately, Mac users can choose to install AppleCommander with MacPorts.</p> <p>Please note: The Mac already has an <code>ac</code> command. Setting the alias will \"hide\" that command. Name it whatever makes sense for your environment - there are no dependencies on the name built into the application.</p> <p>Unix-like environments have the ability to <code>alias</code> a command as well. To create an <code>ac</code> command alias, use something like this:</p> <pre><code>alias ac='java -jar app/cli-ac/build/libs/AppleCommander-ac-1.11.0.jar'\n</code></pre> <p>(Adjust the path as it applies to your configuration - this sample pulls from the build directories.)</p>"},{"location":"install/#requirements","title":"Requirements","text":"AppleCommander Version Requirements 1.11 or later Java 21 1.7 or later Java 11 Up to 1.6 Java 8"},{"location":"javadoc/","title":"Javadoc","text":"<p>Javadoc is generated from all AppleCommander sub-projects.</p> <ul> <li>AppleCommander Javadoc</li> <li>ShrinkItArchive Javadoc</li> <li>bastools API Javadoc</li> <li>applesingle API Javadoc</li> <li>acdasm API Javadoc</li> </ul>"},{"location":"using/","title":"Screenshots","text":""},{"location":"using/#windows-xp","title":"Windows XP","text":"<p>This is the initial window from which all disk images are opened:</p> <p></p> <p>This should be an almost familiar sight, except that the DOS 3.3 master is in a \"standard view\" - which is pretty much operating-system agnostic:</p> <p></p> <p>Ah, much better! This is as close to the DOS 3.3 CATALOG as you'll get:</p> <p></p> <p>For those who need all the detail, the detail view will show all information that is available. This view varies significantly by operating system (ProDOS has the most information to show).</p> <p></p> <p>A disk usage map is also available.</p> <p></p> <p>Along with general information about the disk image.  Don't get confused or concerned regarding the archive order and the disk format - the disk format is how the data is actually written on the disk itself while the order is just the ordering of data in the image that emulators use.</p> <p></p> <p>For those operating systems that can, a deleted file listing is also available:</p> <p></p> <p>File exports are now an option:</p> <p></p> <p>The file export wizard allows you to choose from the supported file types:</p> <p></p> <p>The graphics export requires a little more information:</p> <p></p> <p>It may not be beautiful, but it allows you to place your files wherever you want them:</p> <p></p> <p>The converted Hires color image:</p> <p></p> <p>AppleCommander now sports a file viewer:</p> <p> </p> <p>Disk images of 140K (floppy) may be reordered:</p> <p></p>"},{"location":"using/#ubuntu-linux","title":"Ubuntu Linux","text":"<p>This is the initial window from which all disk images are opened:</p> <p></p> <p>The current ProDOS 2.4.2 system master:</p> <p></p>"},{"location":"dev-notes/ant/","title":"Ant Task","text":"<p>The distribution file <code>AppleCommander-version-ac.jar</code> provides an Ant task that can be used as part of Ant-based builds.</p>"},{"location":"dev-notes/ant/#using-the-apple-commander-ant-task","title":"Using the Apple Commander Ant task","text":"<p>The AppleCommander Ant task mirrors the <code>ac</code> command line as much as possible. The advantage over using the ant task over simply calling the AppleCommander command line directly is speed. It is much faster to call on the Ant task than it is for ant to shell out to the system, fire up a Java instance, and then execute your command. As with any external ant task, the first thing that must be done is to declare a <code>taskdef</code>:</p> <pre><code>&lt;taskdef name=\"appleCommander\"\n         classname=\"com.webcodepro.applecommander.ui.AntTask\"\n         classpath=\"AppleCommander-ac-${version}.jar\"/&gt;\n</code></pre> <p>Where <code>${version}</code> would need to be defined by you to be the version of the command-line AppleCommander you are using. The first version of the AC command line that included this Ant task support is 1.3.5.13.</p> <p>Once you have the <code>taskdef</code> defined, it can be called from within ant like this:</p> <pre><code>&lt;!-- Call AppleCommander to print information about the disk image --&gt;\n&lt;appleCommander command=\"i\" imagename=\"${myDiskImage}\" /&gt;\n</code></pre> <p>The values for command that the ant task understands generally mirror those of the command line. Here's a list of them, along with their required and optional parameters:</p> <pre><code>i  &lt;imagename&gt; display information about an image.\nls &lt;imagename&gt; list brief directory of an image.\nl  &lt;imagename&gt; list directory of an image.\nll &lt;imagename&gt; list detailed directory of an image.\ne  &lt;imagename&gt; &lt;filename&gt; [&lt;output&gt;] export file from image to stdout or to an output file.\nx  &lt;imagename&gt; [&lt;outputpath&gt;] extract all files from image to outputpath, or the current working directory if blank.\ng  &lt;imagename&gt; &lt;filename&gt; [&lt;output&gt;] get raw file from image to stdout or to an output file.\np  &lt;imagename&gt; &lt;filename&gt; &lt;type&gt; [[$|0x]&lt;addr&gt;] put stdin in filename on image, using file type and address [0x2000].\nd  &lt;imagename&gt; &lt;filename&gt; delete file from image.\nk  &lt;imagename&gt; &lt;filename&gt; lock file on image.\nu  &lt;imagename&gt; &lt;filename&gt; unlock file on image.\nn  &lt;imagename&gt; &lt;volname&gt; change volume name (ProDOS or Pascal).\ndos &lt;imagename&gt; &lt;filename&gt; &lt;type&gt; put stdin with DOS header in filename on image, using file type and address from header.\nas &lt;imagename&gt; [&lt;filename&gt;] put stdin with AppleSingle format on image.\ndos140 &lt;imagename&gt; create a 140K DOS 3.3 image.\npro140 &lt;imagename&gt; &lt;volname&gt; create a 140K ProDOS image.\npro800 &lt;imagename&gt; &lt;volname&gt; create an 800K ProDOS image.\npas140 &lt;imagename&gt; &lt;volname&gt; create a 140K Pascal image.\npas800 &lt;imagename&gt; &lt;volname&gt; create an 800K Pascal image.\nconvert &lt;filename&gt; &lt;imagename&gt; [&lt;sizeblocks&gt;] uncompress a ShrinkIt or Binary II file; or convert a DiskCopy 4.2 image into a ProDOS disk image.\n</code></pre> <p>For the commands that require a type parameter, their values depend on the operating system of the underlying image's operating system:</p> <pre><code>DOS 3.x: A, B, I, T, S, R, a, b.\nPascal: bad, code, text, info, data, graf, foto.\nProDOS: bas, bin, sys, txt, rel, etc.; see ProdosFileTypes.properties for more.\n</code></pre> <p>In order to feed AppleCommander standard input, a file would be specified with the input parameter for the task - like this:</p> <pre><code>&lt;appleCommander command=\"p\"\n                input=\"manifest.mf\"\n                imagename=\"${myDiskImage}\"\n                filename=\"MANIFEST\"\n                type=\"T\" /&gt;\n</code></pre> <p>In order to extract a file from an image to a real file, the real file would be specified with the output parameter for the task - like this:</p> <pre><code>&lt;appleCommander command=\"g\"\n                imagename=\"${myDiskImage}\"\n                filename=\"MANIFEST\"\n                output=\"manifest.mf\" /&gt;\n</code></pre> <p>AppleCommander ant tasks can be told to ignore errors with the <code>failonerror</code> parameter:</p> <pre><code>&lt;appleCommander command=\"p\"\n                failonerror=\"false\"\n                input=\"${hugeFileExpectFailure}\"\n                imagename=\"${pro800image}\"\n                filename=\"BLOWUP\"\n                type=\"txt\" /&gt;\n</code></pre>"},{"location":"dev-notes/cc65-pipeline/","title":"cc65 Pipeline","text":"<p>There is a <code>cc65</code> based pipeline that is maintained with current versions of various Apple II tooling, including <code>ac</code>.</p> <p>See the a2geek/cc65-pipeline GitHub repository for usage and source as well as the associated a2geek/cc65-pipeline Docker Hub repository for Docker images.</p>"},{"location":"dev-notes/gav/","title":"Dependencies","text":"<p>Much of AppleCommander and it's tooling should be reusable and can be included in other projects.</p>"},{"location":"dev-notes/gav/#applecommander","title":"AppleCommander","text":"<p>The AppleCommander libraries are available as a dependency.</p> <p>Maven:</p> <pre><code>&lt;dependency&gt;\n &lt;groupId&gt;net.sf.applecommander&lt;/groupId&gt;\n &lt;artifactId&gt;AppleCommander&lt;/artifactId&gt;\n &lt;version&gt;1.10.1&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Gradle:</p> <pre><code>implementation 'net.sf.applecommander:AppleCommander:1.10.1'\n</code></pre> <p>Note that as of 1.4.0, the Shrinkit library is now a separate project.</p>"},{"location":"dev-notes/gav/#shrinkit","title":"Shrinkit","text":"<p>The Shrinkit library is available as a separate dependency.</p> <p>Maven:</p> <pre><code>&lt;dependency&gt;\n &lt;groupId&gt;net.sf.applecommander&lt;/groupId&gt;\n &lt;artifactId&gt;ShrinkItArchive&lt;/artifactId&gt;\n &lt;version&gt;1.2.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Gradle:</p> <pre><code>implementation 'net.sf.applecommander:ShrinkItArchive:1.2.2'\n</code></pre>"},{"location":"dev-notes/gav/#applesingle","title":"AppleSingle","text":"<p>The AppleSingle support is available in a dedicated API.</p> <p>Maven:</p> <pre><code>&lt;dependency&gt;\n &lt;groupId&gt;net.sf.applecommander&lt;/groupId&gt;\n &lt;artifactId&gt;applesingle-api&lt;/artifactId&gt;\n &lt;version&gt;1.2.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Gradle:</p> <pre><code>implementation 'net.sf.applecommander:applesingle-api:1.2.2'\n</code></pre>"},{"location":"dev-notes/gav/#basic","title":"BASIC","text":"<p>The BASIC tooling is available in the bastools API.</p> <p>Maven:</p> <pre><code>&lt;dependency&gt;\n &lt;groupId&gt;net.sf.applecommander&lt;/groupId&gt;\n &lt;artifactId&gt;bastools-api&lt;/artifactId&gt;\n &lt;version&gt;0.4.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Gradle:</p> <pre><code>implementation 'net.sf.applecommander:bastools-api:0.4.0'\n</code></pre>"},{"location":"dev-notes/gav/#applecommander-disassembler","title":"AppleCommander disassembler","text":"<p>The AppleCommander disassembler tooling is available in the acdasm API.</p> <p>Maven:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;net.sf.applecommander&lt;/groupId&gt;\n    &lt;artifactId&gt;acdasm&lt;/artifactId&gt;\n    &lt;version&gt;0.5.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Gradle:</p> <pre><code>implementation 'net.sf.applecommander:acdasm:0.5.0'\n</code></pre>"},{"location":"dev-notes/gav/#final-notes","title":"Final Notes","text":"<p>This is a manual release process, so it may take a bit of time (and possibly some prodding).</p> <p>Notes:</p> <ul> <li>There are no plans to change from <code>net.sf.applecommander</code> in the GAV. (It should have been <code>com.webcodepro.applecommander</code>, however, that domain was given up long ago.)</li> <li>The Java packages will remain <code>com.webcodepro.applecommander</code> as everyone depends on that package scheme.</li> <li>The versions listed here are modified by hand, so don't hesitate to check them. Note that the version should match was is in the GitHub release page for each of the subprojects.</li> </ul>"},{"location":"dev-notes/uml/","title":"UML diagrams","text":""},{"location":"dev-notes/uml/#disk-and-formatteddisk","title":"Disk and FormattedDisk","text":"<p>Generally, a <code>Disk</code> represents an Apple ][ disk image.  This can be size, any order, and any format.  The <code>Disk</code> class itself manages the varying disk order (DOS, ProDOS, or their variants) simply by the file extension.  <code>Disk</code>s that are formatted with an operating system are managed by the subclasses of <code>FormattedDisk</code>.  The general user interface(s) can then work with a <code>FormattedDisk</code> without knowing about the specific operating system.</p> <p></p> <p>Somewhat surprisingly, a <code>Disk</code> can contain multiple <code>FormattedDisk</code>s.  By structuring the disk image in this manner, the 800K DOS formats can be accommodated (yielding two 400K DOS <code>FormattedDisk</code>s - which models the physical behavior rather nicely).  Additionally, other configurations can be accommodated in the future - Pascals multiple volume configuration or a ProDOS volume hosting DOS 3.3 and/or Pascal volumes.</p>"},{"location":"dev-notes/uml/#fileentry","title":"FileEntry","text":"<p>Each <code>Disk</code> contains multiple files.  The file is represented by a <code>FileEntry</code>.  You will note that the attributes exposed by the <code>FileEntry</code> interface are pretty generic.  To accommodate the various views available, the <code>getFileColumnData</code> method was added.  This method will, depending on the setting, return a standard view, a native view (mimics the native catalog/directory display), and a detailed view (giving all available data on the files).</p> <p></p>"},{"location":"dev-notes/uml/#filefilter","title":"FileFilter","text":"<p>In order to allow AppleCommander to export files easily, the concept of a <code>FileFilter</code> was added. A <code>FileFilter</code> simply takes the raw data from the <code>FileEntry</code> and then processes it according to the filter.  Adding new filters is as easy as implementing the <code>FileFilter</code> interface and then hooking it into the user interface!</p> <p></p>"},{"location":"dev-notes/uml/#prodoscommonentry","title":"ProdosCommonEntry","text":"<p>Just to be complete, ProDOS yielded itself to a simple object hierarchy.</p> <p></p>"},{"location":"dev-notes/javadoc/AppleCommander/legal/jquery/","title":"Jquery","text":""},{"location":"dev-notes/javadoc/AppleCommander/legal/jquery/#jquery-v371","title":"jQuery v3.7.1","text":""},{"location":"dev-notes/javadoc/AppleCommander/legal/jquery/#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.7.1\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"dev-notes/javadoc/AppleCommander/legal/jqueryUI/","title":"jqueryUI","text":""},{"location":"dev-notes/javadoc/AppleCommander/legal/jqueryUI/#jquery-ui-v1132","title":"jQuery UI v1.13.2","text":""},{"location":"dev-notes/javadoc/AppleCommander/legal/jqueryUI/#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n\n</code></pre>"},{"location":"dev-notes/javadoc/ShrinkItArchive/legal/jquery/","title":"Jquery","text":""},{"location":"dev-notes/javadoc/ShrinkItArchive/legal/jquery/#jquery-v371","title":"jQuery v3.7.1","text":""},{"location":"dev-notes/javadoc/ShrinkItArchive/legal/jquery/#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.7.1\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"dev-notes/javadoc/ShrinkItArchive/legal/jqueryUI/","title":"jqueryUI","text":""},{"location":"dev-notes/javadoc/ShrinkItArchive/legal/jqueryUI/#jquery-ui-v1132","title":"jQuery UI v1.13.2","text":""},{"location":"dev-notes/javadoc/ShrinkItArchive/legal/jqueryUI/#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n\n</code></pre>"},{"location":"dev-notes/javadoc/acdasm/legal/jquery/","title":"Jquery","text":""},{"location":"dev-notes/javadoc/acdasm/legal/jquery/#jquery-v371","title":"jQuery v3.7.1","text":""},{"location":"dev-notes/javadoc/acdasm/legal/jquery/#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.7.1\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"dev-notes/javadoc/acdasm/legal/jqueryUI/","title":"jqueryUI","text":""},{"location":"dev-notes/javadoc/acdasm/legal/jqueryUI/#jquery-ui-v1132","title":"jQuery UI v1.13.2","text":""},{"location":"dev-notes/javadoc/acdasm/legal/jqueryUI/#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n\n</code></pre>"},{"location":"dev-notes/javadoc/applesingle/legal/jquery/","title":"Jquery","text":""},{"location":"dev-notes/javadoc/applesingle/legal/jquery/#jquery-v371","title":"jQuery v3.7.1","text":""},{"location":"dev-notes/javadoc/applesingle/legal/jquery/#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.7.1\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"dev-notes/javadoc/applesingle/legal/jqueryUI/","title":"jqueryUI","text":""},{"location":"dev-notes/javadoc/applesingle/legal/jqueryUI/#jquery-ui-v1132","title":"jQuery UI v1.13.2","text":""},{"location":"dev-notes/javadoc/applesingle/legal/jqueryUI/#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n\n</code></pre>"},{"location":"dev-notes/javadoc/bastools/legal/jquery/","title":"Jquery","text":""},{"location":"dev-notes/javadoc/bastools/legal/jquery/#jquery-v371","title":"jQuery v3.7.1","text":""},{"location":"dev-notes/javadoc/bastools/legal/jquery/#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.7.1\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"dev-notes/javadoc/bastools/legal/jqueryUI/","title":"jqueryUI","text":""},{"location":"dev-notes/javadoc/bastools/legal/jqueryUI/#jquery-ui-v1132","title":"jQuery UI v1.13.2","text":""},{"location":"dev-notes/javadoc/bastools/legal/jqueryUI/#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n\n</code></pre>"},{"location":"history/current/","title":"Current releases","text":"<p>Release notes and downloads are now on the GitHub releases section. To download the most recent version of AppleCommander, please visit the releases tab at our GitHub page!</p> <p>Please visit the installing AppleCommander page for installation instructions.</p>"},{"location":"history/version100/","title":"1.0 (28-Oct-2002)","text":"<p>I am working on a general Apple2 disk image utility. Why? I haven't found any one utility that does everything for transferring files in and out of disk images - and, besides, I'm thoroughly enjoying retro computing.</p> <p>Currently, it reads and displays the contents of disks. It supports DOS 3.3, ProDOS, Apple Pascal, and RDOS formatted disks - and reads compressed (<code>*.gz</code>) images, 140K DOS ordered (<code>*.do</code>, <code>*.dsk</code>), 140K ProDOS ordered (<code>*.po</code>), 800K ProDOS ordered (<code>*.2img</code>, <code>*.2mg</code>), and 32MB ApplePC hard disk images (<code>*.hdv</code>). This doesn't cover all image formats, but covers the ones I needed/wanted to have covered - it can be expanded relatively easily.</p> <p>Future direction are to (a) have the ability to extract files from images and (b) to import files into images.</p> <p>Two caveats - it is written in Java (you need the JVM installed to run it), and I also have been using this as an excuse to work with the Eclipse.org SWT windowing library (which will need to be downloaded also). However, the upside to this is that it should run wherever Java and SWT run (Windows, Linux, and Mac OS X right now).</p> <p>If you're interested, come and take a peek!</p> <pre><code>    http://webpages.charter.net/greener/AppleCommander/\n    (Note that this link is no longer active.)\n</code></pre> <p>-Rob</p>"},{"location":"history/version110/","title":"1.1 (12-Nov-2002)","text":"<p>A new release of AppleCommander is available. Version 1.1.0 brings in file exporting and filtering (if chosen). File export types include raw disk, binary, ASCII text, Applesoft BASIC, Integer BASIC, and Graphics modes (Hires and Double Hires).</p> <p>AppleCommander reads and DOS 3.3, ProDOS, Apple Pascal, and RDOS formatted disks - and reads compressed (<code>*.gz</code>) images, 140K DOS ordered (<code>*.do</code>, <code>*.dsk</code>), 140K ProDOS ordered (<code>*.po</code>), 800K ProDOS ordered (<code>*.2img</code>, <code>*.2mg</code>), and 32MB ApplePC hard disk images (<code>*.hdv</code>).</p> <p>If you're interested, come and take a peek!</p> <pre><code>    http://webpages.charter.net/greener/AppleCommander/\n    (Note that this link is no longer active.)\n</code></pre> <p>-Rob</p>"},{"location":"history/version111/","title":"1.1.1 (30-Nov-2002)","text":"<p>A new release of AppleCommander is available. Version 1.1.1 brings AppleWorks word processor (AWP) file exporting, multiple files can be exported at once, the wizard \"guesses\" the file type, along with minor bug fixes and enhancements.</p> <p>With this release, AppleCommander is GPL. The home page has now moved to:</p> <pre><code>http://applecommander.sourceforge.net/\n</code></pre> <p>The SourceForge project page is located at:</p> <pre><code>http://sourceforge.net/projects/applecommander/\n</code></pre> <p>If you're interested, please take a peek. Now that AppleCommander is hosted at SourceForge, you may submit bugs or requests, browse the code, or even contribute code!</p> <p>-Rob</p>"},{"location":"history/version120/","title":"1.2.0 (11-Feb-2003)","text":"<p>A new release of AppleCommander is available. Version 1.2.0 took a bit longer than expected, as I got distracted with other fun stuff in AppleCommander (hence, super-hires exports and AWP to RTF conversion):</p> <ul> <li>Can now create disk images. For the moment, these images are not bootable (including hard disk images) - they do however boot a nifty title screen...</li> <li>Files can now be imported into disks. Formats that support this are DOS 3.3 and ProDOS formats. (Pascal and RDOS will come at a later point.)</li> <li>The AppleWorks export now has an option for exporting to Rich-Text Format (RTF). This format can be loaded into many word-processors easily.</li> <li>The graphics export option now supports Super High-Res images. Both unpacked and packed formats. These are essentially raw dumps from the IIGS memory that were saved to disk.</li> <li>Files can be deleted.</li> <li>Any changes to a disk image can be saved. Please be careful! It's easy enough to keep a backup copy of your work these days.</li> <li>Two new DOS derivatives are available: UniDOS and OzDOS (both are 800K formats).</li> </ul> <p>A Linux and a Windows native executable is in the works. Be warned that they are still experimental. In particular, in the process of compiling, something about the code introduces delays (i.e., click and wait a couple of seconds), and the graphics filter currently needs to be disabled, as GCJ does not support the graphics libraries that are being used.</p> <p>AppleCommander is hosted on SourceForge. The home page is located at:</p> <pre><code>http://applecommander.sourceforge.net/\n</code></pre> <p>The SourceForge project page is located at:</p> <pre><code>http://sourceforge.net/projects/applecommander/\n</code></pre> <p>The files are located at:</p> <pre><code>http://sourceforge.net/project/showfiles.php?group_id=67414\n</code></pre> <p>If you're interested, please take a peek and let me know!</p> <p>-Rob</p>"},{"location":"history/version121/","title":"1.2.1 (01-Mar-2003)","text":"<p>A new release of AppleCommander is available. Version 1.2.1 is primarily a clean-up operation. However, there is a bit of new functionality - AppleWorks Spread Sheet (ASP) and Data Base (ADB) files can both be exported to a <code>*.csv</code> file format.</p> <ul> <li>Now carries margin setting through, sets font to Courier New (more realistic formatting), and fixes boldface not being turned off correctly when converting AWP files to RTF format.</li> <li>Import could/should choose the filetype based upon the file extension for files being imported. Mostly useful for ProDOS; unless a filetype mapping is introduced.</li> <li>Export of AppleWorks Data Base files.</li> <li>Export of AppleWorks Spread Sheet files.</li> <li>Fixed minor issue with ProDOS disks where files at the 128K border would be grown (incorrectly) into a Tree file (instead of a Sapling).</li> <li>Import of multiple files fails after multiple imports. This was an issue with ProDOS files &gt;128K (\"Tree\" files). The delete code didn't handle the master index block appropriately when blocks numbered zero were present (normally indicating the end of file).</li> <li>DOS 3.3 was not writing correct number of sectors if a file was more than 256 sectors long.</li> <li>DOS 3.3 was not managing deleted file entries appropriately and tried to work with track $FF.</li> <li>Fixed offset calculation for 800K DOS organized disks. This primarily affected UniDOS.</li> <li>Import menu should be in directory pane instead of file pane.</li> <li>The information tab does not get updated. Now that the disk can be modified, this page needs to be updated when shown.</li> </ul> <p>I'm still putzing with a compiled version for Linux and Windows, so they haven't shown up as of yet.</p> <p>AppleCommander is hosted on SourceForge. The home page is located at:</p> <pre><code>http://applecommander.sourceforge.net/\n</code></pre> <p>The SourceForge project page is located at:</p> <pre><code>http://sourceforge.net/projects/applecommander/\n</code></pre> <p>The files are located at:</p> <pre><code>http://sourceforge.net/project/showfiles.php?group_id=67414\n</code></pre> <p>If you're interested, please take a peek and let me know!</p> <p>-Rob</p>"},{"location":"history/version122/","title":"1.2.2 (15-Mar-2003)","text":"<p>A new release of AppleCommander is available! Version 1.2.2 continues on the general cleanup. One new export filter of a generalized hex dump has been added and quite a bit of work in relation to ProDOS volumes.</p> <ul> <li>ProDOS disks now re-use deleted file entries. Prior to this fix, deleted entries were never re-used. If importing many files, a \"Disk Full\" error would be generated rather quickly.</li> <li>ProDOS file entries do not generate spurious file entries. There was no method of detecting unused entries in pre-1.2.2 code.</li> <li>Import file specification should only allow address editing if the filetype requires it.</li> <li>Fixed parsing of filetype definitions for ProDOS volumes.</li> <li>Need to be able to import into a directory in ProDOS. This will most likely involve adding an interface indicating a (writable) directory. This interface would be applied to both disks as well as file entries, if appropriate.</li> <li>ProDOS subdirectories need to allocate another block as they fill up; otherwise the directory is limited to the number of entries that fit within the allocated space.</li> <li>Import now sports a progress indicator and identifies which file is being imported.</li> <li>Popup dialogs are now centered above the controlling window instead of popping up randomly.</li> <li>Added a Hex Dump file filter that displays offset into file, hex bytes, and the ASCII code.</li> <li>AppleCommander is now being built by an ANT script instead of by the Eclipse menu pick.</li> </ul> <p>I'm still putzing with a compiled version for Linux and Windows, so they haven't shown up as of yet. (Unchanged - but not forgotten.)</p> <p>AppleCommander is hosted on SourceForge. The home page is located at:</p> <pre><code>http://applecommander.sourceforge.net/\n</code></pre> <p>The SourceForge project page is located at:</p> <pre><code>http://sourceforge.net/projects/applecommander/\n</code></pre> <p>The files are located at:</p> <pre><code>http://sourceforge.net/project/showfiles.php?group_id=67414\n</code></pre> <p>If you're interested, please take a peek and let me know what you think!</p> <p>-Rob</p>"},{"location":"history/version123/","title":"1.2.3 (13-Apr-2003)","text":"<p>A new release of AppleCommander is available! Version 1.2.3 concentrated work on being able to build a Windows executable.</p> <ul> <li>Separated image support for GraphicsFileFilter. This allows easier preparation for compiling AppleCommander as a Windows executable (and allows limited image support to boot).</li> <li>Compile into native executable (Windows works now).</li> <li>Work on identifying why GCJ introduces slow performance to some areas. This appears to be resolved with an early build of GCJ 3.3.</li> </ul> <p>AppleCommander is hosted on SourceForge. The home page is located at:</p> <pre><code>http://applecommander.sourceforge.net/\n</code></pre> <p>The SourceForge project page is located at:</p> <pre><code>http://sourceforge.net/projects/applecommander/\n</code></pre> <p>The files are located at:</p> <pre><code>http://sourceforge.net/project/showfiles.php?group_id=67414\n</code></pre> <p>If you're interested, please take a peek and let me know what you think!</p> <p>-Rob</p>"},{"location":"history/version130/","title":"1.3.0 (04-Dec-2003)","text":"<p>Very early release of an Applesoft BASIC compiler; John Matthews' bug fixes have been incorporated; Chris Sebrell's fixes have been incorporated.</p>"},{"location":"history/version131/","title":"1.3.1 (12-Dec-2003)","text":"<p>A new release of AppleCommander is available!</p> <p>Version 1.3.1 introduces file viewing as well as John Matthews command-line version of AppleCommander (<code>ac</code>). The beginnings of an AppleSoft compiler have been added (strictly beta and incomplete). Full gory details are listed below for both the unannounced 1.3.0 as well as the current 1.3.1.</p> <p>AppleCommander is hosted on SourceForge. The home page is located at:</p> <pre><code>http://applecommander.sourceforge.net/\n</code></pre> <p>The SourceForge project page is located at:</p> <pre><code>http://sourceforge.net/projects/applecommander/\n</code></pre> <p>The files are located at:</p> <pre><code>http://sourceforge.net/project/showfiles.php?group_id=67414\n</code></pre> <p>John Matthews' command-line \"ac\" utility is available at:</p> <pre><code>http://www.wright.edu/~john.matthews/ac.html\n</code></pre> <p>If you're interested, please take a peek and let me know what you think!</p> <p>-Rob</p> <p>New for version 1.3.1 (2003-12-12):</p> <ul> <li>Short-cut keys have been implemented.         From AppleCommander window:         - CTRL+O = Open a disk image         - CTRL+C = Create a new disk image         - CTRL+A = About...</li> <li> <ul> <li>From disk window         - Toolbar shortcuts:             - F2 = Standard file view             - F3 = Native file view             - F4 = Detail file view             - F5 = Show deleted files             - CTRL+I = Import files wizard             - CTRL+S = Save             - CTRL+SHIFT+S = Save As         - Directory shortcuts (in addition to toolbar shortcuts)             - \"+\" = expand one level             - \"-\" = close one level             - CTRL+\"+\" = expand fully             - CTRL+\"-\" = close fully         - File shortcuts (in addition to toolbar shortcuts)             - CTRL+E = Export file wizard             - CTRL+C = Compile BASIC program (BETA)             - CTRL+V = View file (later version)             - CTRL+D = Delete file</li> </ul> </li> <li>Spent time ensuring that buttons, context menus, and shortcuts are enabled or disabled as appropriate.</li> <li>Save does not allow the disk image location to be chosen for new images:<ul> <li>Implemented Save As</li> <li>A save on a new image invokes Save As</li> </ul> </li> <li>File preview supports:<ul> <li>BASIC programs (Applesoft and Integer BASIC); Applesoft BASIC is colored</li> <li>Graphics images (same as supported by the graphics export function)</li> <li>Appleworks (database, spreadsheet, word processor)</li> <li>Text files</li> <li>Hex dump of all the above</li> <li>\"Raw\" format of all of the above; this includes all data as read from disk including length and starting address as well as full sectors/blocks</li> <li>Shortcuts available:<ul> <li>F2 = Native format view (as applicable)</li> <li>F3 = Hex dump view</li> <li>F4 = Raw hex dump of disk bytes (includes length or address start along with all bytes stored on disk - a multiple of 256 or 512 depending on disk format)</li> <li>CTRL+A = Select all (only text formats)</li> <li>CTRL+C = Copy to clipboard (only text formats)</li> <li>CTRL+P = Print</li> </ul> </li> </ul> </li> <li>Printing is available from the file preview.</li> <li>Copy is avilable from file preview except for images.</li> <li>Opening an invalid disk image (or a file that is not a disk image) no longer crashes AppleCommander.</li> <li>Provide a command-line interface - John Matthews \"ac\" is now supplied as part of the AppleCommander distribution. If AppleCommander gets no command-line arguments, the GUI version is launched. Otherwise, AppleCommander reserves the following messages:<ul> <li><code>-swt</code> = force SWT version</li> <li><code>-swing</code> = force Swing version (N/A - may be removed)</li> <li><code>-command</code> = force command interpreter (not done - may be superseded by the \"ac\" utility)</li> <li><code>-help</code> or -? = general help messages</li> <li>Everything else is passed on to John's \"ac\" command-line version (from the application help):<ul> <li>AppleCommander command line options:</li> <li><code>-l</code> list directory of image.</li> <li><code>-e</code> export file from image to stdout.</li> <li><code>-g</code> get raw file from image to stdout.</li> <li><code>-p</code> put stdin in destname on image, using file type and address.</li> <li><code>-d</code> delete file from image.</li> <li><code>-p140</code> create a 140K ProDOS image.</li> <li><code>-p800</code> create a 800K ProDOS image.</li> </ul> </li> </ul> </li> </ul> <p>New for version 1.3.0 (2003-12-05):</p> <ul> <li>HDV disks are not always created to their full capacity. AppleCommander, however, assumes that the size of the file on disk is the size of the disk. (Really!) This is an issue because the ProDOS bitmap indicates there is a certain amount of space and AppleCommander just assumes that the data exists.</li> <li> <p>Incorporated fixes from John Matthews. See:</p> <pre><code>http://www.wright.edu/~john.matthews/ac.html\n</code></pre> </li> <li> <p>Early release of Applesoft BASIC compiler. This currently is limited to assembly of small programs. If a command is not compiled, you are likely to just get an error about expecting a line number. Expressions are not very complete. Supported commands are:</p> <pre><code>END, FLASH, FOR, GOTO, GR, HCOLOR, HGR, HGR2, HOME, HPLOT, HTAB, INVERSE, NEXT, NORMAL, PRINT, RETURN, TEXT, VTAB\n</code></pre> </li> <li> <p>Unsupported commands are:</p> <pre><code>ABS, AND, ASC, AT, ATN, CALL, CHR$, CLEAR, COLOR=, CONT, COS, DATA, DEF, DEL, DIM, DRAW, EXP, FN, FRE, GET, GOSUB, GR, HIMEM:, HLIN, IF, IN#, INPUT, INT, LEFT$, LEN, LET, LIST, LOAD, LOG, LOMEM:, MID$, NEW, NOT, NOTRACE, ON, ONERR, OR, PDL, PEEK, PLOT, POKE, POP, POS, PR#, READ, RECALL, REM, RESTORE, RESUME, RIGHT$, RND, ROT=, RUN, SAVE, SCALE=, SCRN, SGN, SHLOAD, SIN, SPC, SPEED=, SQR, STEP, STOP, STORE, STR$, TAB, TAN, THEN, TO, TRACE, USR, VAL, VLIN, WAIT, XDRAW, &amp;\n</code></pre> </li> <li> <p>Note that the compiler is not very sophisticated.</p> </li> <li>Updated build notes and process.</li> <li>DELETE does not seem to delete in all circumstances. (JM caught this one.)</li> </ul> <p>[The End.]</p>"},{"location":"history/version132/","title":"1.3.2 (05-Jun-2004)","text":"<p>A new release of AppleCommander is available!</p> <p>Version 1.3.2 adds support for the nibble disk image order as well as support for read-only CP/M disks. SHR 3200-color graphics capability also.</p> <p>AppleCommander is hosted on SourceForge. The home page is located at:</p> <pre><code>http://applecommander.sourceforge.net/\n</code></pre> <p>The SourceForge project page is located at:</p> <pre><code>http://sourceforge.net/projects/applecommander/\n</code></pre> <p>The files are located at:</p> <pre><code>http://sourceforge.net/project/showfiles.php?group_id=67414\n</code></pre> <p>If you're interested, please take a peek and let me know what you think!</p> <p>-Rob</p> <p>New for version 1.3.2 (2004-06-05):</p> <ul> <li>Print file listing or full disk listing (including subdirectories or multiple volumes).</li> <li>Added support for Super Hi-Res 3200 color format (PIC of 38400 bytes, file type $C1 and auxiliary type $0002).</li> <li>Updated preferences to remember the following directory locations:<ul> <li>Open</li> <li>Save/Save As (new)</li> <li>Import (new)</li> <li>Export</li> <li>Compile</li> </ul> </li> <li>Added support for Finder Icons File ($CA or \"ICN\").</li> <li>Added CP/M disk image support.</li> <li>Restructured how AppleCommander manages disk ordering. This simplifies the manner in which various disk ordering schemes are implemented, and makes it possible to translate between ordering schemes.</li> <li>Support for nibble images (<code>*.NIB</code>) added. Can read and write to the images as long as that format supports writing.</li> <li>To support nibble images, changed the structure surrounding the disk image for a Disk. There now is an <code>ImageOrder</code> which manages the ordering of data on the image and supplies low-level read and write routines (track/sector and block). An <code>ImageOrder</code> holds data in an image layout - this allows the generic byte array and 2IMG layouts to be abstracted away from an images order. This does add interaction complexity but actually simplified the Disk class.</li> <li>Viewing or double-clicking on a directory will navigate into that directory.</li> <li>Viewing a deleted file no longer crashes AppleCommander - a warning message is displayed.</li> <li>Updated Export Graphics wizard and export right-click options.</li> <li>Add the ability to change physical order too (DOS &lt;=&gt; ProDOS &lt;=&gt; Nibble) on 140KB images.</li> <li>Add ability to compare disks - regardless of physical order.</li> <li>Started using Gimp for images (instead of Microsoft Photo Draw 2).</li> <li>Added a \"View As\" menu pick in context menu. (Just Text or Graphics at this time.)</li> </ul> <p>[The End.]</p>"},{"location":"history/version133/","title":"1.3.3 (18-Jun-2004)","text":"<p>A new release of AppleCommander is available!</p> <p>Version 1.3.3 adds support for Apple Pascal .text files; also added support for Assembly source file viewing. Scrollbar increments are now sensible.</p> <p>AppleCommander is hosted on SourceForge. The home page is located at:</p> <pre><code>http://applecommander.sourceforge.net/\n</code></pre> <p>The SourceForge project page is located at:</p> <pre><code>http://sourceforge.net/projects/applecommander/\n</code></pre> <p>The files are located at:</p> <pre><code>http://sourceforge.net/project/showfiles.php?group_id=67414\n</code></pre> <p>If you're interested, please take a peek and let me know what you think!</p> <p>-Rob</p> <p>New for version 1.3.3 (2004-06-18):</p> <ul> <li>Repackage code - packages were getting a bit large. The goal is to make class structure/placement more logical. GUI:<ul> <li>Moved the SWT wizards into their own packages;</li> <li>Separated utility classes into the util package;</li> <li>Main application windows remain in swt package.</li> </ul> </li> <li>Storage:<ul> <li>Moved OS formats into their respective packages in the \"os\" package (<code>dos33</code>, <code>prodos</code>, <code>cpm</code>, <code>rdos</code>, <code>pascal</code>);</li> <li>Filters are now in the filters package;</li> <li>General storage classes remain under storage (<code>Disk</code>, <code>FormattedDisk</code>, etc).</li> </ul> </li> <li>Added formatted assembly <code>FileFilter</code>. Understands Merlin format source files. Need to recognize various formats - <code>T.*</code>, <code>*.S</code>, etc. Need examples for other formats (Orca, APW, etc).</li> <li>File viewer window now scrolls an appropriate amount: PgUp/PgDn, arrows, mouse wheel all work (must select content area first of course).</li> <li>Wizard windows no longer show up with the title bar off the screen.</li> <li>Refactored <code>FileViewerWindow</code>. Created supporting <code>FilterAdapter</code> classes as well as (presumably) reusable <code>ContentAdapters</code>. Started caching the filtered content for a little speed improvement when switching filters (native, hex, raw) in the <code>FileView</code>.</li> <li>Hans Otten provided information on Apple Pascal's formatting of <code>.text</code> files - they are now read correctly with appropriate character spacing and header section is ignored.</li> <li>Fixed error where viewing an invalid graphics file crashed AppleCommander (typically was too short). This can be done by context menu -&gt; View As -&gt; Graphics.</li> <li>Further automated build (and web site) deployment. Ant now builds source zip, GUI JAR, command-line jar, javadoc, and website. Website zip file only needs to be extracted into the web root to be deployed. Windows executable is scripted but not plugged into the Ant script at this time.</li> </ul> <p>[The End.]</p>"},{"location":"history/version134/","title":"1.3.4 (31-Mar-2007)","text":"<p>A new release of AppleCommander is available!</p> <p>Version 1.3.4 adds support for Apple Pascal 800K images; OS X issues resolved; Pascal images are now writable; and some work towards internationalization has been done.</p> <p>AppleCommander is hosted on SourceForge. The home page is located at:</p> <pre><code>http://applecommander.sourceforge.net/\n</code></pre> <p>The SourceForge project page is located at:</p> <pre><code>http://sourceforge.net/projects/applecommander/\n</code></pre> <p>The files are located at:</p> <pre><code>http://sourceforge.net/project/showfiles.php?group_id=67414\n</code></pre> <p>If you're interested, please take a peek and let me know what you think! Contributions are more than welcome. If anyone wants to create an engaging GUI, that would be a great addition. Any anything else you think should be in AppleCommander...</p> <p>-Rob</p> <p>New for version 1.3.4 (2007-03-31):</p> <ul> <li>Started using the SWT S-Leak application to test for application resource leakage.</li> <li>Reports of a few issues with 800K images. UniDOS in particular doesn't appear to be recognized appropriately. This was due to a mix-up in setting the the image ordering.</li> <li>Fixed the bug where the import of a binary file does not set the address for DOS images.</li> <li>Fixed bug that where a file could not be exported as raw binary. (Crashed AppleCommander.)</li> <li>Raw binary files may now be imported - just check the raw image checkbox in the import wizard.</li> <li>Prepare for internationalization (I18N). Started as a simplification process but it got carried away. Text is stored in text bundles throughout the code. The files end with <code>____Bundle.properties</code>. The groupings are Storage, Compiler, Ui, and Text; directories relate to the package. Contributions are more than welcome seeing as I know very little German and it's unlikely that I'll get my wife to spend time translating to Spanish.</li> <li>Updates per Eclipse 3.0 recommendations.</li> <li>Resolve OS X issues where window cannot come to the foreground. (J Matthews)</li> <li>Add Apple Pascal writing capability. (J Matthews)</li> </ul> <p>[The End.]</p>"},{"location":"history/version135/","title":"1.3.5 (01-Jun-2008)","text":"<p>A new release of AppleCommander is available!</p> <p>Version 1.3.5 adds support for cc65 and improves support for Apple UCSD Pascal 800K images and Mac OS X.</p> <p>AppleCommander is hosted on SourceForge. The home page is located at:</p> <pre><code>http://applecommander.sourceforge.net/\n</code></pre> <p>The SourceForge project page is located at:</p> <pre><code>http://sourceforge.net/projects/applecommander/\n</code></pre> <p>The files are located at:</p> <pre><code>http://sourceforge.net/project/showfiles.php?group_id=67414\n</code></pre> <p>New for version 1.3.5 (2008-06-01):</p> <ul> <li>Added -cc65 option to use header information for start address.</li> <li>Fixed a bug in which DosFormatDisk.createFile() was iterating tracks instead of sectors.</li> <li>Fixed a related bug in which the DOS start address wasn't set correctly when recycling a previously used directory entry.</li> <li>Enabled 800K Pascal disk images; added Pascal unit tests.</li> <li>Added command-line guide to web site.</li> </ul> <p>[fin]</p>"},{"location":"history/version13514/","title":"1.3.5.14 (27-Nov-2013)","text":"<p>Pulled from Call-A.P.P.L.E..</p> <p>AppleCommander, the java based floppy viewing software has been updated.  Dr. John B. Matthews has put forth version 1.3.5.14 which is intended to address a freezing issue which has been in many early versions.  The issue addressed in the update affected SWT and has long forced users to to FORCE QUIT the application.  The new version has been confirmed to work on all versions of Mac OS X from 10.5.x to 10.9.x.</p> <p>AppleCommander is a floppy disk image viewer which allows users to check the contents of Apple II Disk images, manipulate files, change disk ordering and save the disk images to the users local drive. For more information or to download the latest build, check out the AppleCommander website at:</p> <p>https://sites.google.com/site/drjohnbmatthews/applecommander</p>"}]}